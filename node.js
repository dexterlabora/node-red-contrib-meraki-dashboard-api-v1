'use strict';
var lib = require('./lib.js');

/*
DISABLES Console.log  for production
*/
console.log = function() {};



module.exports = function (RED) {
    function MerakiDashboardApiNode(config) {
        RED.nodes.createNode(this, config);
        this.service = RED.nodes.getNode(config.service);
        console.log('node.js.mustache this.service.host ', this.service.host);
        console.log('node.js.mustache config.host ', config.host);
        this.method = config.method;
        this.storedParams = config.storedParams;
          
        var node = this;
        console.log('first run: node = this', node);

        node.on('input', function (msg) {
            var node = this;
            var errorFlag = false;
            console.log("this.service.host", this.service.host);
            console.log("node.js.mustache config", config);
            console.log("node.js.mustache this", this);
            var client;
            if (this.service && this.service.host) {
                if(msg.service){
                    if (msg.service.host) {
                        // override apiUrl with input msg
                        client = new lib.MerakiDashboardApi({ domain: msg.service.host });
                }              
                }else{
                    client = new lib.MerakiDashboardApi({ domain: this.service.host });
                }
            } else {
                node.error('Host in configuration node is not specified.', msg);
                errorFlag = true;
            }
            if (!errorFlag && this.service && this.service.credentials && this.service.credentials.secureApiKeyValue) {
                if(msg.service){
                    if (msg.service.apiKey) {
                        // override apiKey with input msg
                        client.setApiKey(msg.service.apiKey,
                            this.service.secureApiKeyHeaderOrQueryName, false);
                    }              
                }else{
                    if (this.service.secureApiKeyIsQuery) {
                        client.setApiKey(this.service.credentials.secureApiKeyValue,
                                        this.service.secureApiKeyHeaderOrQueryName, true);
                    } else {
                        client.setApiKey(this.service.credentials.secureApiKeyValue,
                                        this.service.secureApiKeyHeaderOrQueryName, false);
                    }
                }
            }
            if (!errorFlag) {
                client.body = msg.payload || {};
            }

            var result;
            if(!node.storedParams){
                node.storedParams = [];
            }
            console.log('node.js node', node);
            var storedParamValsMap = {};
            node.storedParams.forEach(p =>{
                storedParamValsMap[p.camelCaseName] = p.value;
            })
            var storedParamTypeMap = {};
            node.storedParams.forEach(p =>{
                storedParamTypeMap[p.camelCaseName] = p.type;
            })

            node.method = node.method || RED.util.getMessageProperty(msg, "operationId");

            if (!errorFlag && node.method === 'getDevice') {
                var getDevice_parameters = [];
                var getDevice_nodeParam;
                var getDevice_nodeParamType;
                
                
                getDevice_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDevice_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDevice_nodeParamType === 'str') {
                    //console.log('getDevice_nodeParamType is "str"');
                    getDevice_parameters.serial = getDevice_nodeParam || undefined;
                } else {
                    //console.log('getDevice_nodeParamType is not "str"')
                    getDevice_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDevice(getDevice_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDevice') {
                var updateDevice_parameters = [];
                var updateDevice_nodeParam;
                var updateDevice_nodeParamType;
                
                
                updateDevice_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDevice_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDevice_nodeParamType === 'str') {
                    //console.log('updateDevice_nodeParamType is "str"');
                    updateDevice_parameters.serial = updateDevice_nodeParam || undefined;
                } else {
                    //console.log('updateDevice_nodeParamType is not "str"')
                    updateDevice_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDevice_nodeParam = storedParamValsMap['updateDevice'] ||
                    RED.util.getMessageProperty(msg, "updateDevice");

                updateDevice_nodeParamType = storedParamTypeMap['updateDevice'] ||
                    RED.util.getMessageProperty(msg, "updateDevice");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDevice_parameters.updateDevice = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDevice_nodeParam === 'object'){
                        updateDevice_parameters.updateDevice = updateDevice_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDevice_nodeParam || '{}'
                        updateDevice_nodeParam = JSON.parse(nodeParam) ; 
                        updateDevice_parameters.updateDevice = updateDevice_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDevice_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDevice(updateDevice_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceApplianceDhcpSubnets') {
                var getDeviceApplianceDhcpSubnets_parameters = [];
                var getDeviceApplianceDhcpSubnets_nodeParam;
                var getDeviceApplianceDhcpSubnets_nodeParamType;
                
                
                getDeviceApplianceDhcpSubnets_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceApplianceDhcpSubnets_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceApplianceDhcpSubnets_nodeParamType === 'str') {
                    //console.log('getDeviceApplianceDhcpSubnets_nodeParamType is "str"');
                    getDeviceApplianceDhcpSubnets_parameters.serial = getDeviceApplianceDhcpSubnets_nodeParam || undefined;
                } else {
                    //console.log('getDeviceApplianceDhcpSubnets_nodeParamType is not "str"')
                    getDeviceApplianceDhcpSubnets_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceApplianceDhcpSubnets(getDeviceApplianceDhcpSubnets_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceAppliancePerformance') {
                var getDeviceAppliancePerformance_parameters = [];
                var getDeviceAppliancePerformance_nodeParam;
                var getDeviceAppliancePerformance_nodeParamType;
                
                
                getDeviceAppliancePerformance_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceAppliancePerformance_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceAppliancePerformance_nodeParamType === 'str') {
                    //console.log('getDeviceAppliancePerformance_nodeParamType is "str"');
                    getDeviceAppliancePerformance_parameters.serial = getDeviceAppliancePerformance_nodeParam || undefined;
                } else {
                    //console.log('getDeviceAppliancePerformance_nodeParamType is not "str"')
                    getDeviceAppliancePerformance_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceAppliancePerformance(getDeviceAppliancePerformance_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'blinkDeviceLeds') {
                var blinkDeviceLeds_parameters = [];
                var blinkDeviceLeds_nodeParam;
                var blinkDeviceLeds_nodeParamType;
                
                
                blinkDeviceLeds_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                blinkDeviceLeds_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (blinkDeviceLeds_nodeParamType === 'str') {
                    //console.log('blinkDeviceLeds_nodeParamType is "str"');
                    blinkDeviceLeds_parameters.serial = blinkDeviceLeds_nodeParam || undefined;
                } else {
                    //console.log('blinkDeviceLeds_nodeParamType is not "str"')
                    blinkDeviceLeds_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                blinkDeviceLeds_nodeParam = storedParamValsMap['blinkDeviceLeds'] ||
                    RED.util.getMessageProperty(msg, "blinkDeviceLeds");

                blinkDeviceLeds_nodeParamType = storedParamTypeMap['blinkDeviceLeds'] ||
                    RED.util.getMessageProperty(msg, "blinkDeviceLeds");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        blinkDeviceLeds_parameters.blinkDeviceLeds = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof blinkDeviceLeds_nodeParam === 'object'){
                        blinkDeviceLeds_parameters.blinkDeviceLeds = blinkDeviceLeds_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = blinkDeviceLeds_nodeParam || '{}'
                        blinkDeviceLeds_nodeParam = JSON.parse(nodeParam) ; 
                        blinkDeviceLeds_parameters.blinkDeviceLeds = blinkDeviceLeds_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof blinkDeviceLeds_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.blinkDeviceLeds(blinkDeviceLeds_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraAnalyticsLive') {
                var getDeviceCameraAnalyticsLive_parameters = [];
                var getDeviceCameraAnalyticsLive_nodeParam;
                var getDeviceCameraAnalyticsLive_nodeParamType;
                
                
                getDeviceCameraAnalyticsLive_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraAnalyticsLive_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsLive_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsLive_nodeParamType is "str"');
                    getDeviceCameraAnalyticsLive_parameters.serial = getDeviceCameraAnalyticsLive_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsLive_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsLive_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceCameraAnalyticsLive(getDeviceCameraAnalyticsLive_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraAnalyticsOverview') {
                var getDeviceCameraAnalyticsOverview_parameters = [];
                var getDeviceCameraAnalyticsOverview_nodeParam;
                var getDeviceCameraAnalyticsOverview_nodeParamType;
                
                
                getDeviceCameraAnalyticsOverview_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraAnalyticsOverview_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsOverview_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is "str"');
                    getDeviceCameraAnalyticsOverview_parameters.serial = getDeviceCameraAnalyticsOverview_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsOverview_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceCameraAnalyticsOverview_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getDeviceCameraAnalyticsOverview_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsOverview_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is "str"');
                    getDeviceCameraAnalyticsOverview_parameters.t0 = getDeviceCameraAnalyticsOverview_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsOverview_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getDeviceCameraAnalyticsOverview_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getDeviceCameraAnalyticsOverview_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsOverview_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is "str"');
                    getDeviceCameraAnalyticsOverview_parameters.t1 = getDeviceCameraAnalyticsOverview_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsOverview_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getDeviceCameraAnalyticsOverview_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getDeviceCameraAnalyticsOverview_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsOverview_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is "str"');
                    getDeviceCameraAnalyticsOverview_parameters.timespan = getDeviceCameraAnalyticsOverview_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsOverview_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getDeviceCameraAnalyticsOverview_nodeParam = storedParamValsMap['objectType'] ||
                    RED.util.getMessageProperty(msg, "objectType");

                getDeviceCameraAnalyticsOverview_nodeParamType = storedParamTypeMap['objectType'] ||
                    RED.util.getMessageProperty(msg, "objectType");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsOverview_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is "str"');
                    getDeviceCameraAnalyticsOverview_parameters.objectType = getDeviceCameraAnalyticsOverview_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsOverview_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsOverview_parameters.objectType = RED.util.getMessageProperty(msg, "objectType");
                }
                                result = client.getDeviceCameraAnalyticsOverview(getDeviceCameraAnalyticsOverview_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraAnalyticsRecent') {
                var getDeviceCameraAnalyticsRecent_parameters = [];
                var getDeviceCameraAnalyticsRecent_nodeParam;
                var getDeviceCameraAnalyticsRecent_nodeParamType;
                
                
                getDeviceCameraAnalyticsRecent_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraAnalyticsRecent_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsRecent_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsRecent_nodeParamType is "str"');
                    getDeviceCameraAnalyticsRecent_parameters.serial = getDeviceCameraAnalyticsRecent_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsRecent_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsRecent_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceCameraAnalyticsRecent_nodeParam = storedParamValsMap['objectType'] ||
                    RED.util.getMessageProperty(msg, "objectType");

                getDeviceCameraAnalyticsRecent_nodeParamType = storedParamTypeMap['objectType'] ||
                    RED.util.getMessageProperty(msg, "objectType");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsRecent_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsRecent_nodeParamType is "str"');
                    getDeviceCameraAnalyticsRecent_parameters.objectType = getDeviceCameraAnalyticsRecent_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsRecent_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsRecent_parameters.objectType = RED.util.getMessageProperty(msg, "objectType");
                }
                                result = client.getDeviceCameraAnalyticsRecent(getDeviceCameraAnalyticsRecent_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraAnalyticsZones') {
                var getDeviceCameraAnalyticsZones_parameters = [];
                var getDeviceCameraAnalyticsZones_nodeParam;
                var getDeviceCameraAnalyticsZones_nodeParamType;
                
                
                getDeviceCameraAnalyticsZones_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraAnalyticsZones_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsZones_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsZones_nodeParamType is "str"');
                    getDeviceCameraAnalyticsZones_parameters.serial = getDeviceCameraAnalyticsZones_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsZones_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsZones_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceCameraAnalyticsZones(getDeviceCameraAnalyticsZones_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraAnalyticsZoneHistory') {
                var getDeviceCameraAnalyticsZoneHistory_parameters = [];
                var getDeviceCameraAnalyticsZoneHistory_nodeParam;
                var getDeviceCameraAnalyticsZoneHistory_nodeParamType;
                
                
                getDeviceCameraAnalyticsZoneHistory_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraAnalyticsZoneHistory_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsZoneHistory_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is "str"');
                    getDeviceCameraAnalyticsZoneHistory_parameters.serial = getDeviceCameraAnalyticsZoneHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsZoneHistory_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceCameraAnalyticsZoneHistory_nodeParam = storedParamValsMap['zoneId'] ||
                    RED.util.getMessageProperty(msg, "zoneId");

                getDeviceCameraAnalyticsZoneHistory_nodeParamType = storedParamTypeMap['zoneId'] ||
                    RED.util.getMessageProperty(msg, "zoneId");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsZoneHistory_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is "str"');
                    getDeviceCameraAnalyticsZoneHistory_parameters.zoneId = getDeviceCameraAnalyticsZoneHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsZoneHistory_parameters.zoneId = RED.util.getMessageProperty(msg, "zoneId");
                }
                                
                getDeviceCameraAnalyticsZoneHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getDeviceCameraAnalyticsZoneHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsZoneHistory_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is "str"');
                    getDeviceCameraAnalyticsZoneHistory_parameters.t0 = getDeviceCameraAnalyticsZoneHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsZoneHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getDeviceCameraAnalyticsZoneHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getDeviceCameraAnalyticsZoneHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsZoneHistory_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is "str"');
                    getDeviceCameraAnalyticsZoneHistory_parameters.t1 = getDeviceCameraAnalyticsZoneHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsZoneHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getDeviceCameraAnalyticsZoneHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getDeviceCameraAnalyticsZoneHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsZoneHistory_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is "str"');
                    getDeviceCameraAnalyticsZoneHistory_parameters.timespan = getDeviceCameraAnalyticsZoneHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsZoneHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getDeviceCameraAnalyticsZoneHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getDeviceCameraAnalyticsZoneHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsZoneHistory_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is "str"');
                    getDeviceCameraAnalyticsZoneHistory_parameters.resolution = getDeviceCameraAnalyticsZoneHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsZoneHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getDeviceCameraAnalyticsZoneHistory_nodeParam = storedParamValsMap['objectType'] ||
                    RED.util.getMessageProperty(msg, "objectType");

                getDeviceCameraAnalyticsZoneHistory_nodeParamType = storedParamTypeMap['objectType'] ||
                    RED.util.getMessageProperty(msg, "objectType");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraAnalyticsZoneHistory_nodeParamType === 'str') {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is "str"');
                    getDeviceCameraAnalyticsZoneHistory_parameters.objectType = getDeviceCameraAnalyticsZoneHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraAnalyticsZoneHistory_nodeParamType is not "str"')
                    getDeviceCameraAnalyticsZoneHistory_parameters.objectType = RED.util.getMessageProperty(msg, "objectType");
                }
                                result = client.getDeviceCameraAnalyticsZoneHistory(getDeviceCameraAnalyticsZoneHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'generateDeviceCameraSnapshot') {
                var generateDeviceCameraSnapshot_parameters = [];
                var generateDeviceCameraSnapshot_nodeParam;
                var generateDeviceCameraSnapshot_nodeParamType;
                
                
                generateDeviceCameraSnapshot_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                generateDeviceCameraSnapshot_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (generateDeviceCameraSnapshot_nodeParamType === 'str') {
                    //console.log('generateDeviceCameraSnapshot_nodeParamType is "str"');
                    generateDeviceCameraSnapshot_parameters.serial = generateDeviceCameraSnapshot_nodeParam || undefined;
                } else {
                    //console.log('generateDeviceCameraSnapshot_nodeParamType is not "str"')
                    generateDeviceCameraSnapshot_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                generateDeviceCameraSnapshot_nodeParam = storedParamValsMap['generateDeviceCameraSnapshot'] ||
                    RED.util.getMessageProperty(msg, "generateDeviceCameraSnapshot");

                generateDeviceCameraSnapshot_nodeParamType = storedParamTypeMap['generateDeviceCameraSnapshot'] ||
                    RED.util.getMessageProperty(msg, "generateDeviceCameraSnapshot");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        generateDeviceCameraSnapshot_parameters.generateDeviceCameraSnapshot = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof generateDeviceCameraSnapshot_nodeParam === 'object'){
                        generateDeviceCameraSnapshot_parameters.generateDeviceCameraSnapshot = generateDeviceCameraSnapshot_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = generateDeviceCameraSnapshot_nodeParam || '{}'
                        generateDeviceCameraSnapshot_nodeParam = JSON.parse(nodeParam) ; 
                        generateDeviceCameraSnapshot_parameters.generateDeviceCameraSnapshot = generateDeviceCameraSnapshot_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof generateDeviceCameraSnapshot_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.generateDeviceCameraSnapshot(generateDeviceCameraSnapshot_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraQualityAndRetention') {
                var getDeviceCameraQualityAndRetention_parameters = [];
                var getDeviceCameraQualityAndRetention_nodeParam;
                var getDeviceCameraQualityAndRetention_nodeParamType;
                
                
                getDeviceCameraQualityAndRetention_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraQualityAndRetention_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraQualityAndRetention_nodeParamType === 'str') {
                    //console.log('getDeviceCameraQualityAndRetention_nodeParamType is "str"');
                    getDeviceCameraQualityAndRetention_parameters.serial = getDeviceCameraQualityAndRetention_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraQualityAndRetention_nodeParamType is not "str"')
                    getDeviceCameraQualityAndRetention_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceCameraQualityAndRetention(getDeviceCameraQualityAndRetention_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceCameraQualityAndRetention') {
                var updateDeviceCameraQualityAndRetention_parameters = [];
                var updateDeviceCameraQualityAndRetention_nodeParam;
                var updateDeviceCameraQualityAndRetention_nodeParamType;
                
                
                updateDeviceCameraQualityAndRetention_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceCameraQualityAndRetention_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceCameraQualityAndRetention_nodeParamType === 'str') {
                    //console.log('updateDeviceCameraQualityAndRetention_nodeParamType is "str"');
                    updateDeviceCameraQualityAndRetention_parameters.serial = updateDeviceCameraQualityAndRetention_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceCameraQualityAndRetention_nodeParamType is not "str"')
                    updateDeviceCameraQualityAndRetention_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceCameraQualityAndRetention_nodeParam = storedParamValsMap['updateDeviceCameraQualityAndRetention'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCameraQualityAndRetention");

                updateDeviceCameraQualityAndRetention_nodeParamType = storedParamTypeMap['updateDeviceCameraQualityAndRetention'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCameraQualityAndRetention");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceCameraQualityAndRetention_parameters.updateDeviceCameraQualityAndRetention = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceCameraQualityAndRetention_nodeParam === 'object'){
                        updateDeviceCameraQualityAndRetention_parameters.updateDeviceCameraQualityAndRetention = updateDeviceCameraQualityAndRetention_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceCameraQualityAndRetention_nodeParam || '{}'
                        updateDeviceCameraQualityAndRetention_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceCameraQualityAndRetention_parameters.updateDeviceCameraQualityAndRetention = updateDeviceCameraQualityAndRetention_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceCameraQualityAndRetention_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceCameraQualityAndRetention(updateDeviceCameraQualityAndRetention_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraSense') {
                var getDeviceCameraSense_parameters = [];
                var getDeviceCameraSense_nodeParam;
                var getDeviceCameraSense_nodeParamType;
                
                
                getDeviceCameraSense_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraSense_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraSense_nodeParamType === 'str') {
                    //console.log('getDeviceCameraSense_nodeParamType is "str"');
                    getDeviceCameraSense_parameters.serial = getDeviceCameraSense_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraSense_nodeParamType is not "str"')
                    getDeviceCameraSense_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceCameraSense(getDeviceCameraSense_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceCameraSense') {
                var updateDeviceCameraSense_parameters = [];
                var updateDeviceCameraSense_nodeParam;
                var updateDeviceCameraSense_nodeParamType;
                
                
                updateDeviceCameraSense_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceCameraSense_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceCameraSense_nodeParamType === 'str') {
                    //console.log('updateDeviceCameraSense_nodeParamType is "str"');
                    updateDeviceCameraSense_parameters.serial = updateDeviceCameraSense_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceCameraSense_nodeParamType is not "str"')
                    updateDeviceCameraSense_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceCameraSense_nodeParam = storedParamValsMap['updateDeviceCameraSense'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCameraSense");

                updateDeviceCameraSense_nodeParamType = storedParamTypeMap['updateDeviceCameraSense'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCameraSense");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceCameraSense_parameters.updateDeviceCameraSense = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceCameraSense_nodeParam === 'object'){
                        updateDeviceCameraSense_parameters.updateDeviceCameraSense = updateDeviceCameraSense_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceCameraSense_nodeParam || '{}'
                        updateDeviceCameraSense_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceCameraSense_parameters.updateDeviceCameraSense = updateDeviceCameraSense_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceCameraSense_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceCameraSense(updateDeviceCameraSense_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraSenseObjectDetectionModels') {
                var getDeviceCameraSenseObjectDetectionModels_parameters = [];
                var getDeviceCameraSenseObjectDetectionModels_nodeParam;
                var getDeviceCameraSenseObjectDetectionModels_nodeParamType;
                
                
                getDeviceCameraSenseObjectDetectionModels_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraSenseObjectDetectionModels_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraSenseObjectDetectionModels_nodeParamType === 'str') {
                    //console.log('getDeviceCameraSenseObjectDetectionModels_nodeParamType is "str"');
                    getDeviceCameraSenseObjectDetectionModels_parameters.serial = getDeviceCameraSenseObjectDetectionModels_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraSenseObjectDetectionModels_nodeParamType is not "str"')
                    getDeviceCameraSenseObjectDetectionModels_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceCameraSenseObjectDetectionModels(getDeviceCameraSenseObjectDetectionModels_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraVideoSettings') {
                var getDeviceCameraVideoSettings_parameters = [];
                var getDeviceCameraVideoSettings_nodeParam;
                var getDeviceCameraVideoSettings_nodeParamType;
                
                
                getDeviceCameraVideoSettings_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraVideoSettings_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraVideoSettings_nodeParamType === 'str') {
                    //console.log('getDeviceCameraVideoSettings_nodeParamType is "str"');
                    getDeviceCameraVideoSettings_parameters.serial = getDeviceCameraVideoSettings_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraVideoSettings_nodeParamType is not "str"')
                    getDeviceCameraVideoSettings_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceCameraVideoSettings(getDeviceCameraVideoSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceCameraVideoSettings') {
                var updateDeviceCameraVideoSettings_parameters = [];
                var updateDeviceCameraVideoSettings_nodeParam;
                var updateDeviceCameraVideoSettings_nodeParamType;
                
                
                updateDeviceCameraVideoSettings_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceCameraVideoSettings_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceCameraVideoSettings_nodeParamType === 'str') {
                    //console.log('updateDeviceCameraVideoSettings_nodeParamType is "str"');
                    updateDeviceCameraVideoSettings_parameters.serial = updateDeviceCameraVideoSettings_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceCameraVideoSettings_nodeParamType is not "str"')
                    updateDeviceCameraVideoSettings_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceCameraVideoSettings_nodeParam = storedParamValsMap['updateDeviceCameraVideoSettings'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCameraVideoSettings");

                updateDeviceCameraVideoSettings_nodeParamType = storedParamTypeMap['updateDeviceCameraVideoSettings'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCameraVideoSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceCameraVideoSettings_parameters.updateDeviceCameraVideoSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceCameraVideoSettings_nodeParam === 'object'){
                        updateDeviceCameraVideoSettings_parameters.updateDeviceCameraVideoSettings = updateDeviceCameraVideoSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceCameraVideoSettings_nodeParam || '{}'
                        updateDeviceCameraVideoSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceCameraVideoSettings_parameters.updateDeviceCameraVideoSettings = updateDeviceCameraVideoSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceCameraVideoSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceCameraVideoSettings(updateDeviceCameraVideoSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCameraVideoLink') {
                var getDeviceCameraVideoLink_parameters = [];
                var getDeviceCameraVideoLink_nodeParam;
                var getDeviceCameraVideoLink_nodeParamType;
                
                
                getDeviceCameraVideoLink_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCameraVideoLink_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraVideoLink_nodeParamType === 'str') {
                    //console.log('getDeviceCameraVideoLink_nodeParamType is "str"');
                    getDeviceCameraVideoLink_parameters.serial = getDeviceCameraVideoLink_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraVideoLink_nodeParamType is not "str"')
                    getDeviceCameraVideoLink_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceCameraVideoLink_nodeParam = storedParamValsMap['timestamp'] ||
                    RED.util.getMessageProperty(msg, "timestamp");

                getDeviceCameraVideoLink_nodeParamType = storedParamTypeMap['timestamp'] ||
                    RED.util.getMessageProperty(msg, "timestamp");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCameraVideoLink_nodeParamType === 'str') {
                    //console.log('getDeviceCameraVideoLink_nodeParamType is "str"');
                    getDeviceCameraVideoLink_parameters.timestamp = getDeviceCameraVideoLink_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCameraVideoLink_nodeParamType is not "str"')
                    getDeviceCameraVideoLink_parameters.timestamp = RED.util.getMessageProperty(msg, "timestamp");
                }
                                result = client.getDeviceCameraVideoLink(getDeviceCameraVideoLink_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCellularGatewayLan') {
                var getDeviceCellularGatewayLan_parameters = [];
                var getDeviceCellularGatewayLan_nodeParam;
                var getDeviceCellularGatewayLan_nodeParamType;
                
                
                getDeviceCellularGatewayLan_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCellularGatewayLan_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCellularGatewayLan_nodeParamType === 'str') {
                    //console.log('getDeviceCellularGatewayLan_nodeParamType is "str"');
                    getDeviceCellularGatewayLan_parameters.serial = getDeviceCellularGatewayLan_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCellularGatewayLan_nodeParamType is not "str"')
                    getDeviceCellularGatewayLan_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceCellularGatewayLan(getDeviceCellularGatewayLan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceCellularGatewayLan') {
                var updateDeviceCellularGatewayLan_parameters = [];
                var updateDeviceCellularGatewayLan_nodeParam;
                var updateDeviceCellularGatewayLan_nodeParamType;
                
                
                updateDeviceCellularGatewayLan_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceCellularGatewayLan_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceCellularGatewayLan_nodeParamType === 'str') {
                    //console.log('updateDeviceCellularGatewayLan_nodeParamType is "str"');
                    updateDeviceCellularGatewayLan_parameters.serial = updateDeviceCellularGatewayLan_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceCellularGatewayLan_nodeParamType is not "str"')
                    updateDeviceCellularGatewayLan_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceCellularGatewayLan_nodeParam = storedParamValsMap['updateDeviceCellularGatewayLan'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCellularGatewayLan");

                updateDeviceCellularGatewayLan_nodeParamType = storedParamTypeMap['updateDeviceCellularGatewayLan'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCellularGatewayLan");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceCellularGatewayLan_parameters.updateDeviceCellularGatewayLan = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceCellularGatewayLan_nodeParam === 'object'){
                        updateDeviceCellularGatewayLan_parameters.updateDeviceCellularGatewayLan = updateDeviceCellularGatewayLan_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceCellularGatewayLan_nodeParam || '{}'
                        updateDeviceCellularGatewayLan_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceCellularGatewayLan_parameters.updateDeviceCellularGatewayLan = updateDeviceCellularGatewayLan_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceCellularGatewayLan_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceCellularGatewayLan(updateDeviceCellularGatewayLan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceCellularGatewayPortForwardingRules') {
                var getDeviceCellularGatewayPortForwardingRules_parameters = [];
                var getDeviceCellularGatewayPortForwardingRules_nodeParam;
                var getDeviceCellularGatewayPortForwardingRules_nodeParamType;
                
                
                getDeviceCellularGatewayPortForwardingRules_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceCellularGatewayPortForwardingRules_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceCellularGatewayPortForwardingRules_nodeParamType === 'str') {
                    //console.log('getDeviceCellularGatewayPortForwardingRules_nodeParamType is "str"');
                    getDeviceCellularGatewayPortForwardingRules_parameters.serial = getDeviceCellularGatewayPortForwardingRules_nodeParam || undefined;
                } else {
                    //console.log('getDeviceCellularGatewayPortForwardingRules_nodeParamType is not "str"')
                    getDeviceCellularGatewayPortForwardingRules_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceCellularGatewayPortForwardingRules(getDeviceCellularGatewayPortForwardingRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceCellularGatewayPortForwardingRules') {
                var updateDeviceCellularGatewayPortForwardingRules_parameters = [];
                var updateDeviceCellularGatewayPortForwardingRules_nodeParam;
                var updateDeviceCellularGatewayPortForwardingRules_nodeParamType;
                
                
                updateDeviceCellularGatewayPortForwardingRules_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceCellularGatewayPortForwardingRules_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceCellularGatewayPortForwardingRules_nodeParamType === 'str') {
                    //console.log('updateDeviceCellularGatewayPortForwardingRules_nodeParamType is "str"');
                    updateDeviceCellularGatewayPortForwardingRules_parameters.serial = updateDeviceCellularGatewayPortForwardingRules_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceCellularGatewayPortForwardingRules_nodeParamType is not "str"')
                    updateDeviceCellularGatewayPortForwardingRules_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceCellularGatewayPortForwardingRules_nodeParam = storedParamValsMap['updateDeviceCellularGatewayPortForwardingRules'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCellularGatewayPortForwardingRules");

                updateDeviceCellularGatewayPortForwardingRules_nodeParamType = storedParamTypeMap['updateDeviceCellularGatewayPortForwardingRules'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceCellularGatewayPortForwardingRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceCellularGatewayPortForwardingRules_parameters.updateDeviceCellularGatewayPortForwardingRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceCellularGatewayPortForwardingRules_nodeParam === 'object'){
                        updateDeviceCellularGatewayPortForwardingRules_parameters.updateDeviceCellularGatewayPortForwardingRules = updateDeviceCellularGatewayPortForwardingRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceCellularGatewayPortForwardingRules_nodeParam || '{}'
                        updateDeviceCellularGatewayPortForwardingRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceCellularGatewayPortForwardingRules_parameters.updateDeviceCellularGatewayPortForwardingRules = updateDeviceCellularGatewayPortForwardingRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceCellularGatewayPortForwardingRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceCellularGatewayPortForwardingRules(updateDeviceCellularGatewayPortForwardingRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceClients') {
                var getDeviceClients_parameters = [];
                var getDeviceClients_nodeParam;
                var getDeviceClients_nodeParamType;
                
                
                getDeviceClients_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceClients_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceClients_nodeParamType === 'str') {
                    //console.log('getDeviceClients_nodeParamType is "str"');
                    getDeviceClients_parameters.serial = getDeviceClients_nodeParam || undefined;
                } else {
                    //console.log('getDeviceClients_nodeParamType is not "str"')
                    getDeviceClients_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceClients_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getDeviceClients_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceClients_nodeParamType === 'str') {
                    //console.log('getDeviceClients_nodeParamType is "str"');
                    getDeviceClients_parameters.t0 = getDeviceClients_nodeParam || undefined;
                } else {
                    //console.log('getDeviceClients_nodeParamType is not "str"')
                    getDeviceClients_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getDeviceClients_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getDeviceClients_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceClients_nodeParamType === 'str') {
                    //console.log('getDeviceClients_nodeParamType is "str"');
                    getDeviceClients_parameters.timespan = getDeviceClients_nodeParam || undefined;
                } else {
                    //console.log('getDeviceClients_nodeParamType is not "str"')
                    getDeviceClients_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getDeviceClients(getDeviceClients_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceLldpCdp') {
                var getDeviceLldpCdp_parameters = [];
                var getDeviceLldpCdp_nodeParam;
                var getDeviceLldpCdp_nodeParamType;
                
                
                getDeviceLldpCdp_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceLldpCdp_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceLldpCdp_nodeParamType === 'str') {
                    //console.log('getDeviceLldpCdp_nodeParamType is "str"');
                    getDeviceLldpCdp_parameters.serial = getDeviceLldpCdp_nodeParam || undefined;
                } else {
                    //console.log('getDeviceLldpCdp_nodeParamType is not "str"')
                    getDeviceLldpCdp_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceLldpCdp(getDeviceLldpCdp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceLossAndLatencyHistory') {
                var getDeviceLossAndLatencyHistory_parameters = [];
                var getDeviceLossAndLatencyHistory_nodeParam;
                var getDeviceLossAndLatencyHistory_nodeParamType;
                
                
                getDeviceLossAndLatencyHistory_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceLossAndLatencyHistory_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceLossAndLatencyHistory_nodeParamType === 'str') {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is "str"');
                    getDeviceLossAndLatencyHistory_parameters.serial = getDeviceLossAndLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is not "str"')
                    getDeviceLossAndLatencyHistory_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceLossAndLatencyHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getDeviceLossAndLatencyHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceLossAndLatencyHistory_nodeParamType === 'str') {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is "str"');
                    getDeviceLossAndLatencyHistory_parameters.t0 = getDeviceLossAndLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is not "str"')
                    getDeviceLossAndLatencyHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getDeviceLossAndLatencyHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getDeviceLossAndLatencyHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceLossAndLatencyHistory_nodeParamType === 'str') {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is "str"');
                    getDeviceLossAndLatencyHistory_parameters.t1 = getDeviceLossAndLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is not "str"')
                    getDeviceLossAndLatencyHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getDeviceLossAndLatencyHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getDeviceLossAndLatencyHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceLossAndLatencyHistory_nodeParamType === 'str') {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is "str"');
                    getDeviceLossAndLatencyHistory_parameters.timespan = getDeviceLossAndLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is not "str"')
                    getDeviceLossAndLatencyHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getDeviceLossAndLatencyHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getDeviceLossAndLatencyHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceLossAndLatencyHistory_nodeParamType === 'str') {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is "str"');
                    getDeviceLossAndLatencyHistory_parameters.resolution = getDeviceLossAndLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is not "str"')
                    getDeviceLossAndLatencyHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getDeviceLossAndLatencyHistory_nodeParam = storedParamValsMap['uplink'] ||
                    RED.util.getMessageProperty(msg, "uplink");

                getDeviceLossAndLatencyHistory_nodeParamType = storedParamTypeMap['uplink'] ||
                    RED.util.getMessageProperty(msg, "uplink");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceLossAndLatencyHistory_nodeParamType === 'str') {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is "str"');
                    getDeviceLossAndLatencyHistory_parameters.uplink = getDeviceLossAndLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is not "str"')
                    getDeviceLossAndLatencyHistory_parameters.uplink = RED.util.getMessageProperty(msg, "uplink");
                }
                                
                getDeviceLossAndLatencyHistory_nodeParam = storedParamValsMap['ip'] ||
                    RED.util.getMessageProperty(msg, "ip");

                getDeviceLossAndLatencyHistory_nodeParamType = storedParamTypeMap['ip'] ||
                    RED.util.getMessageProperty(msg, "ip");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceLossAndLatencyHistory_nodeParamType === 'str') {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is "str"');
                    getDeviceLossAndLatencyHistory_parameters.ip = getDeviceLossAndLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getDeviceLossAndLatencyHistory_nodeParamType is not "str"')
                    getDeviceLossAndLatencyHistory_parameters.ip = RED.util.getMessageProperty(msg, "ip");
                }
                                result = client.getDeviceLossAndLatencyHistory(getDeviceLossAndLatencyHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceManagementInterface') {
                var getDeviceManagementInterface_parameters = [];
                var getDeviceManagementInterface_nodeParam;
                var getDeviceManagementInterface_nodeParamType;
                
                
                getDeviceManagementInterface_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceManagementInterface_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceManagementInterface_nodeParamType === 'str') {
                    //console.log('getDeviceManagementInterface_nodeParamType is "str"');
                    getDeviceManagementInterface_parameters.serial = getDeviceManagementInterface_nodeParam || undefined;
                } else {
                    //console.log('getDeviceManagementInterface_nodeParamType is not "str"')
                    getDeviceManagementInterface_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceManagementInterface(getDeviceManagementInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceManagementInterface') {
                var updateDeviceManagementInterface_parameters = [];
                var updateDeviceManagementInterface_nodeParam;
                var updateDeviceManagementInterface_nodeParamType;
                
                
                updateDeviceManagementInterface_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceManagementInterface_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceManagementInterface_nodeParamType === 'str') {
                    //console.log('updateDeviceManagementInterface_nodeParamType is "str"');
                    updateDeviceManagementInterface_parameters.serial = updateDeviceManagementInterface_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceManagementInterface_nodeParamType is not "str"')
                    updateDeviceManagementInterface_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceManagementInterface_nodeParam = storedParamValsMap['updateDeviceManagementInterface'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceManagementInterface");

                updateDeviceManagementInterface_nodeParamType = storedParamTypeMap['updateDeviceManagementInterface'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceManagementInterface");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceManagementInterface_parameters.updateDeviceManagementInterface = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceManagementInterface_nodeParam === 'object'){
                        updateDeviceManagementInterface_parameters.updateDeviceManagementInterface = updateDeviceManagementInterface_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceManagementInterface_nodeParam || '{}'
                        updateDeviceManagementInterface_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceManagementInterface_parameters.updateDeviceManagementInterface = updateDeviceManagementInterface_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceManagementInterface_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceManagementInterface(updateDeviceManagementInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'rebootDevice') {
                var rebootDevice_parameters = [];
                var rebootDevice_nodeParam;
                var rebootDevice_nodeParamType;
                
                
                rebootDevice_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                rebootDevice_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (rebootDevice_nodeParamType === 'str') {
                    //console.log('rebootDevice_nodeParamType is "str"');
                    rebootDevice_parameters.serial = rebootDevice_nodeParam || undefined;
                } else {
                    //console.log('rebootDevice_nodeParamType is not "str"')
                    rebootDevice_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.rebootDevice(rebootDevice_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchPorts') {
                var getDeviceSwitchPorts_parameters = [];
                var getDeviceSwitchPorts_nodeParam;
                var getDeviceSwitchPorts_nodeParamType;
                
                
                getDeviceSwitchPorts_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchPorts_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPorts_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPorts_nodeParamType is "str"');
                    getDeviceSwitchPorts_parameters.serial = getDeviceSwitchPorts_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPorts_nodeParamType is not "str"')
                    getDeviceSwitchPorts_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceSwitchPorts(getDeviceSwitchPorts_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'cycleDeviceSwitchPorts') {
                var cycleDeviceSwitchPorts_parameters = [];
                var cycleDeviceSwitchPorts_nodeParam;
                var cycleDeviceSwitchPorts_nodeParamType;
                
                
                cycleDeviceSwitchPorts_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                cycleDeviceSwitchPorts_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (cycleDeviceSwitchPorts_nodeParamType === 'str') {
                    //console.log('cycleDeviceSwitchPorts_nodeParamType is "str"');
                    cycleDeviceSwitchPorts_parameters.serial = cycleDeviceSwitchPorts_nodeParam || undefined;
                } else {
                    //console.log('cycleDeviceSwitchPorts_nodeParamType is not "str"')
                    cycleDeviceSwitchPorts_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                cycleDeviceSwitchPorts_nodeParam = storedParamValsMap['cycleDeviceSwitchPorts'] ||
                    RED.util.getMessageProperty(msg, "cycleDeviceSwitchPorts");

                cycleDeviceSwitchPorts_nodeParamType = storedParamTypeMap['cycleDeviceSwitchPorts'] ||
                    RED.util.getMessageProperty(msg, "cycleDeviceSwitchPorts");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        cycleDeviceSwitchPorts_parameters.cycleDeviceSwitchPorts = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof cycleDeviceSwitchPorts_nodeParam === 'object'){
                        cycleDeviceSwitchPorts_parameters.cycleDeviceSwitchPorts = cycleDeviceSwitchPorts_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = cycleDeviceSwitchPorts_nodeParam || '{}'
                        cycleDeviceSwitchPorts_nodeParam = JSON.parse(nodeParam) ; 
                        cycleDeviceSwitchPorts_parameters.cycleDeviceSwitchPorts = cycleDeviceSwitchPorts_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof cycleDeviceSwitchPorts_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.cycleDeviceSwitchPorts(cycleDeviceSwitchPorts_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchPortsStatuses') {
                var getDeviceSwitchPortsStatuses_parameters = [];
                var getDeviceSwitchPortsStatuses_nodeParam;
                var getDeviceSwitchPortsStatuses_nodeParamType;
                
                
                getDeviceSwitchPortsStatuses_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchPortsStatuses_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPortsStatuses_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPortsStatuses_nodeParamType is "str"');
                    getDeviceSwitchPortsStatuses_parameters.serial = getDeviceSwitchPortsStatuses_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPortsStatuses_nodeParamType is not "str"')
                    getDeviceSwitchPortsStatuses_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceSwitchPortsStatuses_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getDeviceSwitchPortsStatuses_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPortsStatuses_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPortsStatuses_nodeParamType is "str"');
                    getDeviceSwitchPortsStatuses_parameters.t0 = getDeviceSwitchPortsStatuses_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPortsStatuses_nodeParamType is not "str"')
                    getDeviceSwitchPortsStatuses_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getDeviceSwitchPortsStatuses_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getDeviceSwitchPortsStatuses_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPortsStatuses_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPortsStatuses_nodeParamType is "str"');
                    getDeviceSwitchPortsStatuses_parameters.timespan = getDeviceSwitchPortsStatuses_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPortsStatuses_nodeParamType is not "str"')
                    getDeviceSwitchPortsStatuses_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getDeviceSwitchPortsStatuses(getDeviceSwitchPortsStatuses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchPortsStatusesPackets') {
                var getDeviceSwitchPortsStatusesPackets_parameters = [];
                var getDeviceSwitchPortsStatusesPackets_nodeParam;
                var getDeviceSwitchPortsStatusesPackets_nodeParamType;
                
                
                getDeviceSwitchPortsStatusesPackets_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchPortsStatusesPackets_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPortsStatusesPackets_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPortsStatusesPackets_nodeParamType is "str"');
                    getDeviceSwitchPortsStatusesPackets_parameters.serial = getDeviceSwitchPortsStatusesPackets_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPortsStatusesPackets_nodeParamType is not "str"')
                    getDeviceSwitchPortsStatusesPackets_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceSwitchPortsStatusesPackets_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getDeviceSwitchPortsStatusesPackets_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPortsStatusesPackets_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPortsStatusesPackets_nodeParamType is "str"');
                    getDeviceSwitchPortsStatusesPackets_parameters.t0 = getDeviceSwitchPortsStatusesPackets_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPortsStatusesPackets_nodeParamType is not "str"')
                    getDeviceSwitchPortsStatusesPackets_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getDeviceSwitchPortsStatusesPackets_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getDeviceSwitchPortsStatusesPackets_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPortsStatusesPackets_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPortsStatusesPackets_nodeParamType is "str"');
                    getDeviceSwitchPortsStatusesPackets_parameters.timespan = getDeviceSwitchPortsStatusesPackets_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPortsStatusesPackets_nodeParamType is not "str"')
                    getDeviceSwitchPortsStatusesPackets_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getDeviceSwitchPortsStatusesPackets(getDeviceSwitchPortsStatusesPackets_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchPort') {
                var getDeviceSwitchPort_parameters = [];
                var getDeviceSwitchPort_nodeParam;
                var getDeviceSwitchPort_nodeParamType;
                
                
                getDeviceSwitchPort_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchPort_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPort_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPort_nodeParamType is "str"');
                    getDeviceSwitchPort_parameters.serial = getDeviceSwitchPort_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPort_nodeParamType is not "str"')
                    getDeviceSwitchPort_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceSwitchPort_nodeParam = storedParamValsMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                getDeviceSwitchPort_nodeParamType = storedParamTypeMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchPort_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchPort_nodeParamType is "str"');
                    getDeviceSwitchPort_parameters.portId = getDeviceSwitchPort_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchPort_nodeParamType is not "str"')
                    getDeviceSwitchPort_parameters.portId = RED.util.getMessageProperty(msg, "portId");
                }
                                result = client.getDeviceSwitchPort(getDeviceSwitchPort_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceSwitchPort') {
                var updateDeviceSwitchPort_parameters = [];
                var updateDeviceSwitchPort_nodeParam;
                var updateDeviceSwitchPort_nodeParamType;
                
                
                updateDeviceSwitchPort_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceSwitchPort_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchPort_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchPort_nodeParamType is "str"');
                    updateDeviceSwitchPort_parameters.serial = updateDeviceSwitchPort_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchPort_nodeParamType is not "str"')
                    updateDeviceSwitchPort_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceSwitchPort_nodeParam = storedParamValsMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                updateDeviceSwitchPort_nodeParamType = storedParamTypeMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchPort_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchPort_nodeParamType is "str"');
                    updateDeviceSwitchPort_parameters.portId = updateDeviceSwitchPort_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchPort_nodeParamType is not "str"')
                    updateDeviceSwitchPort_parameters.portId = RED.util.getMessageProperty(msg, "portId");
                }
                                
                updateDeviceSwitchPort_nodeParam = storedParamValsMap['updateDeviceSwitchPort'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchPort");

                updateDeviceSwitchPort_nodeParamType = storedParamTypeMap['updateDeviceSwitchPort'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchPort");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceSwitchPort_parameters.updateDeviceSwitchPort = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceSwitchPort_nodeParam === 'object'){
                        updateDeviceSwitchPort_parameters.updateDeviceSwitchPort = updateDeviceSwitchPort_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceSwitchPort_nodeParam || '{}'
                        updateDeviceSwitchPort_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceSwitchPort_parameters.updateDeviceSwitchPort = updateDeviceSwitchPort_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceSwitchPort_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceSwitchPort(updateDeviceSwitchPort_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchRoutingInterfaces') {
                var getDeviceSwitchRoutingInterfaces_parameters = [];
                var getDeviceSwitchRoutingInterfaces_nodeParam;
                var getDeviceSwitchRoutingInterfaces_nodeParamType;
                
                
                getDeviceSwitchRoutingInterfaces_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchRoutingInterfaces_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchRoutingInterfaces_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchRoutingInterfaces_nodeParamType is "str"');
                    getDeviceSwitchRoutingInterfaces_parameters.serial = getDeviceSwitchRoutingInterfaces_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchRoutingInterfaces_nodeParamType is not "str"')
                    getDeviceSwitchRoutingInterfaces_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceSwitchRoutingInterfaces(getDeviceSwitchRoutingInterfaces_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createDeviceSwitchRoutingInterface') {
                var createDeviceSwitchRoutingInterface_parameters = [];
                var createDeviceSwitchRoutingInterface_nodeParam;
                var createDeviceSwitchRoutingInterface_nodeParamType;
                
                
                createDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                createDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (createDeviceSwitchRoutingInterface_nodeParamType === 'str') {
                    //console.log('createDeviceSwitchRoutingInterface_nodeParamType is "str"');
                    createDeviceSwitchRoutingInterface_parameters.serial = createDeviceSwitchRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('createDeviceSwitchRoutingInterface_nodeParamType is not "str"')
                    createDeviceSwitchRoutingInterface_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                createDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['createDeviceSwitchRoutingInterface'] ||
                    RED.util.getMessageProperty(msg, "createDeviceSwitchRoutingInterface");

                createDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['createDeviceSwitchRoutingInterface'] ||
                    RED.util.getMessageProperty(msg, "createDeviceSwitchRoutingInterface");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createDeviceSwitchRoutingInterface_parameters.createDeviceSwitchRoutingInterface = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createDeviceSwitchRoutingInterface_nodeParam === 'object'){
                        createDeviceSwitchRoutingInterface_parameters.createDeviceSwitchRoutingInterface = createDeviceSwitchRoutingInterface_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createDeviceSwitchRoutingInterface_nodeParam || '{}'
                        createDeviceSwitchRoutingInterface_nodeParam = JSON.parse(nodeParam) ; 
                        createDeviceSwitchRoutingInterface_parameters.createDeviceSwitchRoutingInterface = createDeviceSwitchRoutingInterface_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createDeviceSwitchRoutingInterface_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createDeviceSwitchRoutingInterface(createDeviceSwitchRoutingInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchRoutingInterface') {
                var getDeviceSwitchRoutingInterface_parameters = [];
                var getDeviceSwitchRoutingInterface_nodeParam;
                var getDeviceSwitchRoutingInterface_nodeParamType;
                
                
                getDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchRoutingInterface_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchRoutingInterface_nodeParamType is "str"');
                    getDeviceSwitchRoutingInterface_parameters.serial = getDeviceSwitchRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchRoutingInterface_nodeParamType is not "str"')
                    getDeviceSwitchRoutingInterface_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                getDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchRoutingInterface_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchRoutingInterface_nodeParamType is "str"');
                    getDeviceSwitchRoutingInterface_parameters.interfaceId = getDeviceSwitchRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchRoutingInterface_nodeParamType is not "str"')
                    getDeviceSwitchRoutingInterface_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                result = client.getDeviceSwitchRoutingInterface(getDeviceSwitchRoutingInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceSwitchRoutingInterface') {
                var updateDeviceSwitchRoutingInterface_parameters = [];
                var updateDeviceSwitchRoutingInterface_nodeParam;
                var updateDeviceSwitchRoutingInterface_nodeParamType;
                
                
                updateDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchRoutingInterface_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchRoutingInterface_nodeParamType is "str"');
                    updateDeviceSwitchRoutingInterface_parameters.serial = updateDeviceSwitchRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchRoutingInterface_nodeParamType is not "str"')
                    updateDeviceSwitchRoutingInterface_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                updateDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchRoutingInterface_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchRoutingInterface_nodeParamType is "str"');
                    updateDeviceSwitchRoutingInterface_parameters.interfaceId = updateDeviceSwitchRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchRoutingInterface_nodeParamType is not "str"')
                    updateDeviceSwitchRoutingInterface_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                
                updateDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['updateDeviceSwitchRoutingInterface'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchRoutingInterface");

                updateDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['updateDeviceSwitchRoutingInterface'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchRoutingInterface");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceSwitchRoutingInterface_parameters.updateDeviceSwitchRoutingInterface = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceSwitchRoutingInterface_nodeParam === 'object'){
                        updateDeviceSwitchRoutingInterface_parameters.updateDeviceSwitchRoutingInterface = updateDeviceSwitchRoutingInterface_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceSwitchRoutingInterface_nodeParam || '{}'
                        updateDeviceSwitchRoutingInterface_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceSwitchRoutingInterface_parameters.updateDeviceSwitchRoutingInterface = updateDeviceSwitchRoutingInterface_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceSwitchRoutingInterface_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceSwitchRoutingInterface(updateDeviceSwitchRoutingInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteDeviceSwitchRoutingInterface') {
                var deleteDeviceSwitchRoutingInterface_parameters = [];
                var deleteDeviceSwitchRoutingInterface_nodeParam;
                var deleteDeviceSwitchRoutingInterface_nodeParamType;
                
                
                deleteDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                deleteDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteDeviceSwitchRoutingInterface_nodeParamType === 'str') {
                    //console.log('deleteDeviceSwitchRoutingInterface_nodeParamType is "str"');
                    deleteDeviceSwitchRoutingInterface_parameters.serial = deleteDeviceSwitchRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('deleteDeviceSwitchRoutingInterface_nodeParamType is not "str"')
                    deleteDeviceSwitchRoutingInterface_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                deleteDeviceSwitchRoutingInterface_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                deleteDeviceSwitchRoutingInterface_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteDeviceSwitchRoutingInterface_nodeParamType === 'str') {
                    //console.log('deleteDeviceSwitchRoutingInterface_nodeParamType is "str"');
                    deleteDeviceSwitchRoutingInterface_parameters.interfaceId = deleteDeviceSwitchRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('deleteDeviceSwitchRoutingInterface_nodeParamType is not "str"')
                    deleteDeviceSwitchRoutingInterface_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                result = client.deleteDeviceSwitchRoutingInterface(deleteDeviceSwitchRoutingInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchRoutingInterfaceDhcp') {
                var getDeviceSwitchRoutingInterfaceDhcp_parameters = [];
                var getDeviceSwitchRoutingInterfaceDhcp_nodeParam;
                var getDeviceSwitchRoutingInterfaceDhcp_nodeParamType;
                
                
                getDeviceSwitchRoutingInterfaceDhcp_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchRoutingInterfaceDhcp_nodeParamType is "str"');
                    getDeviceSwitchRoutingInterfaceDhcp_parameters.serial = getDeviceSwitchRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchRoutingInterfaceDhcp_nodeParamType is not "str"')
                    getDeviceSwitchRoutingInterfaceDhcp_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceSwitchRoutingInterfaceDhcp_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                getDeviceSwitchRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchRoutingInterfaceDhcp_nodeParamType is "str"');
                    getDeviceSwitchRoutingInterfaceDhcp_parameters.interfaceId = getDeviceSwitchRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchRoutingInterfaceDhcp_nodeParamType is not "str"')
                    getDeviceSwitchRoutingInterfaceDhcp_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                result = client.getDeviceSwitchRoutingInterfaceDhcp(getDeviceSwitchRoutingInterfaceDhcp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceSwitchRoutingInterfaceDhcp') {
                var updateDeviceSwitchRoutingInterfaceDhcp_parameters = [];
                var updateDeviceSwitchRoutingInterfaceDhcp_nodeParam;
                var updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType;
                
                
                updateDeviceSwitchRoutingInterfaceDhcp_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType is "str"');
                    updateDeviceSwitchRoutingInterfaceDhcp_parameters.serial = updateDeviceSwitchRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType is not "str"')
                    updateDeviceSwitchRoutingInterfaceDhcp_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceSwitchRoutingInterfaceDhcp_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType is "str"');
                    updateDeviceSwitchRoutingInterfaceDhcp_parameters.interfaceId = updateDeviceSwitchRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType is not "str"')
                    updateDeviceSwitchRoutingInterfaceDhcp_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                
                updateDeviceSwitchRoutingInterfaceDhcp_nodeParam = storedParamValsMap['updateDeviceSwitchRoutingInterfaceDhcp'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchRoutingInterfaceDhcp");

                updateDeviceSwitchRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['updateDeviceSwitchRoutingInterfaceDhcp'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchRoutingInterfaceDhcp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceSwitchRoutingInterfaceDhcp_parameters.updateDeviceSwitchRoutingInterfaceDhcp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceSwitchRoutingInterfaceDhcp_nodeParam === 'object'){
                        updateDeviceSwitchRoutingInterfaceDhcp_parameters.updateDeviceSwitchRoutingInterfaceDhcp = updateDeviceSwitchRoutingInterfaceDhcp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceSwitchRoutingInterfaceDhcp_nodeParam || '{}'
                        updateDeviceSwitchRoutingInterfaceDhcp_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceSwitchRoutingInterfaceDhcp_parameters.updateDeviceSwitchRoutingInterfaceDhcp = updateDeviceSwitchRoutingInterfaceDhcp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceSwitchRoutingInterfaceDhcp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceSwitchRoutingInterfaceDhcp(updateDeviceSwitchRoutingInterfaceDhcp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchRoutingStaticRoutes') {
                var getDeviceSwitchRoutingStaticRoutes_parameters = [];
                var getDeviceSwitchRoutingStaticRoutes_nodeParam;
                var getDeviceSwitchRoutingStaticRoutes_nodeParamType;
                
                
                getDeviceSwitchRoutingStaticRoutes_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchRoutingStaticRoutes_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchRoutingStaticRoutes_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchRoutingStaticRoutes_nodeParamType is "str"');
                    getDeviceSwitchRoutingStaticRoutes_parameters.serial = getDeviceSwitchRoutingStaticRoutes_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchRoutingStaticRoutes_nodeParamType is not "str"')
                    getDeviceSwitchRoutingStaticRoutes_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceSwitchRoutingStaticRoutes(getDeviceSwitchRoutingStaticRoutes_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createDeviceSwitchRoutingStaticRoute') {
                var createDeviceSwitchRoutingStaticRoute_parameters = [];
                var createDeviceSwitchRoutingStaticRoute_nodeParam;
                var createDeviceSwitchRoutingStaticRoute_nodeParamType;
                
                
                createDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                createDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (createDeviceSwitchRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('createDeviceSwitchRoutingStaticRoute_nodeParamType is "str"');
                    createDeviceSwitchRoutingStaticRoute_parameters.serial = createDeviceSwitchRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('createDeviceSwitchRoutingStaticRoute_nodeParamType is not "str"')
                    createDeviceSwitchRoutingStaticRoute_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                createDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['createDeviceSwitchRoutingStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "createDeviceSwitchRoutingStaticRoute");

                createDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['createDeviceSwitchRoutingStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "createDeviceSwitchRoutingStaticRoute");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createDeviceSwitchRoutingStaticRoute_parameters.createDeviceSwitchRoutingStaticRoute = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createDeviceSwitchRoutingStaticRoute_nodeParam === 'object'){
                        createDeviceSwitchRoutingStaticRoute_parameters.createDeviceSwitchRoutingStaticRoute = createDeviceSwitchRoutingStaticRoute_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createDeviceSwitchRoutingStaticRoute_nodeParam || '{}'
                        createDeviceSwitchRoutingStaticRoute_nodeParam = JSON.parse(nodeParam) ; 
                        createDeviceSwitchRoutingStaticRoute_parameters.createDeviceSwitchRoutingStaticRoute = createDeviceSwitchRoutingStaticRoute_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createDeviceSwitchRoutingStaticRoute_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createDeviceSwitchRoutingStaticRoute(createDeviceSwitchRoutingStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchRoutingStaticRoute') {
                var getDeviceSwitchRoutingStaticRoute_parameters = [];
                var getDeviceSwitchRoutingStaticRoute_nodeParam;
                var getDeviceSwitchRoutingStaticRoute_nodeParamType;
                
                
                getDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchRoutingStaticRoute_nodeParamType is "str"');
                    getDeviceSwitchRoutingStaticRoute_parameters.serial = getDeviceSwitchRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchRoutingStaticRoute_nodeParamType is not "str"')
                    getDeviceSwitchRoutingStaticRoute_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                getDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchRoutingStaticRoute_nodeParamType is "str"');
                    getDeviceSwitchRoutingStaticRoute_parameters.staticRouteId = getDeviceSwitchRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchRoutingStaticRoute_nodeParamType is not "str"')
                    getDeviceSwitchRoutingStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                result = client.getDeviceSwitchRoutingStaticRoute(getDeviceSwitchRoutingStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceSwitchRoutingStaticRoute') {
                var updateDeviceSwitchRoutingStaticRoute_parameters = [];
                var updateDeviceSwitchRoutingStaticRoute_nodeParam;
                var updateDeviceSwitchRoutingStaticRoute_nodeParamType;
                
                
                updateDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchRoutingStaticRoute_nodeParamType is "str"');
                    updateDeviceSwitchRoutingStaticRoute_parameters.serial = updateDeviceSwitchRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchRoutingStaticRoute_nodeParamType is not "str"')
                    updateDeviceSwitchRoutingStaticRoute_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                updateDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchRoutingStaticRoute_nodeParamType is "str"');
                    updateDeviceSwitchRoutingStaticRoute_parameters.staticRouteId = updateDeviceSwitchRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchRoutingStaticRoute_nodeParamType is not "str"')
                    updateDeviceSwitchRoutingStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                
                updateDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['updateDeviceSwitchRoutingStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchRoutingStaticRoute");

                updateDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['updateDeviceSwitchRoutingStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchRoutingStaticRoute");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceSwitchRoutingStaticRoute_parameters.updateDeviceSwitchRoutingStaticRoute = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceSwitchRoutingStaticRoute_nodeParam === 'object'){
                        updateDeviceSwitchRoutingStaticRoute_parameters.updateDeviceSwitchRoutingStaticRoute = updateDeviceSwitchRoutingStaticRoute_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceSwitchRoutingStaticRoute_nodeParam || '{}'
                        updateDeviceSwitchRoutingStaticRoute_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceSwitchRoutingStaticRoute_parameters.updateDeviceSwitchRoutingStaticRoute = updateDeviceSwitchRoutingStaticRoute_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceSwitchRoutingStaticRoute_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceSwitchRoutingStaticRoute(updateDeviceSwitchRoutingStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteDeviceSwitchRoutingStaticRoute') {
                var deleteDeviceSwitchRoutingStaticRoute_parameters = [];
                var deleteDeviceSwitchRoutingStaticRoute_nodeParam;
                var deleteDeviceSwitchRoutingStaticRoute_nodeParamType;
                
                
                deleteDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                deleteDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteDeviceSwitchRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('deleteDeviceSwitchRoutingStaticRoute_nodeParamType is "str"');
                    deleteDeviceSwitchRoutingStaticRoute_parameters.serial = deleteDeviceSwitchRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('deleteDeviceSwitchRoutingStaticRoute_nodeParamType is not "str"')
                    deleteDeviceSwitchRoutingStaticRoute_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                deleteDeviceSwitchRoutingStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                deleteDeviceSwitchRoutingStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteDeviceSwitchRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('deleteDeviceSwitchRoutingStaticRoute_nodeParamType is "str"');
                    deleteDeviceSwitchRoutingStaticRoute_parameters.staticRouteId = deleteDeviceSwitchRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('deleteDeviceSwitchRoutingStaticRoute_nodeParamType is not "str"')
                    deleteDeviceSwitchRoutingStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                result = client.deleteDeviceSwitchRoutingStaticRoute(deleteDeviceSwitchRoutingStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceSwitchWarmSpare') {
                var getDeviceSwitchWarmSpare_parameters = [];
                var getDeviceSwitchWarmSpare_nodeParam;
                var getDeviceSwitchWarmSpare_nodeParamType;
                
                
                getDeviceSwitchWarmSpare_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceSwitchWarmSpare_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceSwitchWarmSpare_nodeParamType === 'str') {
                    //console.log('getDeviceSwitchWarmSpare_nodeParamType is "str"');
                    getDeviceSwitchWarmSpare_parameters.serial = getDeviceSwitchWarmSpare_nodeParam || undefined;
                } else {
                    //console.log('getDeviceSwitchWarmSpare_nodeParamType is not "str"')
                    getDeviceSwitchWarmSpare_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceSwitchWarmSpare(getDeviceSwitchWarmSpare_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceSwitchWarmSpare') {
                var updateDeviceSwitchWarmSpare_parameters = [];
                var updateDeviceSwitchWarmSpare_nodeParam;
                var updateDeviceSwitchWarmSpare_nodeParamType;
                
                
                updateDeviceSwitchWarmSpare_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceSwitchWarmSpare_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceSwitchWarmSpare_nodeParamType === 'str') {
                    //console.log('updateDeviceSwitchWarmSpare_nodeParamType is "str"');
                    updateDeviceSwitchWarmSpare_parameters.serial = updateDeviceSwitchWarmSpare_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceSwitchWarmSpare_nodeParamType is not "str"')
                    updateDeviceSwitchWarmSpare_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceSwitchWarmSpare_nodeParam = storedParamValsMap['updateDeviceSwitchWarmSpare'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchWarmSpare");

                updateDeviceSwitchWarmSpare_nodeParamType = storedParamTypeMap['updateDeviceSwitchWarmSpare'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceSwitchWarmSpare");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceSwitchWarmSpare_parameters.updateDeviceSwitchWarmSpare = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceSwitchWarmSpare_nodeParam === 'object'){
                        updateDeviceSwitchWarmSpare_parameters.updateDeviceSwitchWarmSpare = updateDeviceSwitchWarmSpare_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceSwitchWarmSpare_nodeParam || '{}'
                        updateDeviceSwitchWarmSpare_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceSwitchWarmSpare_parameters.updateDeviceSwitchWarmSpare = updateDeviceSwitchWarmSpare_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceSwitchWarmSpare_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceSwitchWarmSpare(updateDeviceSwitchWarmSpare_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceWirelessBluetoothSettings') {
                var getDeviceWirelessBluetoothSettings_parameters = [];
                var getDeviceWirelessBluetoothSettings_nodeParam;
                var getDeviceWirelessBluetoothSettings_nodeParamType;
                
                
                getDeviceWirelessBluetoothSettings_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceWirelessBluetoothSettings_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessBluetoothSettings_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessBluetoothSettings_nodeParamType is "str"');
                    getDeviceWirelessBluetoothSettings_parameters.serial = getDeviceWirelessBluetoothSettings_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessBluetoothSettings_nodeParamType is not "str"')
                    getDeviceWirelessBluetoothSettings_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceWirelessBluetoothSettings(getDeviceWirelessBluetoothSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceWirelessBluetoothSettings') {
                var updateDeviceWirelessBluetoothSettings_parameters = [];
                var updateDeviceWirelessBluetoothSettings_nodeParam;
                var updateDeviceWirelessBluetoothSettings_nodeParamType;
                
                
                updateDeviceWirelessBluetoothSettings_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceWirelessBluetoothSettings_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceWirelessBluetoothSettings_nodeParamType === 'str') {
                    //console.log('updateDeviceWirelessBluetoothSettings_nodeParamType is "str"');
                    updateDeviceWirelessBluetoothSettings_parameters.serial = updateDeviceWirelessBluetoothSettings_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceWirelessBluetoothSettings_nodeParamType is not "str"')
                    updateDeviceWirelessBluetoothSettings_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceWirelessBluetoothSettings_nodeParam = storedParamValsMap['updateDeviceWirelessBluetoothSettings'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceWirelessBluetoothSettings");

                updateDeviceWirelessBluetoothSettings_nodeParamType = storedParamTypeMap['updateDeviceWirelessBluetoothSettings'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceWirelessBluetoothSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceWirelessBluetoothSettings_parameters.updateDeviceWirelessBluetoothSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceWirelessBluetoothSettings_nodeParam === 'object'){
                        updateDeviceWirelessBluetoothSettings_parameters.updateDeviceWirelessBluetoothSettings = updateDeviceWirelessBluetoothSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceWirelessBluetoothSettings_nodeParam || '{}'
                        updateDeviceWirelessBluetoothSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceWirelessBluetoothSettings_parameters.updateDeviceWirelessBluetoothSettings = updateDeviceWirelessBluetoothSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceWirelessBluetoothSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceWirelessBluetoothSettings(updateDeviceWirelessBluetoothSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceWirelessConnectionStats') {
                var getDeviceWirelessConnectionStats_parameters = [];
                var getDeviceWirelessConnectionStats_nodeParam;
                var getDeviceWirelessConnectionStats_nodeParamType;
                
                
                getDeviceWirelessConnectionStats_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceWirelessConnectionStats_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is "str"');
                    getDeviceWirelessConnectionStats_parameters.serial = getDeviceWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is not "str"')
                    getDeviceWirelessConnectionStats_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceWirelessConnectionStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getDeviceWirelessConnectionStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is "str"');
                    getDeviceWirelessConnectionStats_parameters.t0 = getDeviceWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is not "str"')
                    getDeviceWirelessConnectionStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getDeviceWirelessConnectionStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getDeviceWirelessConnectionStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is "str"');
                    getDeviceWirelessConnectionStats_parameters.t1 = getDeviceWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is not "str"')
                    getDeviceWirelessConnectionStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getDeviceWirelessConnectionStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getDeviceWirelessConnectionStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is "str"');
                    getDeviceWirelessConnectionStats_parameters.timespan = getDeviceWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is not "str"')
                    getDeviceWirelessConnectionStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getDeviceWirelessConnectionStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getDeviceWirelessConnectionStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is "str"');
                    getDeviceWirelessConnectionStats_parameters.band = getDeviceWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is not "str"')
                    getDeviceWirelessConnectionStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getDeviceWirelessConnectionStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getDeviceWirelessConnectionStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is "str"');
                    getDeviceWirelessConnectionStats_parameters.ssid = getDeviceWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is not "str"')
                    getDeviceWirelessConnectionStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getDeviceWirelessConnectionStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getDeviceWirelessConnectionStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is "str"');
                    getDeviceWirelessConnectionStats_parameters.vlan = getDeviceWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is not "str"')
                    getDeviceWirelessConnectionStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getDeviceWirelessConnectionStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getDeviceWirelessConnectionStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is "str"');
                    getDeviceWirelessConnectionStats_parameters.apTag = getDeviceWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessConnectionStats_nodeParamType is not "str"')
                    getDeviceWirelessConnectionStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                result = client.getDeviceWirelessConnectionStats(getDeviceWirelessConnectionStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceWirelessLatencyStats') {
                var getDeviceWirelessLatencyStats_parameters = [];
                var getDeviceWirelessLatencyStats_nodeParam;
                var getDeviceWirelessLatencyStats_nodeParamType;
                
                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.serial = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.t0 = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.t1 = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.timespan = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.band = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.ssid = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.vlan = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.apTag = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getDeviceWirelessLatencyStats_nodeParam = storedParamValsMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                getDeviceWirelessLatencyStats_nodeParamType = storedParamTypeMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is "str"');
                    getDeviceWirelessLatencyStats_parameters.fields = getDeviceWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessLatencyStats_nodeParamType is not "str"')
                    getDeviceWirelessLatencyStats_parameters.fields = RED.util.getMessageProperty(msg, "fields");
                }
                                result = client.getDeviceWirelessLatencyStats(getDeviceWirelessLatencyStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceWirelessRadioSettings') {
                var getDeviceWirelessRadioSettings_parameters = [];
                var getDeviceWirelessRadioSettings_nodeParam;
                var getDeviceWirelessRadioSettings_nodeParamType;
                
                
                getDeviceWirelessRadioSettings_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceWirelessRadioSettings_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessRadioSettings_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessRadioSettings_nodeParamType is "str"');
                    getDeviceWirelessRadioSettings_parameters.serial = getDeviceWirelessRadioSettings_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessRadioSettings_nodeParamType is not "str"')
                    getDeviceWirelessRadioSettings_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceWirelessRadioSettings(getDeviceWirelessRadioSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateDeviceWirelessRadioSettings') {
                var updateDeviceWirelessRadioSettings_parameters = [];
                var updateDeviceWirelessRadioSettings_nodeParam;
                var updateDeviceWirelessRadioSettings_nodeParamType;
                
                
                updateDeviceWirelessRadioSettings_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                updateDeviceWirelessRadioSettings_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (updateDeviceWirelessRadioSettings_nodeParamType === 'str') {
                    //console.log('updateDeviceWirelessRadioSettings_nodeParamType is "str"');
                    updateDeviceWirelessRadioSettings_parameters.serial = updateDeviceWirelessRadioSettings_nodeParam || undefined;
                } else {
                    //console.log('updateDeviceWirelessRadioSettings_nodeParamType is not "str"')
                    updateDeviceWirelessRadioSettings_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                updateDeviceWirelessRadioSettings_nodeParam = storedParamValsMap['updateDeviceWirelessRadioSettings'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceWirelessRadioSettings");

                updateDeviceWirelessRadioSettings_nodeParamType = storedParamTypeMap['updateDeviceWirelessRadioSettings'] ||
                    RED.util.getMessageProperty(msg, "updateDeviceWirelessRadioSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateDeviceWirelessRadioSettings_parameters.updateDeviceWirelessRadioSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateDeviceWirelessRadioSettings_nodeParam === 'object'){
                        updateDeviceWirelessRadioSettings_parameters.updateDeviceWirelessRadioSettings = updateDeviceWirelessRadioSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateDeviceWirelessRadioSettings_nodeParam || '{}'
                        updateDeviceWirelessRadioSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateDeviceWirelessRadioSettings_parameters.updateDeviceWirelessRadioSettings = updateDeviceWirelessRadioSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateDeviceWirelessRadioSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateDeviceWirelessRadioSettings(updateDeviceWirelessRadioSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getDeviceWirelessStatus') {
                var getDeviceWirelessStatus_parameters = [];
                var getDeviceWirelessStatus_nodeParam;
                var getDeviceWirelessStatus_nodeParamType;
                
                
                getDeviceWirelessStatus_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getDeviceWirelessStatus_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getDeviceWirelessStatus_nodeParamType === 'str') {
                    //console.log('getDeviceWirelessStatus_nodeParamType is "str"');
                    getDeviceWirelessStatus_parameters.serial = getDeviceWirelessStatus_nodeParam || undefined;
                } else {
                    //console.log('getDeviceWirelessStatus_nodeParamType is not "str"')
                    getDeviceWirelessStatus_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getDeviceWirelessStatus(getDeviceWirelessStatus_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetwork') {
                var getNetwork_parameters = [];
                var getNetwork_nodeParam;
                var getNetwork_nodeParamType;
                
                
                getNetwork_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetwork_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetwork_nodeParamType === 'str') {
                    //console.log('getNetwork_nodeParamType is "str"');
                    getNetwork_parameters.networkId = getNetwork_nodeParam || undefined;
                } else {
                    //console.log('getNetwork_nodeParamType is not "str"')
                    getNetwork_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetwork(getNetwork_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetwork') {
                var updateNetwork_parameters = [];
                var updateNetwork_nodeParam;
                var updateNetwork_nodeParamType;
                
                
                updateNetwork_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetwork_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetwork_nodeParamType === 'str') {
                    //console.log('updateNetwork_nodeParamType is "str"');
                    updateNetwork_parameters.networkId = updateNetwork_nodeParam || undefined;
                } else {
                    //console.log('updateNetwork_nodeParamType is not "str"')
                    updateNetwork_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetwork_nodeParam = storedParamValsMap['updateNetwork'] ||
                    RED.util.getMessageProperty(msg, "updateNetwork");

                updateNetwork_nodeParamType = storedParamTypeMap['updateNetwork'] ||
                    RED.util.getMessageProperty(msg, "updateNetwork");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetwork_parameters.updateNetwork = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetwork_nodeParam === 'object'){
                        updateNetwork_parameters.updateNetwork = updateNetwork_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetwork_nodeParam || '{}'
                        updateNetwork_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetwork_parameters.updateNetwork = updateNetwork_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetwork_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetwork(updateNetwork_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetwork') {
                var deleteNetwork_parameters = [];
                var deleteNetwork_nodeParam;
                var deleteNetwork_nodeParamType;
                
                
                deleteNetwork_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetwork_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetwork_nodeParamType === 'str') {
                    //console.log('deleteNetwork_nodeParamType is "str"');
                    deleteNetwork_parameters.networkId = deleteNetwork_nodeParam || undefined;
                } else {
                    //console.log('deleteNetwork_nodeParamType is not "str"')
                    deleteNetwork_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.deleteNetwork(deleteNetwork_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkAlertsSettings') {
                var getNetworkAlertsSettings_parameters = [];
                var getNetworkAlertsSettings_nodeParam;
                var getNetworkAlertsSettings_nodeParamType;
                
                
                getNetworkAlertsSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkAlertsSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkAlertsSettings_nodeParamType === 'str') {
                    //console.log('getNetworkAlertsSettings_nodeParamType is "str"');
                    getNetworkAlertsSettings_parameters.networkId = getNetworkAlertsSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkAlertsSettings_nodeParamType is not "str"')
                    getNetworkAlertsSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkAlertsSettings(getNetworkAlertsSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkAlertsSettings') {
                var updateNetworkAlertsSettings_parameters = [];
                var updateNetworkAlertsSettings_nodeParam;
                var updateNetworkAlertsSettings_nodeParamType;
                
                
                updateNetworkAlertsSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkAlertsSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkAlertsSettings_nodeParamType === 'str') {
                    //console.log('updateNetworkAlertsSettings_nodeParamType is "str"');
                    updateNetworkAlertsSettings_parameters.networkId = updateNetworkAlertsSettings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkAlertsSettings_nodeParamType is not "str"')
                    updateNetworkAlertsSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkAlertsSettings_nodeParam = storedParamValsMap['updateNetworkAlertsSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkAlertsSettings");

                updateNetworkAlertsSettings_nodeParamType = storedParamTypeMap['updateNetworkAlertsSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkAlertsSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkAlertsSettings_parameters.updateNetworkAlertsSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkAlertsSettings_nodeParam === 'object'){
                        updateNetworkAlertsSettings_parameters.updateNetworkAlertsSettings = updateNetworkAlertsSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkAlertsSettings_nodeParam || '{}'
                        updateNetworkAlertsSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkAlertsSettings_parameters.updateNetworkAlertsSettings = updateNetworkAlertsSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkAlertsSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkAlertsSettings(updateNetworkAlertsSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceClientSecurityEvents') {
                var getNetworkApplianceClientSecurityEvents_parameters = [];
                var getNetworkApplianceClientSecurityEvents_nodeParam;
                var getNetworkApplianceClientSecurityEvents_nodeParamType;
                
                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.networkId = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.clientId = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.t0 = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.t1 = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.timespan = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.perPage = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.startingAfter = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.endingBefore = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getNetworkApplianceClientSecurityEvents_nodeParam = storedParamValsMap['sortOrder'] ||
                    RED.util.getMessageProperty(msg, "sortOrder");

                getNetworkApplianceClientSecurityEvents_nodeParamType = storedParamTypeMap['sortOrder'] ||
                    RED.util.getMessageProperty(msg, "sortOrder");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceClientSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceClientSecurityEvents_parameters.sortOrder = getNetworkApplianceClientSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceClientSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceClientSecurityEvents_parameters.sortOrder = RED.util.getMessageProperty(msg, "sortOrder");
                }
                                result = client.getNetworkApplianceClientSecurityEvents(getNetworkApplianceClientSecurityEvents_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceConnectivityMonitoringDestinations') {
                var getNetworkApplianceConnectivityMonitoringDestinations_parameters = [];
                var getNetworkApplianceConnectivityMonitoringDestinations_nodeParam;
                var getNetworkApplianceConnectivityMonitoringDestinations_nodeParamType;
                
                
                getNetworkApplianceConnectivityMonitoringDestinations_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceConnectivityMonitoringDestinations_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceConnectivityMonitoringDestinations_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceConnectivityMonitoringDestinations_nodeParamType is "str"');
                    getNetworkApplianceConnectivityMonitoringDestinations_parameters.networkId = getNetworkApplianceConnectivityMonitoringDestinations_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceConnectivityMonitoringDestinations_nodeParamType is not "str"')
                    getNetworkApplianceConnectivityMonitoringDestinations_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceConnectivityMonitoringDestinations(getNetworkApplianceConnectivityMonitoringDestinations_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceConnectivityMonitoringDestinations') {
                var updateNetworkApplianceConnectivityMonitoringDestinations_parameters = [];
                var updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam;
                var updateNetworkApplianceConnectivityMonitoringDestinations_nodeParamType;
                
                
                updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceConnectivityMonitoringDestinations_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceConnectivityMonitoringDestinations_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceConnectivityMonitoringDestinations_nodeParamType is "str"');
                    updateNetworkApplianceConnectivityMonitoringDestinations_parameters.networkId = updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceConnectivityMonitoringDestinations_nodeParamType is not "str"')
                    updateNetworkApplianceConnectivityMonitoringDestinations_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam = storedParamValsMap['updateNetworkApplianceConnectivityMonitoringDestinations'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceConnectivityMonitoringDestinations");

                updateNetworkApplianceConnectivityMonitoringDestinations_nodeParamType = storedParamTypeMap['updateNetworkApplianceConnectivityMonitoringDestinations'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceConnectivityMonitoringDestinations");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceConnectivityMonitoringDestinations_parameters.updateNetworkApplianceConnectivityMonitoringDestinations = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam === 'object'){
                        updateNetworkApplianceConnectivityMonitoringDestinations_parameters.updateNetworkApplianceConnectivityMonitoringDestinations = updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam || '{}'
                        updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceConnectivityMonitoringDestinations_parameters.updateNetworkApplianceConnectivityMonitoringDestinations = updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceConnectivityMonitoringDestinations_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceConnectivityMonitoringDestinations(updateNetworkApplianceConnectivityMonitoringDestinations_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceContentFiltering') {
                var getNetworkApplianceContentFiltering_parameters = [];
                var getNetworkApplianceContentFiltering_nodeParam;
                var getNetworkApplianceContentFiltering_nodeParamType;
                
                
                getNetworkApplianceContentFiltering_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceContentFiltering_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceContentFiltering_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceContentFiltering_nodeParamType is "str"');
                    getNetworkApplianceContentFiltering_parameters.networkId = getNetworkApplianceContentFiltering_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceContentFiltering_nodeParamType is not "str"')
                    getNetworkApplianceContentFiltering_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceContentFiltering(getNetworkApplianceContentFiltering_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceContentFiltering') {
                var updateNetworkApplianceContentFiltering_parameters = [];
                var updateNetworkApplianceContentFiltering_nodeParam;
                var updateNetworkApplianceContentFiltering_nodeParamType;
                
                
                updateNetworkApplianceContentFiltering_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceContentFiltering_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceContentFiltering_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceContentFiltering_nodeParamType is "str"');
                    updateNetworkApplianceContentFiltering_parameters.networkId = updateNetworkApplianceContentFiltering_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceContentFiltering_nodeParamType is not "str"')
                    updateNetworkApplianceContentFiltering_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceContentFiltering_nodeParam = storedParamValsMap['updateNetworkApplianceContentFiltering'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceContentFiltering");

                updateNetworkApplianceContentFiltering_nodeParamType = storedParamTypeMap['updateNetworkApplianceContentFiltering'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceContentFiltering");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceContentFiltering_parameters.updateNetworkApplianceContentFiltering = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceContentFiltering_nodeParam === 'object'){
                        updateNetworkApplianceContentFiltering_parameters.updateNetworkApplianceContentFiltering = updateNetworkApplianceContentFiltering_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceContentFiltering_nodeParam || '{}'
                        updateNetworkApplianceContentFiltering_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceContentFiltering_parameters.updateNetworkApplianceContentFiltering = updateNetworkApplianceContentFiltering_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceContentFiltering_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceContentFiltering(updateNetworkApplianceContentFiltering_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceContentFilteringCategories') {
                var getNetworkApplianceContentFilteringCategories_parameters = [];
                var getNetworkApplianceContentFilteringCategories_nodeParam;
                var getNetworkApplianceContentFilteringCategories_nodeParamType;
                
                
                getNetworkApplianceContentFilteringCategories_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceContentFilteringCategories_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceContentFilteringCategories_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceContentFilteringCategories_nodeParamType is "str"');
                    getNetworkApplianceContentFilteringCategories_parameters.networkId = getNetworkApplianceContentFilteringCategories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceContentFilteringCategories_nodeParamType is not "str"')
                    getNetworkApplianceContentFilteringCategories_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceContentFilteringCategories(getNetworkApplianceContentFilteringCategories_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallCellularFirewallRules') {
                var getNetworkApplianceFirewallCellularFirewallRules_parameters = [];
                var getNetworkApplianceFirewallCellularFirewallRules_nodeParam;
                var getNetworkApplianceFirewallCellularFirewallRules_nodeParamType;
                
                
                getNetworkApplianceFirewallCellularFirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallCellularFirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallCellularFirewallRules_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallCellularFirewallRules_nodeParamType is "str"');
                    getNetworkApplianceFirewallCellularFirewallRules_parameters.networkId = getNetworkApplianceFirewallCellularFirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallCellularFirewallRules_nodeParamType is not "str"')
                    getNetworkApplianceFirewallCellularFirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallCellularFirewallRules(getNetworkApplianceFirewallCellularFirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceFirewallCellularFirewallRules') {
                var updateNetworkApplianceFirewallCellularFirewallRules_parameters = [];
                var updateNetworkApplianceFirewallCellularFirewallRules_nodeParam;
                var updateNetworkApplianceFirewallCellularFirewallRules_nodeParamType;
                
                
                updateNetworkApplianceFirewallCellularFirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceFirewallCellularFirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallCellularFirewallRules_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallCellularFirewallRules_nodeParamType is "str"');
                    updateNetworkApplianceFirewallCellularFirewallRules_parameters.networkId = updateNetworkApplianceFirewallCellularFirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallCellularFirewallRules_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallCellularFirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceFirewallCellularFirewallRules_nodeParam = storedParamValsMap['updateNetworkApplianceFirewallCellularFirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallCellularFirewallRules");

                updateNetworkApplianceFirewallCellularFirewallRules_nodeParamType = storedParamTypeMap['updateNetworkApplianceFirewallCellularFirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallCellularFirewallRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceFirewallCellularFirewallRules_parameters.updateNetworkApplianceFirewallCellularFirewallRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceFirewallCellularFirewallRules_nodeParam === 'object'){
                        updateNetworkApplianceFirewallCellularFirewallRules_parameters.updateNetworkApplianceFirewallCellularFirewallRules = updateNetworkApplianceFirewallCellularFirewallRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceFirewallCellularFirewallRules_nodeParam || '{}'
                        updateNetworkApplianceFirewallCellularFirewallRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceFirewallCellularFirewallRules_parameters.updateNetworkApplianceFirewallCellularFirewallRules = updateNetworkApplianceFirewallCellularFirewallRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceFirewallCellularFirewallRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceFirewallCellularFirewallRules(updateNetworkApplianceFirewallCellularFirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallFirewalledServices') {
                var getNetworkApplianceFirewallFirewalledServices_parameters = [];
                var getNetworkApplianceFirewallFirewalledServices_nodeParam;
                var getNetworkApplianceFirewallFirewalledServices_nodeParamType;
                
                
                getNetworkApplianceFirewallFirewalledServices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallFirewalledServices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallFirewalledServices_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallFirewalledServices_nodeParamType is "str"');
                    getNetworkApplianceFirewallFirewalledServices_parameters.networkId = getNetworkApplianceFirewallFirewalledServices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallFirewalledServices_nodeParamType is not "str"')
                    getNetworkApplianceFirewallFirewalledServices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallFirewalledServices(getNetworkApplianceFirewallFirewalledServices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallFirewalledService') {
                var getNetworkApplianceFirewallFirewalledService_parameters = [];
                var getNetworkApplianceFirewallFirewalledService_nodeParam;
                var getNetworkApplianceFirewallFirewalledService_nodeParamType;
                
                
                getNetworkApplianceFirewallFirewalledService_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallFirewalledService_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallFirewalledService_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallFirewalledService_nodeParamType is "str"');
                    getNetworkApplianceFirewallFirewalledService_parameters.networkId = getNetworkApplianceFirewallFirewalledService_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallFirewalledService_nodeParamType is not "str"')
                    getNetworkApplianceFirewallFirewalledService_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkApplianceFirewallFirewalledService_nodeParam = storedParamValsMap['service'] ||
                    RED.util.getMessageProperty(msg, "service");

                getNetworkApplianceFirewallFirewalledService_nodeParamType = storedParamTypeMap['service'] ||
                    RED.util.getMessageProperty(msg, "service");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallFirewalledService_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallFirewalledService_nodeParamType is "str"');
                    getNetworkApplianceFirewallFirewalledService_parameters.service = getNetworkApplianceFirewallFirewalledService_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallFirewalledService_nodeParamType is not "str"')
                    getNetworkApplianceFirewallFirewalledService_parameters.service = RED.util.getMessageProperty(msg, "service");
                }
                                result = client.getNetworkApplianceFirewallFirewalledService(getNetworkApplianceFirewallFirewalledService_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceFirewallFirewalledService') {
                var updateNetworkApplianceFirewallFirewalledService_parameters = [];
                var updateNetworkApplianceFirewallFirewalledService_nodeParam;
                var updateNetworkApplianceFirewallFirewalledService_nodeParamType;
                
                
                updateNetworkApplianceFirewallFirewalledService_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceFirewallFirewalledService_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallFirewalledService_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallFirewalledService_nodeParamType is "str"');
                    updateNetworkApplianceFirewallFirewalledService_parameters.networkId = updateNetworkApplianceFirewallFirewalledService_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallFirewalledService_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallFirewalledService_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceFirewallFirewalledService_nodeParam = storedParamValsMap['service'] ||
                    RED.util.getMessageProperty(msg, "service");

                updateNetworkApplianceFirewallFirewalledService_nodeParamType = storedParamTypeMap['service'] ||
                    RED.util.getMessageProperty(msg, "service");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallFirewalledService_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallFirewalledService_nodeParamType is "str"');
                    updateNetworkApplianceFirewallFirewalledService_parameters.service = updateNetworkApplianceFirewallFirewalledService_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallFirewalledService_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallFirewalledService_parameters.service = RED.util.getMessageProperty(msg, "service");
                }
                                
                updateNetworkApplianceFirewallFirewalledService_nodeParam = storedParamValsMap['updateNetworkApplianceFirewallFirewalledService'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallFirewalledService");

                updateNetworkApplianceFirewallFirewalledService_nodeParamType = storedParamTypeMap['updateNetworkApplianceFirewallFirewalledService'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallFirewalledService");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceFirewallFirewalledService_parameters.updateNetworkApplianceFirewallFirewalledService = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceFirewallFirewalledService_nodeParam === 'object'){
                        updateNetworkApplianceFirewallFirewalledService_parameters.updateNetworkApplianceFirewallFirewalledService = updateNetworkApplianceFirewallFirewalledService_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceFirewallFirewalledService_nodeParam || '{}'
                        updateNetworkApplianceFirewallFirewalledService_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceFirewallFirewalledService_parameters.updateNetworkApplianceFirewallFirewalledService = updateNetworkApplianceFirewallFirewalledService_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceFirewallFirewalledService_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceFirewallFirewalledService(updateNetworkApplianceFirewallFirewalledService_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallInboundFirewallRules') {
                var getNetworkApplianceFirewallInboundFirewallRules_parameters = [];
                var getNetworkApplianceFirewallInboundFirewallRules_nodeParam;
                var getNetworkApplianceFirewallInboundFirewallRules_nodeParamType;
                
                
                getNetworkApplianceFirewallInboundFirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallInboundFirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallInboundFirewallRules_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallInboundFirewallRules_nodeParamType is "str"');
                    getNetworkApplianceFirewallInboundFirewallRules_parameters.networkId = getNetworkApplianceFirewallInboundFirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallInboundFirewallRules_nodeParamType is not "str"')
                    getNetworkApplianceFirewallInboundFirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallInboundFirewallRules(getNetworkApplianceFirewallInboundFirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceFirewallInboundFirewallRules') {
                var updateNetworkApplianceFirewallInboundFirewallRules_parameters = [];
                var updateNetworkApplianceFirewallInboundFirewallRules_nodeParam;
                var updateNetworkApplianceFirewallInboundFirewallRules_nodeParamType;
                
                
                updateNetworkApplianceFirewallInboundFirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceFirewallInboundFirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallInboundFirewallRules_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallInboundFirewallRules_nodeParamType is "str"');
                    updateNetworkApplianceFirewallInboundFirewallRules_parameters.networkId = updateNetworkApplianceFirewallInboundFirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallInboundFirewallRules_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallInboundFirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceFirewallInboundFirewallRules_nodeParam = storedParamValsMap['updateNetworkApplianceFirewallInboundFirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallInboundFirewallRules");

                updateNetworkApplianceFirewallInboundFirewallRules_nodeParamType = storedParamTypeMap['updateNetworkApplianceFirewallInboundFirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallInboundFirewallRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceFirewallInboundFirewallRules_parameters.updateNetworkApplianceFirewallInboundFirewallRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceFirewallInboundFirewallRules_nodeParam === 'object'){
                        updateNetworkApplianceFirewallInboundFirewallRules_parameters.updateNetworkApplianceFirewallInboundFirewallRules = updateNetworkApplianceFirewallInboundFirewallRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceFirewallInboundFirewallRules_nodeParam || '{}'
                        updateNetworkApplianceFirewallInboundFirewallRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceFirewallInboundFirewallRules_parameters.updateNetworkApplianceFirewallInboundFirewallRules = updateNetworkApplianceFirewallInboundFirewallRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceFirewallInboundFirewallRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceFirewallInboundFirewallRules(updateNetworkApplianceFirewallInboundFirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallL3FirewallRules') {
                var getNetworkApplianceFirewallL3FirewallRules_parameters = [];
                var getNetworkApplianceFirewallL3FirewallRules_nodeParam;
                var getNetworkApplianceFirewallL3FirewallRules_nodeParamType;
                
                
                getNetworkApplianceFirewallL3FirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallL3FirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallL3FirewallRules_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallL3FirewallRules_nodeParamType is "str"');
                    getNetworkApplianceFirewallL3FirewallRules_parameters.networkId = getNetworkApplianceFirewallL3FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallL3FirewallRules_nodeParamType is not "str"')
                    getNetworkApplianceFirewallL3FirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallL3FirewallRules(getNetworkApplianceFirewallL3FirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceFirewallL3FirewallRules') {
                var updateNetworkApplianceFirewallL3FirewallRules_parameters = [];
                var updateNetworkApplianceFirewallL3FirewallRules_nodeParam;
                var updateNetworkApplianceFirewallL3FirewallRules_nodeParamType;
                
                
                updateNetworkApplianceFirewallL3FirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceFirewallL3FirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallL3FirewallRules_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallL3FirewallRules_nodeParamType is "str"');
                    updateNetworkApplianceFirewallL3FirewallRules_parameters.networkId = updateNetworkApplianceFirewallL3FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallL3FirewallRules_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallL3FirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceFirewallL3FirewallRules_nodeParam = storedParamValsMap['updateNetworkApplianceFirewallL3FirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallL3FirewallRules");

                updateNetworkApplianceFirewallL3FirewallRules_nodeParamType = storedParamTypeMap['updateNetworkApplianceFirewallL3FirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallL3FirewallRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceFirewallL3FirewallRules_parameters.updateNetworkApplianceFirewallL3FirewallRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceFirewallL3FirewallRules_nodeParam === 'object'){
                        updateNetworkApplianceFirewallL3FirewallRules_parameters.updateNetworkApplianceFirewallL3FirewallRules = updateNetworkApplianceFirewallL3FirewallRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceFirewallL3FirewallRules_nodeParam || '{}'
                        updateNetworkApplianceFirewallL3FirewallRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceFirewallL3FirewallRules_parameters.updateNetworkApplianceFirewallL3FirewallRules = updateNetworkApplianceFirewallL3FirewallRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceFirewallL3FirewallRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceFirewallL3FirewallRules(updateNetworkApplianceFirewallL3FirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallL7FirewallRules') {
                var getNetworkApplianceFirewallL7FirewallRules_parameters = [];
                var getNetworkApplianceFirewallL7FirewallRules_nodeParam;
                var getNetworkApplianceFirewallL7FirewallRules_nodeParamType;
                
                
                getNetworkApplianceFirewallL7FirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallL7FirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallL7FirewallRules_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallL7FirewallRules_nodeParamType is "str"');
                    getNetworkApplianceFirewallL7FirewallRules_parameters.networkId = getNetworkApplianceFirewallL7FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallL7FirewallRules_nodeParamType is not "str"')
                    getNetworkApplianceFirewallL7FirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallL7FirewallRules(getNetworkApplianceFirewallL7FirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceFirewallL7FirewallRules') {
                var updateNetworkApplianceFirewallL7FirewallRules_parameters = [];
                var updateNetworkApplianceFirewallL7FirewallRules_nodeParam;
                var updateNetworkApplianceFirewallL7FirewallRules_nodeParamType;
                
                
                updateNetworkApplianceFirewallL7FirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceFirewallL7FirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallL7FirewallRules_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallL7FirewallRules_nodeParamType is "str"');
                    updateNetworkApplianceFirewallL7FirewallRules_parameters.networkId = updateNetworkApplianceFirewallL7FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallL7FirewallRules_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallL7FirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceFirewallL7FirewallRules_nodeParam = storedParamValsMap['updateNetworkApplianceFirewallL7FirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallL7FirewallRules");

                updateNetworkApplianceFirewallL7FirewallRules_nodeParamType = storedParamTypeMap['updateNetworkApplianceFirewallL7FirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallL7FirewallRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceFirewallL7FirewallRules_parameters.updateNetworkApplianceFirewallL7FirewallRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceFirewallL7FirewallRules_nodeParam === 'object'){
                        updateNetworkApplianceFirewallL7FirewallRules_parameters.updateNetworkApplianceFirewallL7FirewallRules = updateNetworkApplianceFirewallL7FirewallRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceFirewallL7FirewallRules_nodeParam || '{}'
                        updateNetworkApplianceFirewallL7FirewallRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceFirewallL7FirewallRules_parameters.updateNetworkApplianceFirewallL7FirewallRules = updateNetworkApplianceFirewallL7FirewallRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceFirewallL7FirewallRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceFirewallL7FirewallRules(updateNetworkApplianceFirewallL7FirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallL7FirewallRulesApplicationCategories') {
                var getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_parameters = [];
                var getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_nodeParam;
                var getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_nodeParamType;
                
                
                getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_nodeParamType is "str"');
                    getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_parameters.networkId = getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_nodeParamType is not "str"')
                    getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(getNetworkApplianceFirewallL7FirewallRulesApplicationCategories_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallOneToManyNatRules') {
                var getNetworkApplianceFirewallOneToManyNatRules_parameters = [];
                var getNetworkApplianceFirewallOneToManyNatRules_nodeParam;
                var getNetworkApplianceFirewallOneToManyNatRules_nodeParamType;
                
                
                getNetworkApplianceFirewallOneToManyNatRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallOneToManyNatRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallOneToManyNatRules_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallOneToManyNatRules_nodeParamType is "str"');
                    getNetworkApplianceFirewallOneToManyNatRules_parameters.networkId = getNetworkApplianceFirewallOneToManyNatRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallOneToManyNatRules_nodeParamType is not "str"')
                    getNetworkApplianceFirewallOneToManyNatRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallOneToManyNatRules(getNetworkApplianceFirewallOneToManyNatRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceFirewallOneToManyNatRules') {
                var updateNetworkApplianceFirewallOneToManyNatRules_parameters = [];
                var updateNetworkApplianceFirewallOneToManyNatRules_nodeParam;
                var updateNetworkApplianceFirewallOneToManyNatRules_nodeParamType;
                
                
                updateNetworkApplianceFirewallOneToManyNatRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceFirewallOneToManyNatRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallOneToManyNatRules_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallOneToManyNatRules_nodeParamType is "str"');
                    updateNetworkApplianceFirewallOneToManyNatRules_parameters.networkId = updateNetworkApplianceFirewallOneToManyNatRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallOneToManyNatRules_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallOneToManyNatRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceFirewallOneToManyNatRules_nodeParam = storedParamValsMap['updateNetworkApplianceFirewallOneToManyNatRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallOneToManyNatRules");

                updateNetworkApplianceFirewallOneToManyNatRules_nodeParamType = storedParamTypeMap['updateNetworkApplianceFirewallOneToManyNatRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallOneToManyNatRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceFirewallOneToManyNatRules_parameters.updateNetworkApplianceFirewallOneToManyNatRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceFirewallOneToManyNatRules_nodeParam === 'object'){
                        updateNetworkApplianceFirewallOneToManyNatRules_parameters.updateNetworkApplianceFirewallOneToManyNatRules = updateNetworkApplianceFirewallOneToManyNatRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceFirewallOneToManyNatRules_nodeParam || '{}'
                        updateNetworkApplianceFirewallOneToManyNatRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceFirewallOneToManyNatRules_parameters.updateNetworkApplianceFirewallOneToManyNatRules = updateNetworkApplianceFirewallOneToManyNatRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceFirewallOneToManyNatRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceFirewallOneToManyNatRules(updateNetworkApplianceFirewallOneToManyNatRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallOneToOneNatRules') {
                var getNetworkApplianceFirewallOneToOneNatRules_parameters = [];
                var getNetworkApplianceFirewallOneToOneNatRules_nodeParam;
                var getNetworkApplianceFirewallOneToOneNatRules_nodeParamType;
                
                
                getNetworkApplianceFirewallOneToOneNatRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallOneToOneNatRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallOneToOneNatRules_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallOneToOneNatRules_nodeParamType is "str"');
                    getNetworkApplianceFirewallOneToOneNatRules_parameters.networkId = getNetworkApplianceFirewallOneToOneNatRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallOneToOneNatRules_nodeParamType is not "str"')
                    getNetworkApplianceFirewallOneToOneNatRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallOneToOneNatRules(getNetworkApplianceFirewallOneToOneNatRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceFirewallOneToOneNatRules') {
                var updateNetworkApplianceFirewallOneToOneNatRules_parameters = [];
                var updateNetworkApplianceFirewallOneToOneNatRules_nodeParam;
                var updateNetworkApplianceFirewallOneToOneNatRules_nodeParamType;
                
                
                updateNetworkApplianceFirewallOneToOneNatRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceFirewallOneToOneNatRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallOneToOneNatRules_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallOneToOneNatRules_nodeParamType is "str"');
                    updateNetworkApplianceFirewallOneToOneNatRules_parameters.networkId = updateNetworkApplianceFirewallOneToOneNatRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallOneToOneNatRules_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallOneToOneNatRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceFirewallOneToOneNatRules_nodeParam = storedParamValsMap['updateNetworkApplianceFirewallOneToOneNatRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallOneToOneNatRules");

                updateNetworkApplianceFirewallOneToOneNatRules_nodeParamType = storedParamTypeMap['updateNetworkApplianceFirewallOneToOneNatRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallOneToOneNatRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceFirewallOneToOneNatRules_parameters.updateNetworkApplianceFirewallOneToOneNatRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceFirewallOneToOneNatRules_nodeParam === 'object'){
                        updateNetworkApplianceFirewallOneToOneNatRules_parameters.updateNetworkApplianceFirewallOneToOneNatRules = updateNetworkApplianceFirewallOneToOneNatRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceFirewallOneToOneNatRules_nodeParam || '{}'
                        updateNetworkApplianceFirewallOneToOneNatRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceFirewallOneToOneNatRules_parameters.updateNetworkApplianceFirewallOneToOneNatRules = updateNetworkApplianceFirewallOneToOneNatRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceFirewallOneToOneNatRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceFirewallOneToOneNatRules(updateNetworkApplianceFirewallOneToOneNatRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceFirewallPortForwardingRules') {
                var getNetworkApplianceFirewallPortForwardingRules_parameters = [];
                var getNetworkApplianceFirewallPortForwardingRules_nodeParam;
                var getNetworkApplianceFirewallPortForwardingRules_nodeParamType;
                
                
                getNetworkApplianceFirewallPortForwardingRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceFirewallPortForwardingRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceFirewallPortForwardingRules_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceFirewallPortForwardingRules_nodeParamType is "str"');
                    getNetworkApplianceFirewallPortForwardingRules_parameters.networkId = getNetworkApplianceFirewallPortForwardingRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceFirewallPortForwardingRules_nodeParamType is not "str"')
                    getNetworkApplianceFirewallPortForwardingRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceFirewallPortForwardingRules(getNetworkApplianceFirewallPortForwardingRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceFirewallPortForwardingRules') {
                var updateNetworkApplianceFirewallPortForwardingRules_parameters = [];
                var updateNetworkApplianceFirewallPortForwardingRules_nodeParam;
                var updateNetworkApplianceFirewallPortForwardingRules_nodeParamType;
                
                
                updateNetworkApplianceFirewallPortForwardingRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceFirewallPortForwardingRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceFirewallPortForwardingRules_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceFirewallPortForwardingRules_nodeParamType is "str"');
                    updateNetworkApplianceFirewallPortForwardingRules_parameters.networkId = updateNetworkApplianceFirewallPortForwardingRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceFirewallPortForwardingRules_nodeParamType is not "str"')
                    updateNetworkApplianceFirewallPortForwardingRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceFirewallPortForwardingRules_nodeParam = storedParamValsMap['updateNetworkApplianceFirewallPortForwardingRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallPortForwardingRules");

                updateNetworkApplianceFirewallPortForwardingRules_nodeParamType = storedParamTypeMap['updateNetworkApplianceFirewallPortForwardingRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceFirewallPortForwardingRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceFirewallPortForwardingRules_parameters.updateNetworkApplianceFirewallPortForwardingRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceFirewallPortForwardingRules_nodeParam === 'object'){
                        updateNetworkApplianceFirewallPortForwardingRules_parameters.updateNetworkApplianceFirewallPortForwardingRules = updateNetworkApplianceFirewallPortForwardingRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceFirewallPortForwardingRules_nodeParam || '{}'
                        updateNetworkApplianceFirewallPortForwardingRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceFirewallPortForwardingRules_parameters.updateNetworkApplianceFirewallPortForwardingRules = updateNetworkApplianceFirewallPortForwardingRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceFirewallPortForwardingRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceFirewallPortForwardingRules(updateNetworkApplianceFirewallPortForwardingRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkAppliancePorts') {
                var getNetworkAppliancePorts_parameters = [];
                var getNetworkAppliancePorts_nodeParam;
                var getNetworkAppliancePorts_nodeParamType;
                
                
                getNetworkAppliancePorts_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkAppliancePorts_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkAppliancePorts_nodeParamType === 'str') {
                    //console.log('getNetworkAppliancePorts_nodeParamType is "str"');
                    getNetworkAppliancePorts_parameters.networkId = getNetworkAppliancePorts_nodeParam || undefined;
                } else {
                    //console.log('getNetworkAppliancePorts_nodeParamType is not "str"')
                    getNetworkAppliancePorts_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkAppliancePorts(getNetworkAppliancePorts_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkAppliancePort') {
                var getNetworkAppliancePort_parameters = [];
                var getNetworkAppliancePort_nodeParam;
                var getNetworkAppliancePort_nodeParamType;
                
                
                getNetworkAppliancePort_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkAppliancePort_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkAppliancePort_nodeParamType === 'str') {
                    //console.log('getNetworkAppliancePort_nodeParamType is "str"');
                    getNetworkAppliancePort_parameters.networkId = getNetworkAppliancePort_nodeParam || undefined;
                } else {
                    //console.log('getNetworkAppliancePort_nodeParamType is not "str"')
                    getNetworkAppliancePort_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkAppliancePort_nodeParam = storedParamValsMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                getNetworkAppliancePort_nodeParamType = storedParamTypeMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkAppliancePort_nodeParamType === 'str') {
                    //console.log('getNetworkAppliancePort_nodeParamType is "str"');
                    getNetworkAppliancePort_parameters.portId = getNetworkAppliancePort_nodeParam || undefined;
                } else {
                    //console.log('getNetworkAppliancePort_nodeParamType is not "str"')
                    getNetworkAppliancePort_parameters.portId = RED.util.getMessageProperty(msg, "portId");
                }
                                result = client.getNetworkAppliancePort(getNetworkAppliancePort_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkAppliancePort') {
                var updateNetworkAppliancePort_parameters = [];
                var updateNetworkAppliancePort_nodeParam;
                var updateNetworkAppliancePort_nodeParamType;
                
                
                updateNetworkAppliancePort_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkAppliancePort_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkAppliancePort_nodeParamType === 'str') {
                    //console.log('updateNetworkAppliancePort_nodeParamType is "str"');
                    updateNetworkAppliancePort_parameters.networkId = updateNetworkAppliancePort_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkAppliancePort_nodeParamType is not "str"')
                    updateNetworkAppliancePort_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkAppliancePort_nodeParam = storedParamValsMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                updateNetworkAppliancePort_nodeParamType = storedParamTypeMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkAppliancePort_nodeParamType === 'str') {
                    //console.log('updateNetworkAppliancePort_nodeParamType is "str"');
                    updateNetworkAppliancePort_parameters.portId = updateNetworkAppliancePort_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkAppliancePort_nodeParamType is not "str"')
                    updateNetworkAppliancePort_parameters.portId = RED.util.getMessageProperty(msg, "portId");
                }
                                
                updateNetworkAppliancePort_nodeParam = storedParamValsMap['updateNetworkAppliancePort'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkAppliancePort");

                updateNetworkAppliancePort_nodeParamType = storedParamTypeMap['updateNetworkAppliancePort'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkAppliancePort");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkAppliancePort_parameters.updateNetworkAppliancePort = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkAppliancePort_nodeParam === 'object'){
                        updateNetworkAppliancePort_parameters.updateNetworkAppliancePort = updateNetworkAppliancePort_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkAppliancePort_nodeParam || '{}'
                        updateNetworkAppliancePort_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkAppliancePort_parameters.updateNetworkAppliancePort = updateNetworkAppliancePort_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkAppliancePort_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkAppliancePort(updateNetworkAppliancePort_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceSecurityEvents') {
                var getNetworkApplianceSecurityEvents_parameters = [];
                var getNetworkApplianceSecurityEvents_nodeParam;
                var getNetworkApplianceSecurityEvents_nodeParamType;
                
                
                getNetworkApplianceSecurityEvents_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceSecurityEvents_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceSecurityEvents_parameters.networkId = getNetworkApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceSecurityEvents_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkApplianceSecurityEvents_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkApplianceSecurityEvents_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceSecurityEvents_parameters.t0 = getNetworkApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceSecurityEvents_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkApplianceSecurityEvents_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkApplianceSecurityEvents_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceSecurityEvents_parameters.t1 = getNetworkApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceSecurityEvents_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkApplianceSecurityEvents_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkApplianceSecurityEvents_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceSecurityEvents_parameters.timespan = getNetworkApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceSecurityEvents_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkApplianceSecurityEvents_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkApplianceSecurityEvents_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceSecurityEvents_parameters.perPage = getNetworkApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceSecurityEvents_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkApplianceSecurityEvents_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkApplianceSecurityEvents_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceSecurityEvents_parameters.startingAfter = getNetworkApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceSecurityEvents_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkApplianceSecurityEvents_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkApplianceSecurityEvents_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceSecurityEvents_parameters.endingBefore = getNetworkApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceSecurityEvents_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getNetworkApplianceSecurityEvents_nodeParam = storedParamValsMap['sortOrder'] ||
                    RED.util.getMessageProperty(msg, "sortOrder");

                getNetworkApplianceSecurityEvents_nodeParamType = storedParamTypeMap['sortOrder'] ||
                    RED.util.getMessageProperty(msg, "sortOrder");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is "str"');
                    getNetworkApplianceSecurityEvents_parameters.sortOrder = getNetworkApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityEvents_nodeParamType is not "str"')
                    getNetworkApplianceSecurityEvents_parameters.sortOrder = RED.util.getMessageProperty(msg, "sortOrder");
                }
                                result = client.getNetworkApplianceSecurityEvents(getNetworkApplianceSecurityEvents_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceSecurityIntrusion') {
                var getNetworkApplianceSecurityIntrusion_parameters = [];
                var getNetworkApplianceSecurityIntrusion_nodeParam;
                var getNetworkApplianceSecurityIntrusion_nodeParamType;
                
                
                getNetworkApplianceSecurityIntrusion_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceSecurityIntrusion_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityIntrusion_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityIntrusion_nodeParamType is "str"');
                    getNetworkApplianceSecurityIntrusion_parameters.networkId = getNetworkApplianceSecurityIntrusion_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityIntrusion_nodeParamType is not "str"')
                    getNetworkApplianceSecurityIntrusion_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceSecurityIntrusion(getNetworkApplianceSecurityIntrusion_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceSecurityIntrusion') {
                var updateNetworkApplianceSecurityIntrusion_parameters = [];
                var updateNetworkApplianceSecurityIntrusion_nodeParam;
                var updateNetworkApplianceSecurityIntrusion_nodeParamType;
                
                
                updateNetworkApplianceSecurityIntrusion_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceSecurityIntrusion_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceSecurityIntrusion_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceSecurityIntrusion_nodeParamType is "str"');
                    updateNetworkApplianceSecurityIntrusion_parameters.networkId = updateNetworkApplianceSecurityIntrusion_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceSecurityIntrusion_nodeParamType is not "str"')
                    updateNetworkApplianceSecurityIntrusion_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceSecurityIntrusion_nodeParam = storedParamValsMap['updateNetworkApplianceSecurityIntrusion'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceSecurityIntrusion");

                updateNetworkApplianceSecurityIntrusion_nodeParamType = storedParamTypeMap['updateNetworkApplianceSecurityIntrusion'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceSecurityIntrusion");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceSecurityIntrusion_parameters.updateNetworkApplianceSecurityIntrusion = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceSecurityIntrusion_nodeParam === 'object'){
                        updateNetworkApplianceSecurityIntrusion_parameters.updateNetworkApplianceSecurityIntrusion = updateNetworkApplianceSecurityIntrusion_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceSecurityIntrusion_nodeParam || '{}'
                        updateNetworkApplianceSecurityIntrusion_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceSecurityIntrusion_parameters.updateNetworkApplianceSecurityIntrusion = updateNetworkApplianceSecurityIntrusion_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceSecurityIntrusion_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceSecurityIntrusion(updateNetworkApplianceSecurityIntrusion_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceSecurityMalware') {
                var getNetworkApplianceSecurityMalware_parameters = [];
                var getNetworkApplianceSecurityMalware_nodeParam;
                var getNetworkApplianceSecurityMalware_nodeParamType;
                
                
                getNetworkApplianceSecurityMalware_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceSecurityMalware_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSecurityMalware_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSecurityMalware_nodeParamType is "str"');
                    getNetworkApplianceSecurityMalware_parameters.networkId = getNetworkApplianceSecurityMalware_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSecurityMalware_nodeParamType is not "str"')
                    getNetworkApplianceSecurityMalware_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceSecurityMalware(getNetworkApplianceSecurityMalware_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceSecurityMalware') {
                var updateNetworkApplianceSecurityMalware_parameters = [];
                var updateNetworkApplianceSecurityMalware_nodeParam;
                var updateNetworkApplianceSecurityMalware_nodeParamType;
                
                
                updateNetworkApplianceSecurityMalware_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceSecurityMalware_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceSecurityMalware_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceSecurityMalware_nodeParamType is "str"');
                    updateNetworkApplianceSecurityMalware_parameters.networkId = updateNetworkApplianceSecurityMalware_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceSecurityMalware_nodeParamType is not "str"')
                    updateNetworkApplianceSecurityMalware_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceSecurityMalware_nodeParam = storedParamValsMap['updateNetworkApplianceSecurityMalware'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceSecurityMalware");

                updateNetworkApplianceSecurityMalware_nodeParamType = storedParamTypeMap['updateNetworkApplianceSecurityMalware'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceSecurityMalware");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceSecurityMalware_parameters.updateNetworkApplianceSecurityMalware = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceSecurityMalware_nodeParam === 'object'){
                        updateNetworkApplianceSecurityMalware_parameters.updateNetworkApplianceSecurityMalware = updateNetworkApplianceSecurityMalware_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceSecurityMalware_nodeParam || '{}'
                        updateNetworkApplianceSecurityMalware_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceSecurityMalware_parameters.updateNetworkApplianceSecurityMalware = updateNetworkApplianceSecurityMalware_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceSecurityMalware_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceSecurityMalware(updateNetworkApplianceSecurityMalware_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceSettings') {
                var getNetworkApplianceSettings_parameters = [];
                var getNetworkApplianceSettings_nodeParam;
                var getNetworkApplianceSettings_nodeParamType;
                
                
                getNetworkApplianceSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSettings_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSettings_nodeParamType is "str"');
                    getNetworkApplianceSettings_parameters.networkId = getNetworkApplianceSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSettings_nodeParamType is not "str"')
                    getNetworkApplianceSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceSettings(getNetworkApplianceSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceSingleLan') {
                var getNetworkApplianceSingleLan_parameters = [];
                var getNetworkApplianceSingleLan_nodeParam;
                var getNetworkApplianceSingleLan_nodeParamType;
                
                
                getNetworkApplianceSingleLan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceSingleLan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceSingleLan_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceSingleLan_nodeParamType is "str"');
                    getNetworkApplianceSingleLan_parameters.networkId = getNetworkApplianceSingleLan_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceSingleLan_nodeParamType is not "str"')
                    getNetworkApplianceSingleLan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceSingleLan(getNetworkApplianceSingleLan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceSingleLan') {
                var updateNetworkApplianceSingleLan_parameters = [];
                var updateNetworkApplianceSingleLan_nodeParam;
                var updateNetworkApplianceSingleLan_nodeParamType;
                
                
                updateNetworkApplianceSingleLan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceSingleLan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceSingleLan_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceSingleLan_nodeParamType is "str"');
                    updateNetworkApplianceSingleLan_parameters.networkId = updateNetworkApplianceSingleLan_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceSingleLan_nodeParamType is not "str"')
                    updateNetworkApplianceSingleLan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceSingleLan_nodeParam = storedParamValsMap['updateNetworkApplianceSingleLan'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceSingleLan");

                updateNetworkApplianceSingleLan_nodeParamType = storedParamTypeMap['updateNetworkApplianceSingleLan'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceSingleLan");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceSingleLan_parameters.updateNetworkApplianceSingleLan = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceSingleLan_nodeParam === 'object'){
                        updateNetworkApplianceSingleLan_parameters.updateNetworkApplianceSingleLan = updateNetworkApplianceSingleLan_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceSingleLan_nodeParam || '{}'
                        updateNetworkApplianceSingleLan_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceSingleLan_parameters.updateNetworkApplianceSingleLan = updateNetworkApplianceSingleLan_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceSingleLan_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceSingleLan(updateNetworkApplianceSingleLan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceStaticRoutes') {
                var getNetworkApplianceStaticRoutes_parameters = [];
                var getNetworkApplianceStaticRoutes_nodeParam;
                var getNetworkApplianceStaticRoutes_nodeParamType;
                
                
                getNetworkApplianceStaticRoutes_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceStaticRoutes_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceStaticRoutes_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceStaticRoutes_nodeParamType is "str"');
                    getNetworkApplianceStaticRoutes_parameters.networkId = getNetworkApplianceStaticRoutes_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceStaticRoutes_nodeParamType is not "str"')
                    getNetworkApplianceStaticRoutes_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceStaticRoutes(getNetworkApplianceStaticRoutes_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkApplianceStaticRoute') {
                var createNetworkApplianceStaticRoute_parameters = [];
                var createNetworkApplianceStaticRoute_nodeParam;
                var createNetworkApplianceStaticRoute_nodeParamType;
                
                
                createNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkApplianceStaticRoute_nodeParamType === 'str') {
                    //console.log('createNetworkApplianceStaticRoute_nodeParamType is "str"');
                    createNetworkApplianceStaticRoute_parameters.networkId = createNetworkApplianceStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('createNetworkApplianceStaticRoute_nodeParamType is not "str"')
                    createNetworkApplianceStaticRoute_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['createNetworkApplianceStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "createNetworkApplianceStaticRoute");

                createNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['createNetworkApplianceStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "createNetworkApplianceStaticRoute");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkApplianceStaticRoute_parameters.createNetworkApplianceStaticRoute = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkApplianceStaticRoute_nodeParam === 'object'){
                        createNetworkApplianceStaticRoute_parameters.createNetworkApplianceStaticRoute = createNetworkApplianceStaticRoute_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkApplianceStaticRoute_nodeParam || '{}'
                        createNetworkApplianceStaticRoute_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkApplianceStaticRoute_parameters.createNetworkApplianceStaticRoute = createNetworkApplianceStaticRoute_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkApplianceStaticRoute_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkApplianceStaticRoute(createNetworkApplianceStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceStaticRoute') {
                var getNetworkApplianceStaticRoute_parameters = [];
                var getNetworkApplianceStaticRoute_nodeParam;
                var getNetworkApplianceStaticRoute_nodeParamType;
                
                
                getNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceStaticRoute_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceStaticRoute_nodeParamType is "str"');
                    getNetworkApplianceStaticRoute_parameters.networkId = getNetworkApplianceStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceStaticRoute_nodeParamType is not "str"')
                    getNetworkApplianceStaticRoute_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                getNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceStaticRoute_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceStaticRoute_nodeParamType is "str"');
                    getNetworkApplianceStaticRoute_parameters.staticRouteId = getNetworkApplianceStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceStaticRoute_nodeParamType is not "str"')
                    getNetworkApplianceStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                result = client.getNetworkApplianceStaticRoute(getNetworkApplianceStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceStaticRoute') {
                var updateNetworkApplianceStaticRoute_parameters = [];
                var updateNetworkApplianceStaticRoute_nodeParam;
                var updateNetworkApplianceStaticRoute_nodeParamType;
                
                
                updateNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceStaticRoute_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceStaticRoute_nodeParamType is "str"');
                    updateNetworkApplianceStaticRoute_parameters.networkId = updateNetworkApplianceStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceStaticRoute_nodeParamType is not "str"')
                    updateNetworkApplianceStaticRoute_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                updateNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceStaticRoute_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceStaticRoute_nodeParamType is "str"');
                    updateNetworkApplianceStaticRoute_parameters.staticRouteId = updateNetworkApplianceStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceStaticRoute_nodeParamType is not "str"')
                    updateNetworkApplianceStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                
                updateNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['updateNetworkApplianceStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceStaticRoute");

                updateNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['updateNetworkApplianceStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceStaticRoute");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceStaticRoute_parameters.updateNetworkApplianceStaticRoute = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceStaticRoute_nodeParam === 'object'){
                        updateNetworkApplianceStaticRoute_parameters.updateNetworkApplianceStaticRoute = updateNetworkApplianceStaticRoute_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceStaticRoute_nodeParam || '{}'
                        updateNetworkApplianceStaticRoute_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceStaticRoute_parameters.updateNetworkApplianceStaticRoute = updateNetworkApplianceStaticRoute_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceStaticRoute_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceStaticRoute(updateNetworkApplianceStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkApplianceStaticRoute') {
                var deleteNetworkApplianceStaticRoute_parameters = [];
                var deleteNetworkApplianceStaticRoute_nodeParam;
                var deleteNetworkApplianceStaticRoute_nodeParamType;
                
                
                deleteNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkApplianceStaticRoute_nodeParamType === 'str') {
                    //console.log('deleteNetworkApplianceStaticRoute_nodeParamType is "str"');
                    deleteNetworkApplianceStaticRoute_parameters.networkId = deleteNetworkApplianceStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkApplianceStaticRoute_nodeParamType is not "str"')
                    deleteNetworkApplianceStaticRoute_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkApplianceStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                deleteNetworkApplianceStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkApplianceStaticRoute_nodeParamType === 'str') {
                    //console.log('deleteNetworkApplianceStaticRoute_nodeParamType is "str"');
                    deleteNetworkApplianceStaticRoute_parameters.staticRouteId = deleteNetworkApplianceStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkApplianceStaticRoute_nodeParamType is not "str"')
                    deleteNetworkApplianceStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                result = client.deleteNetworkApplianceStaticRoute(deleteNetworkApplianceStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceTrafficShaping') {
                var getNetworkApplianceTrafficShaping_parameters = [];
                var getNetworkApplianceTrafficShaping_nodeParam;
                var getNetworkApplianceTrafficShaping_nodeParamType;
                
                
                getNetworkApplianceTrafficShaping_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceTrafficShaping_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceTrafficShaping_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceTrafficShaping_nodeParamType is "str"');
                    getNetworkApplianceTrafficShaping_parameters.networkId = getNetworkApplianceTrafficShaping_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceTrafficShaping_nodeParamType is not "str"')
                    getNetworkApplianceTrafficShaping_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceTrafficShaping(getNetworkApplianceTrafficShaping_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceTrafficShaping') {
                var updateNetworkApplianceTrafficShaping_parameters = [];
                var updateNetworkApplianceTrafficShaping_nodeParam;
                var updateNetworkApplianceTrafficShaping_nodeParamType;
                
                
                updateNetworkApplianceTrafficShaping_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceTrafficShaping_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceTrafficShaping_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceTrafficShaping_nodeParamType is "str"');
                    updateNetworkApplianceTrafficShaping_parameters.networkId = updateNetworkApplianceTrafficShaping_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceTrafficShaping_nodeParamType is not "str"')
                    updateNetworkApplianceTrafficShaping_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceTrafficShaping_nodeParam = storedParamValsMap['updateNetworkApplianceTrafficShaping'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShaping");

                updateNetworkApplianceTrafficShaping_nodeParamType = storedParamTypeMap['updateNetworkApplianceTrafficShaping'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShaping");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceTrafficShaping_parameters.updateNetworkApplianceTrafficShaping = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceTrafficShaping_nodeParam === 'object'){
                        updateNetworkApplianceTrafficShaping_parameters.updateNetworkApplianceTrafficShaping = updateNetworkApplianceTrafficShaping_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceTrafficShaping_nodeParam || '{}'
                        updateNetworkApplianceTrafficShaping_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceTrafficShaping_parameters.updateNetworkApplianceTrafficShaping = updateNetworkApplianceTrafficShaping_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceTrafficShaping_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceTrafficShaping(updateNetworkApplianceTrafficShaping_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceTrafficShapingCustomPerformanceClasses') {
                var getNetworkApplianceTrafficShapingCustomPerformanceClasses_parameters = [];
                var getNetworkApplianceTrafficShapingCustomPerformanceClasses_nodeParam;
                var getNetworkApplianceTrafficShapingCustomPerformanceClasses_nodeParamType;
                
                
                getNetworkApplianceTrafficShapingCustomPerformanceClasses_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceTrafficShapingCustomPerformanceClasses_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceTrafficShapingCustomPerformanceClasses_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceTrafficShapingCustomPerformanceClasses_nodeParamType is "str"');
                    getNetworkApplianceTrafficShapingCustomPerformanceClasses_parameters.networkId = getNetworkApplianceTrafficShapingCustomPerformanceClasses_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceTrafficShapingCustomPerformanceClasses_nodeParamType is not "str"')
                    getNetworkApplianceTrafficShapingCustomPerformanceClasses_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceTrafficShapingCustomPerformanceClasses(getNetworkApplianceTrafficShapingCustomPerformanceClasses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkApplianceTrafficShapingCustomPerformanceClass') {
                var createNetworkApplianceTrafficShapingCustomPerformanceClass_parameters = [];
                var createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam;
                var createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType;
                
                
                createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType === 'str') {
                    //console.log('createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is "str"');
                    createNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.networkId = createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || undefined;
                } else {
                    //console.log('createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is not "str"')
                    createNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['createNetworkApplianceTrafficShapingCustomPerformanceClass'] ||
                    RED.util.getMessageProperty(msg, "createNetworkApplianceTrafficShapingCustomPerformanceClass");

                createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['createNetworkApplianceTrafficShapingCustomPerformanceClass'] ||
                    RED.util.getMessageProperty(msg, "createNetworkApplianceTrafficShapingCustomPerformanceClass");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.createNetworkApplianceTrafficShapingCustomPerformanceClass = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam === 'object'){
                        createNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.createNetworkApplianceTrafficShapingCustomPerformanceClass = createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || '{}'
                        createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.createNetworkApplianceTrafficShapingCustomPerformanceClass = createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkApplianceTrafficShapingCustomPerformanceClass(createNetworkApplianceTrafficShapingCustomPerformanceClass_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceTrafficShapingCustomPerformanceClass') {
                var getNetworkApplianceTrafficShapingCustomPerformanceClass_parameters = [];
                var getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam;
                var getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType;
                
                
                getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is "str"');
                    getNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.networkId = getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is not "str"')
                    getNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['customPerformanceClassId'] ||
                    RED.util.getMessageProperty(msg, "customPerformanceClassId");

                getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['customPerformanceClassId'] ||
                    RED.util.getMessageProperty(msg, "customPerformanceClassId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is "str"');
                    getNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.customPerformanceClassId = getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is not "str"')
                    getNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.customPerformanceClassId = RED.util.getMessageProperty(msg, "customPerformanceClassId");
                }
                                result = client.getNetworkApplianceTrafficShapingCustomPerformanceClass(getNetworkApplianceTrafficShapingCustomPerformanceClass_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceTrafficShapingCustomPerformanceClass') {
                var updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters = [];
                var updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam;
                var updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType;
                
                
                updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is "str"');
                    updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.networkId = updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is not "str"')
                    updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['customPerformanceClassId'] ||
                    RED.util.getMessageProperty(msg, "customPerformanceClassId");

                updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['customPerformanceClassId'] ||
                    RED.util.getMessageProperty(msg, "customPerformanceClassId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is "str"');
                    updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.customPerformanceClassId = updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is not "str"')
                    updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.customPerformanceClassId = RED.util.getMessageProperty(msg, "customPerformanceClassId");
                }
                                
                updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['updateNetworkApplianceTrafficShapingCustomPerformanceClass'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShapingCustomPerformanceClass");

                updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['updateNetworkApplianceTrafficShapingCustomPerformanceClass'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShapingCustomPerformanceClass");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.updateNetworkApplianceTrafficShapingCustomPerformanceClass = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam === 'object'){
                        updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.updateNetworkApplianceTrafficShapingCustomPerformanceClass = updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || '{}'
                        updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.updateNetworkApplianceTrafficShapingCustomPerformanceClass = updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceTrafficShapingCustomPerformanceClass(updateNetworkApplianceTrafficShapingCustomPerformanceClass_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkApplianceTrafficShapingCustomPerformanceClass') {
                var deleteNetworkApplianceTrafficShapingCustomPerformanceClass_parameters = [];
                var deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam;
                var deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType;
                
                
                deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType === 'str') {
                    //console.log('deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is "str"');
                    deleteNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.networkId = deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is not "str"')
                    deleteNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam = storedParamValsMap['customPerformanceClassId'] ||
                    RED.util.getMessageProperty(msg, "customPerformanceClassId");

                deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType = storedParamTypeMap['customPerformanceClassId'] ||
                    RED.util.getMessageProperty(msg, "customPerformanceClassId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType === 'str') {
                    //console.log('deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is "str"');
                    deleteNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.customPerformanceClassId = deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkApplianceTrafficShapingCustomPerformanceClass_nodeParamType is not "str"')
                    deleteNetworkApplianceTrafficShapingCustomPerformanceClass_parameters.customPerformanceClassId = RED.util.getMessageProperty(msg, "customPerformanceClassId");
                }
                                result = client.deleteNetworkApplianceTrafficShapingCustomPerformanceClass(deleteNetworkApplianceTrafficShapingCustomPerformanceClass_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceTrafficShapingRules') {
                var updateNetworkApplianceTrafficShapingRules_parameters = [];
                var updateNetworkApplianceTrafficShapingRules_nodeParam;
                var updateNetworkApplianceTrafficShapingRules_nodeParamType;
                
                
                updateNetworkApplianceTrafficShapingRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceTrafficShapingRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceTrafficShapingRules_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceTrafficShapingRules_nodeParamType is "str"');
                    updateNetworkApplianceTrafficShapingRules_parameters.networkId = updateNetworkApplianceTrafficShapingRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceTrafficShapingRules_nodeParamType is not "str"')
                    updateNetworkApplianceTrafficShapingRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceTrafficShapingRules_nodeParam = storedParamValsMap['updateNetworkApplianceTrafficShapingRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShapingRules");

                updateNetworkApplianceTrafficShapingRules_nodeParamType = storedParamTypeMap['updateNetworkApplianceTrafficShapingRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShapingRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceTrafficShapingRules_parameters.updateNetworkApplianceTrafficShapingRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceTrafficShapingRules_nodeParam === 'object'){
                        updateNetworkApplianceTrafficShapingRules_parameters.updateNetworkApplianceTrafficShapingRules = updateNetworkApplianceTrafficShapingRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceTrafficShapingRules_nodeParam || '{}'
                        updateNetworkApplianceTrafficShapingRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceTrafficShapingRules_parameters.updateNetworkApplianceTrafficShapingRules = updateNetworkApplianceTrafficShapingRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceTrafficShapingRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceTrafficShapingRules(updateNetworkApplianceTrafficShapingRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceTrafficShapingRules') {
                var getNetworkApplianceTrafficShapingRules_parameters = [];
                var getNetworkApplianceTrafficShapingRules_nodeParam;
                var getNetworkApplianceTrafficShapingRules_nodeParamType;
                
                
                getNetworkApplianceTrafficShapingRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceTrafficShapingRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceTrafficShapingRules_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceTrafficShapingRules_nodeParamType is "str"');
                    getNetworkApplianceTrafficShapingRules_parameters.networkId = getNetworkApplianceTrafficShapingRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceTrafficShapingRules_nodeParamType is not "str"')
                    getNetworkApplianceTrafficShapingRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceTrafficShapingRules(getNetworkApplianceTrafficShapingRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceTrafficShapingUplinkBandwidth') {
                var getNetworkApplianceTrafficShapingUplinkBandwidth_parameters = [];
                var getNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam;
                var getNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType;
                
                
                getNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType is "str"');
                    getNetworkApplianceTrafficShapingUplinkBandwidth_parameters.networkId = getNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType is not "str"')
                    getNetworkApplianceTrafficShapingUplinkBandwidth_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceTrafficShapingUplinkBandwidth(getNetworkApplianceTrafficShapingUplinkBandwidth_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceTrafficShapingUplinkBandwidth') {
                var updateNetworkApplianceTrafficShapingUplinkBandwidth_parameters = [];
                var updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam;
                var updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType;
                
                
                updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType is "str"');
                    updateNetworkApplianceTrafficShapingUplinkBandwidth_parameters.networkId = updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType is not "str"')
                    updateNetworkApplianceTrafficShapingUplinkBandwidth_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam = storedParamValsMap['updateNetworkApplianceTrafficShapingUplinkBandwidth'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShapingUplinkBandwidth");

                updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParamType = storedParamTypeMap['updateNetworkApplianceTrafficShapingUplinkBandwidth'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShapingUplinkBandwidth");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceTrafficShapingUplinkBandwidth_parameters.updateNetworkApplianceTrafficShapingUplinkBandwidth = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam === 'object'){
                        updateNetworkApplianceTrafficShapingUplinkBandwidth_parameters.updateNetworkApplianceTrafficShapingUplinkBandwidth = updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam || '{}'
                        updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceTrafficShapingUplinkBandwidth_parameters.updateNetworkApplianceTrafficShapingUplinkBandwidth = updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceTrafficShapingUplinkBandwidth_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceTrafficShapingUplinkBandwidth(updateNetworkApplianceTrafficShapingUplinkBandwidth_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceTrafficShapingUplinkSelection') {
                var getNetworkApplianceTrafficShapingUplinkSelection_parameters = [];
                var getNetworkApplianceTrafficShapingUplinkSelection_nodeParam;
                var getNetworkApplianceTrafficShapingUplinkSelection_nodeParamType;
                
                
                getNetworkApplianceTrafficShapingUplinkSelection_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceTrafficShapingUplinkSelection_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceTrafficShapingUplinkSelection_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceTrafficShapingUplinkSelection_nodeParamType is "str"');
                    getNetworkApplianceTrafficShapingUplinkSelection_parameters.networkId = getNetworkApplianceTrafficShapingUplinkSelection_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceTrafficShapingUplinkSelection_nodeParamType is not "str"')
                    getNetworkApplianceTrafficShapingUplinkSelection_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceTrafficShapingUplinkSelection(getNetworkApplianceTrafficShapingUplinkSelection_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceTrafficShapingUplinkSelection') {
                var updateNetworkApplianceTrafficShapingUplinkSelection_parameters = [];
                var updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam;
                var updateNetworkApplianceTrafficShapingUplinkSelection_nodeParamType;
                
                
                updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceTrafficShapingUplinkSelection_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceTrafficShapingUplinkSelection_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceTrafficShapingUplinkSelection_nodeParamType is "str"');
                    updateNetworkApplianceTrafficShapingUplinkSelection_parameters.networkId = updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceTrafficShapingUplinkSelection_nodeParamType is not "str"')
                    updateNetworkApplianceTrafficShapingUplinkSelection_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam = storedParamValsMap['updateNetworkApplianceTrafficShapingUplinkSelection'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShapingUplinkSelection");

                updateNetworkApplianceTrafficShapingUplinkSelection_nodeParamType = storedParamTypeMap['updateNetworkApplianceTrafficShapingUplinkSelection'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceTrafficShapingUplinkSelection");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceTrafficShapingUplinkSelection_parameters.updateNetworkApplianceTrafficShapingUplinkSelection = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam === 'object'){
                        updateNetworkApplianceTrafficShapingUplinkSelection_parameters.updateNetworkApplianceTrafficShapingUplinkSelection = updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam || '{}'
                        updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceTrafficShapingUplinkSelection_parameters.updateNetworkApplianceTrafficShapingUplinkSelection = updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceTrafficShapingUplinkSelection_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceTrafficShapingUplinkSelection(updateNetworkApplianceTrafficShapingUplinkSelection_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceVlans') {
                var getNetworkApplianceVlans_parameters = [];
                var getNetworkApplianceVlans_nodeParam;
                var getNetworkApplianceVlans_nodeParamType;
                
                
                getNetworkApplianceVlans_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceVlans_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceVlans_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceVlans_nodeParamType is "str"');
                    getNetworkApplianceVlans_parameters.networkId = getNetworkApplianceVlans_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceVlans_nodeParamType is not "str"')
                    getNetworkApplianceVlans_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceVlans(getNetworkApplianceVlans_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkApplianceVlan') {
                var createNetworkApplianceVlan_parameters = [];
                var createNetworkApplianceVlan_nodeParam;
                var createNetworkApplianceVlan_nodeParamType;
                
                
                createNetworkApplianceVlan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkApplianceVlan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkApplianceVlan_nodeParamType === 'str') {
                    //console.log('createNetworkApplianceVlan_nodeParamType is "str"');
                    createNetworkApplianceVlan_parameters.networkId = createNetworkApplianceVlan_nodeParam || undefined;
                } else {
                    //console.log('createNetworkApplianceVlan_nodeParamType is not "str"')
                    createNetworkApplianceVlan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkApplianceVlan_nodeParam = storedParamValsMap['createNetworkApplianceVlan'] ||
                    RED.util.getMessageProperty(msg, "createNetworkApplianceVlan");

                createNetworkApplianceVlan_nodeParamType = storedParamTypeMap['createNetworkApplianceVlan'] ||
                    RED.util.getMessageProperty(msg, "createNetworkApplianceVlan");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkApplianceVlan_parameters.createNetworkApplianceVlan = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkApplianceVlan_nodeParam === 'object'){
                        createNetworkApplianceVlan_parameters.createNetworkApplianceVlan = createNetworkApplianceVlan_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkApplianceVlan_nodeParam || '{}'
                        createNetworkApplianceVlan_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkApplianceVlan_parameters.createNetworkApplianceVlan = createNetworkApplianceVlan_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkApplianceVlan_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkApplianceVlan(createNetworkApplianceVlan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceVlansSettings') {
                var getNetworkApplianceVlansSettings_parameters = [];
                var getNetworkApplianceVlansSettings_nodeParam;
                var getNetworkApplianceVlansSettings_nodeParamType;
                
                
                getNetworkApplianceVlansSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceVlansSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceVlansSettings_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceVlansSettings_nodeParamType is "str"');
                    getNetworkApplianceVlansSettings_parameters.networkId = getNetworkApplianceVlansSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceVlansSettings_nodeParamType is not "str"')
                    getNetworkApplianceVlansSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceVlansSettings(getNetworkApplianceVlansSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceVlansSettings') {
                var updateNetworkApplianceVlansSettings_parameters = [];
                var updateNetworkApplianceVlansSettings_nodeParam;
                var updateNetworkApplianceVlansSettings_nodeParamType;
                
                
                updateNetworkApplianceVlansSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceVlansSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceVlansSettings_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceVlansSettings_nodeParamType is "str"');
                    updateNetworkApplianceVlansSettings_parameters.networkId = updateNetworkApplianceVlansSettings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceVlansSettings_nodeParamType is not "str"')
                    updateNetworkApplianceVlansSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceVlansSettings_nodeParam = storedParamValsMap['updateNetworkApplianceVlansSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceVlansSettings");

                updateNetworkApplianceVlansSettings_nodeParamType = storedParamTypeMap['updateNetworkApplianceVlansSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceVlansSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceVlansSettings_parameters.updateNetworkApplianceVlansSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceVlansSettings_nodeParam === 'object'){
                        updateNetworkApplianceVlansSettings_parameters.updateNetworkApplianceVlansSettings = updateNetworkApplianceVlansSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceVlansSettings_nodeParam || '{}'
                        updateNetworkApplianceVlansSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceVlansSettings_parameters.updateNetworkApplianceVlansSettings = updateNetworkApplianceVlansSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceVlansSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceVlansSettings(updateNetworkApplianceVlansSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceVlan') {
                var getNetworkApplianceVlan_parameters = [];
                var getNetworkApplianceVlan_nodeParam;
                var getNetworkApplianceVlan_nodeParamType;
                
                
                getNetworkApplianceVlan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceVlan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceVlan_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceVlan_nodeParamType is "str"');
                    getNetworkApplianceVlan_parameters.networkId = getNetworkApplianceVlan_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceVlan_nodeParamType is not "str"')
                    getNetworkApplianceVlan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkApplianceVlan_nodeParam = storedParamValsMap['vlanId'] ||
                    RED.util.getMessageProperty(msg, "vlanId");

                getNetworkApplianceVlan_nodeParamType = storedParamTypeMap['vlanId'] ||
                    RED.util.getMessageProperty(msg, "vlanId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceVlan_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceVlan_nodeParamType is "str"');
                    getNetworkApplianceVlan_parameters.vlanId = getNetworkApplianceVlan_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceVlan_nodeParamType is not "str"')
                    getNetworkApplianceVlan_parameters.vlanId = RED.util.getMessageProperty(msg, "vlanId");
                }
                                result = client.getNetworkApplianceVlan(getNetworkApplianceVlan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceVlan') {
                var updateNetworkApplianceVlan_parameters = [];
                var updateNetworkApplianceVlan_nodeParam;
                var updateNetworkApplianceVlan_nodeParamType;
                
                
                updateNetworkApplianceVlan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceVlan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceVlan_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceVlan_nodeParamType is "str"');
                    updateNetworkApplianceVlan_parameters.networkId = updateNetworkApplianceVlan_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceVlan_nodeParamType is not "str"')
                    updateNetworkApplianceVlan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceVlan_nodeParam = storedParamValsMap['vlanId'] ||
                    RED.util.getMessageProperty(msg, "vlanId");

                updateNetworkApplianceVlan_nodeParamType = storedParamTypeMap['vlanId'] ||
                    RED.util.getMessageProperty(msg, "vlanId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceVlan_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceVlan_nodeParamType is "str"');
                    updateNetworkApplianceVlan_parameters.vlanId = updateNetworkApplianceVlan_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceVlan_nodeParamType is not "str"')
                    updateNetworkApplianceVlan_parameters.vlanId = RED.util.getMessageProperty(msg, "vlanId");
                }
                                
                updateNetworkApplianceVlan_nodeParam = storedParamValsMap['updateNetworkApplianceVlan'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceVlan");

                updateNetworkApplianceVlan_nodeParamType = storedParamTypeMap['updateNetworkApplianceVlan'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceVlan");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceVlan_parameters.updateNetworkApplianceVlan = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceVlan_nodeParam === 'object'){
                        updateNetworkApplianceVlan_parameters.updateNetworkApplianceVlan = updateNetworkApplianceVlan_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceVlan_nodeParam || '{}'
                        updateNetworkApplianceVlan_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceVlan_parameters.updateNetworkApplianceVlan = updateNetworkApplianceVlan_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceVlan_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceVlan(updateNetworkApplianceVlan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkApplianceVlan') {
                var deleteNetworkApplianceVlan_parameters = [];
                var deleteNetworkApplianceVlan_nodeParam;
                var deleteNetworkApplianceVlan_nodeParamType;
                
                
                deleteNetworkApplianceVlan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkApplianceVlan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkApplianceVlan_nodeParamType === 'str') {
                    //console.log('deleteNetworkApplianceVlan_nodeParamType is "str"');
                    deleteNetworkApplianceVlan_parameters.networkId = deleteNetworkApplianceVlan_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkApplianceVlan_nodeParamType is not "str"')
                    deleteNetworkApplianceVlan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkApplianceVlan_nodeParam = storedParamValsMap['vlanId'] ||
                    RED.util.getMessageProperty(msg, "vlanId");

                deleteNetworkApplianceVlan_nodeParamType = storedParamTypeMap['vlanId'] ||
                    RED.util.getMessageProperty(msg, "vlanId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkApplianceVlan_nodeParamType === 'str') {
                    //console.log('deleteNetworkApplianceVlan_nodeParamType is "str"');
                    deleteNetworkApplianceVlan_parameters.vlanId = deleteNetworkApplianceVlan_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkApplianceVlan_nodeParamType is not "str"')
                    deleteNetworkApplianceVlan_parameters.vlanId = RED.util.getMessageProperty(msg, "vlanId");
                }
                                result = client.deleteNetworkApplianceVlan(deleteNetworkApplianceVlan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceVpnBgp') {
                var getNetworkApplianceVpnBgp_parameters = [];
                var getNetworkApplianceVpnBgp_nodeParam;
                var getNetworkApplianceVpnBgp_nodeParamType;
                
                
                getNetworkApplianceVpnBgp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceVpnBgp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceVpnBgp_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceVpnBgp_nodeParamType is "str"');
                    getNetworkApplianceVpnBgp_parameters.networkId = getNetworkApplianceVpnBgp_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceVpnBgp_nodeParamType is not "str"')
                    getNetworkApplianceVpnBgp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceVpnBgp(getNetworkApplianceVpnBgp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceVpnBgp') {
                var updateNetworkApplianceVpnBgp_parameters = [];
                var updateNetworkApplianceVpnBgp_nodeParam;
                var updateNetworkApplianceVpnBgp_nodeParamType;
                
                
                updateNetworkApplianceVpnBgp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceVpnBgp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceVpnBgp_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceVpnBgp_nodeParamType is "str"');
                    updateNetworkApplianceVpnBgp_parameters.networkId = updateNetworkApplianceVpnBgp_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceVpnBgp_nodeParamType is not "str"')
                    updateNetworkApplianceVpnBgp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceVpnBgp_nodeParam = storedParamValsMap['updateNetworkApplianceVpnBgp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceVpnBgp");

                updateNetworkApplianceVpnBgp_nodeParamType = storedParamTypeMap['updateNetworkApplianceVpnBgp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceVpnBgp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceVpnBgp_parameters.updateNetworkApplianceVpnBgp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceVpnBgp_nodeParam === 'object'){
                        updateNetworkApplianceVpnBgp_parameters.updateNetworkApplianceVpnBgp = updateNetworkApplianceVpnBgp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceVpnBgp_nodeParam || '{}'
                        updateNetworkApplianceVpnBgp_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceVpnBgp_parameters.updateNetworkApplianceVpnBgp = updateNetworkApplianceVpnBgp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceVpnBgp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceVpnBgp(updateNetworkApplianceVpnBgp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceVpnSiteToSiteVpn') {
                var getNetworkApplianceVpnSiteToSiteVpn_parameters = [];
                var getNetworkApplianceVpnSiteToSiteVpn_nodeParam;
                var getNetworkApplianceVpnSiteToSiteVpn_nodeParamType;
                
                
                getNetworkApplianceVpnSiteToSiteVpn_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceVpnSiteToSiteVpn_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceVpnSiteToSiteVpn_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceVpnSiteToSiteVpn_nodeParamType is "str"');
                    getNetworkApplianceVpnSiteToSiteVpn_parameters.networkId = getNetworkApplianceVpnSiteToSiteVpn_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceVpnSiteToSiteVpn_nodeParamType is not "str"')
                    getNetworkApplianceVpnSiteToSiteVpn_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceVpnSiteToSiteVpn(getNetworkApplianceVpnSiteToSiteVpn_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceVpnSiteToSiteVpn') {
                var updateNetworkApplianceVpnSiteToSiteVpn_parameters = [];
                var updateNetworkApplianceVpnSiteToSiteVpn_nodeParam;
                var updateNetworkApplianceVpnSiteToSiteVpn_nodeParamType;
                
                
                updateNetworkApplianceVpnSiteToSiteVpn_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceVpnSiteToSiteVpn_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceVpnSiteToSiteVpn_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceVpnSiteToSiteVpn_nodeParamType is "str"');
                    updateNetworkApplianceVpnSiteToSiteVpn_parameters.networkId = updateNetworkApplianceVpnSiteToSiteVpn_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceVpnSiteToSiteVpn_nodeParamType is not "str"')
                    updateNetworkApplianceVpnSiteToSiteVpn_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceVpnSiteToSiteVpn_nodeParam = storedParamValsMap['updateNetworkApplianceVpnSiteToSiteVpn'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceVpnSiteToSiteVpn");

                updateNetworkApplianceVpnSiteToSiteVpn_nodeParamType = storedParamTypeMap['updateNetworkApplianceVpnSiteToSiteVpn'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceVpnSiteToSiteVpn");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceVpnSiteToSiteVpn_parameters.updateNetworkApplianceVpnSiteToSiteVpn = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceVpnSiteToSiteVpn_nodeParam === 'object'){
                        updateNetworkApplianceVpnSiteToSiteVpn_parameters.updateNetworkApplianceVpnSiteToSiteVpn = updateNetworkApplianceVpnSiteToSiteVpn_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceVpnSiteToSiteVpn_nodeParam || '{}'
                        updateNetworkApplianceVpnSiteToSiteVpn_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceVpnSiteToSiteVpn_parameters.updateNetworkApplianceVpnSiteToSiteVpn = updateNetworkApplianceVpnSiteToSiteVpn_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceVpnSiteToSiteVpn_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceVpnSiteToSiteVpn(updateNetworkApplianceVpnSiteToSiteVpn_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkApplianceWarmSpare') {
                var getNetworkApplianceWarmSpare_parameters = [];
                var getNetworkApplianceWarmSpare_nodeParam;
                var getNetworkApplianceWarmSpare_nodeParamType;
                
                
                getNetworkApplianceWarmSpare_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkApplianceWarmSpare_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkApplianceWarmSpare_nodeParamType === 'str') {
                    //console.log('getNetworkApplianceWarmSpare_nodeParamType is "str"');
                    getNetworkApplianceWarmSpare_parameters.networkId = getNetworkApplianceWarmSpare_nodeParam || undefined;
                } else {
                    //console.log('getNetworkApplianceWarmSpare_nodeParamType is not "str"')
                    getNetworkApplianceWarmSpare_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkApplianceWarmSpare(getNetworkApplianceWarmSpare_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkApplianceWarmSpare') {
                var updateNetworkApplianceWarmSpare_parameters = [];
                var updateNetworkApplianceWarmSpare_nodeParam;
                var updateNetworkApplianceWarmSpare_nodeParamType;
                
                
                updateNetworkApplianceWarmSpare_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkApplianceWarmSpare_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkApplianceWarmSpare_nodeParamType === 'str') {
                    //console.log('updateNetworkApplianceWarmSpare_nodeParamType is "str"');
                    updateNetworkApplianceWarmSpare_parameters.networkId = updateNetworkApplianceWarmSpare_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkApplianceWarmSpare_nodeParamType is not "str"')
                    updateNetworkApplianceWarmSpare_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkApplianceWarmSpare_nodeParam = storedParamValsMap['updateNetworkApplianceWarmSpare'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceWarmSpare");

                updateNetworkApplianceWarmSpare_nodeParamType = storedParamTypeMap['updateNetworkApplianceWarmSpare'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkApplianceWarmSpare");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkApplianceWarmSpare_parameters.updateNetworkApplianceWarmSpare = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkApplianceWarmSpare_nodeParam === 'object'){
                        updateNetworkApplianceWarmSpare_parameters.updateNetworkApplianceWarmSpare = updateNetworkApplianceWarmSpare_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkApplianceWarmSpare_nodeParam || '{}'
                        updateNetworkApplianceWarmSpare_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkApplianceWarmSpare_parameters.updateNetworkApplianceWarmSpare = updateNetworkApplianceWarmSpare_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkApplianceWarmSpare_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkApplianceWarmSpare(updateNetworkApplianceWarmSpare_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'swapNetworkApplianceWarmSpare') {
                var swapNetworkApplianceWarmSpare_parameters = [];
                var swapNetworkApplianceWarmSpare_nodeParam;
                var swapNetworkApplianceWarmSpare_nodeParamType;
                
                
                swapNetworkApplianceWarmSpare_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                swapNetworkApplianceWarmSpare_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (swapNetworkApplianceWarmSpare_nodeParamType === 'str') {
                    //console.log('swapNetworkApplianceWarmSpare_nodeParamType is "str"');
                    swapNetworkApplianceWarmSpare_parameters.networkId = swapNetworkApplianceWarmSpare_nodeParam || undefined;
                } else {
                    //console.log('swapNetworkApplianceWarmSpare_nodeParamType is not "str"')
                    swapNetworkApplianceWarmSpare_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.swapNetworkApplianceWarmSpare(swapNetworkApplianceWarmSpare_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'bindNetwork') {
                var bindNetwork_parameters = [];
                var bindNetwork_nodeParam;
                var bindNetwork_nodeParamType;
                
                
                bindNetwork_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                bindNetwork_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (bindNetwork_nodeParamType === 'str') {
                    //console.log('bindNetwork_nodeParamType is "str"');
                    bindNetwork_parameters.networkId = bindNetwork_nodeParam || undefined;
                } else {
                    //console.log('bindNetwork_nodeParamType is not "str"')
                    bindNetwork_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                bindNetwork_nodeParam = storedParamValsMap['bindNetwork'] ||
                    RED.util.getMessageProperty(msg, "bindNetwork");

                bindNetwork_nodeParamType = storedParamTypeMap['bindNetwork'] ||
                    RED.util.getMessageProperty(msg, "bindNetwork");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        bindNetwork_parameters.bindNetwork = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof bindNetwork_nodeParam === 'object'){
                        bindNetwork_parameters.bindNetwork = bindNetwork_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = bindNetwork_nodeParam || '{}'
                        bindNetwork_nodeParam = JSON.parse(nodeParam) ; 
                        bindNetwork_parameters.bindNetwork = bindNetwork_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof bindNetwork_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.bindNetwork(bindNetwork_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkBluetoothClients') {
                var getNetworkBluetoothClients_parameters = [];
                var getNetworkBluetoothClients_nodeParam;
                var getNetworkBluetoothClients_nodeParamType;
                
                
                getNetworkBluetoothClients_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkBluetoothClients_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClients_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClients_nodeParamType is "str"');
                    getNetworkBluetoothClients_parameters.networkId = getNetworkBluetoothClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClients_nodeParamType is not "str"')
                    getNetworkBluetoothClients_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkBluetoothClients_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkBluetoothClients_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClients_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClients_nodeParamType is "str"');
                    getNetworkBluetoothClients_parameters.t0 = getNetworkBluetoothClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClients_nodeParamType is not "str"')
                    getNetworkBluetoothClients_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkBluetoothClients_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkBluetoothClients_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClients_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClients_nodeParamType is "str"');
                    getNetworkBluetoothClients_parameters.timespan = getNetworkBluetoothClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClients_nodeParamType is not "str"')
                    getNetworkBluetoothClients_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkBluetoothClients_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkBluetoothClients_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClients_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClients_nodeParamType is "str"');
                    getNetworkBluetoothClients_parameters.perPage = getNetworkBluetoothClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClients_nodeParamType is not "str"')
                    getNetworkBluetoothClients_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkBluetoothClients_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkBluetoothClients_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClients_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClients_nodeParamType is "str"');
                    getNetworkBluetoothClients_parameters.startingAfter = getNetworkBluetoothClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClients_nodeParamType is not "str"')
                    getNetworkBluetoothClients_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkBluetoothClients_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkBluetoothClients_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClients_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClients_nodeParamType is "str"');
                    getNetworkBluetoothClients_parameters.endingBefore = getNetworkBluetoothClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClients_nodeParamType is not "str"')
                    getNetworkBluetoothClients_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getNetworkBluetoothClients_nodeParam = storedParamValsMap['includeConnectivityHistory'] ||
                    RED.util.getMessageProperty(msg, "includeConnectivityHistory");

                getNetworkBluetoothClients_nodeParamType = storedParamTypeMap['includeConnectivityHistory'] ||
                    RED.util.getMessageProperty(msg, "includeConnectivityHistory");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClients_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClients_nodeParamType is "str"');
                    getNetworkBluetoothClients_parameters.includeConnectivityHistory = getNetworkBluetoothClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClients_nodeParamType is not "str"')
                    getNetworkBluetoothClients_parameters.includeConnectivityHistory = RED.util.getMessageProperty(msg, "includeConnectivityHistory");
                }
                                result = client.getNetworkBluetoothClients(getNetworkBluetoothClients_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkBluetoothClient') {
                var getNetworkBluetoothClient_parameters = [];
                var getNetworkBluetoothClient_nodeParam;
                var getNetworkBluetoothClient_nodeParamType;
                
                
                getNetworkBluetoothClient_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkBluetoothClient_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClient_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClient_nodeParamType is "str"');
                    getNetworkBluetoothClient_parameters.networkId = getNetworkBluetoothClient_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClient_nodeParamType is not "str"')
                    getNetworkBluetoothClient_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkBluetoothClient_nodeParam = storedParamValsMap['bluetoothClientId'] ||
                    RED.util.getMessageProperty(msg, "bluetoothClientId");

                getNetworkBluetoothClient_nodeParamType = storedParamTypeMap['bluetoothClientId'] ||
                    RED.util.getMessageProperty(msg, "bluetoothClientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClient_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClient_nodeParamType is "str"');
                    getNetworkBluetoothClient_parameters.bluetoothClientId = getNetworkBluetoothClient_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClient_nodeParamType is not "str"')
                    getNetworkBluetoothClient_parameters.bluetoothClientId = RED.util.getMessageProperty(msg, "bluetoothClientId");
                }
                                
                getNetworkBluetoothClient_nodeParam = storedParamValsMap['includeConnectivityHistory'] ||
                    RED.util.getMessageProperty(msg, "includeConnectivityHistory");

                getNetworkBluetoothClient_nodeParamType = storedParamTypeMap['includeConnectivityHistory'] ||
                    RED.util.getMessageProperty(msg, "includeConnectivityHistory");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClient_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClient_nodeParamType is "str"');
                    getNetworkBluetoothClient_parameters.includeConnectivityHistory = getNetworkBluetoothClient_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClient_nodeParamType is not "str"')
                    getNetworkBluetoothClient_parameters.includeConnectivityHistory = RED.util.getMessageProperty(msg, "includeConnectivityHistory");
                }
                                
                getNetworkBluetoothClient_nodeParam = storedParamValsMap['connectivityHistoryTimespan'] ||
                    RED.util.getMessageProperty(msg, "connectivityHistoryTimespan");

                getNetworkBluetoothClient_nodeParamType = storedParamTypeMap['connectivityHistoryTimespan'] ||
                    RED.util.getMessageProperty(msg, "connectivityHistoryTimespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkBluetoothClient_nodeParamType === 'str') {
                    //console.log('getNetworkBluetoothClient_nodeParamType is "str"');
                    getNetworkBluetoothClient_parameters.connectivityHistoryTimespan = getNetworkBluetoothClient_nodeParam || undefined;
                } else {
                    //console.log('getNetworkBluetoothClient_nodeParamType is not "str"')
                    getNetworkBluetoothClient_parameters.connectivityHistoryTimespan = RED.util.getMessageProperty(msg, "connectivityHistoryTimespan");
                }
                                result = client.getNetworkBluetoothClient(getNetworkBluetoothClient_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkCameraQualityRetentionProfiles') {
                var getNetworkCameraQualityRetentionProfiles_parameters = [];
                var getNetworkCameraQualityRetentionProfiles_nodeParam;
                var getNetworkCameraQualityRetentionProfiles_nodeParamType;
                
                
                getNetworkCameraQualityRetentionProfiles_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkCameraQualityRetentionProfiles_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkCameraQualityRetentionProfiles_nodeParamType === 'str') {
                    //console.log('getNetworkCameraQualityRetentionProfiles_nodeParamType is "str"');
                    getNetworkCameraQualityRetentionProfiles_parameters.networkId = getNetworkCameraQualityRetentionProfiles_nodeParam || undefined;
                } else {
                    //console.log('getNetworkCameraQualityRetentionProfiles_nodeParamType is not "str"')
                    getNetworkCameraQualityRetentionProfiles_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkCameraQualityRetentionProfiles(getNetworkCameraQualityRetentionProfiles_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkCameraQualityRetentionProfile') {
                var createNetworkCameraQualityRetentionProfile_parameters = [];
                var createNetworkCameraQualityRetentionProfile_nodeParam;
                var createNetworkCameraQualityRetentionProfile_nodeParamType;
                
                
                createNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkCameraQualityRetentionProfile_nodeParamType === 'str') {
                    //console.log('createNetworkCameraQualityRetentionProfile_nodeParamType is "str"');
                    createNetworkCameraQualityRetentionProfile_parameters.networkId = createNetworkCameraQualityRetentionProfile_nodeParam || undefined;
                } else {
                    //console.log('createNetworkCameraQualityRetentionProfile_nodeParamType is not "str"')
                    createNetworkCameraQualityRetentionProfile_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['createNetworkCameraQualityRetentionProfile'] ||
                    RED.util.getMessageProperty(msg, "createNetworkCameraQualityRetentionProfile");

                createNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['createNetworkCameraQualityRetentionProfile'] ||
                    RED.util.getMessageProperty(msg, "createNetworkCameraQualityRetentionProfile");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkCameraQualityRetentionProfile_parameters.createNetworkCameraQualityRetentionProfile = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkCameraQualityRetentionProfile_nodeParam === 'object'){
                        createNetworkCameraQualityRetentionProfile_parameters.createNetworkCameraQualityRetentionProfile = createNetworkCameraQualityRetentionProfile_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkCameraQualityRetentionProfile_nodeParam || '{}'
                        createNetworkCameraQualityRetentionProfile_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkCameraQualityRetentionProfile_parameters.createNetworkCameraQualityRetentionProfile = createNetworkCameraQualityRetentionProfile_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkCameraQualityRetentionProfile_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkCameraQualityRetentionProfile(createNetworkCameraQualityRetentionProfile_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkCameraQualityRetentionProfile') {
                var getNetworkCameraQualityRetentionProfile_parameters = [];
                var getNetworkCameraQualityRetentionProfile_nodeParam;
                var getNetworkCameraQualityRetentionProfile_nodeParamType;
                
                
                getNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkCameraQualityRetentionProfile_nodeParamType === 'str') {
                    //console.log('getNetworkCameraQualityRetentionProfile_nodeParamType is "str"');
                    getNetworkCameraQualityRetentionProfile_parameters.networkId = getNetworkCameraQualityRetentionProfile_nodeParam || undefined;
                } else {
                    //console.log('getNetworkCameraQualityRetentionProfile_nodeParamType is not "str"')
                    getNetworkCameraQualityRetentionProfile_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['qualityRetentionProfileId'] ||
                    RED.util.getMessageProperty(msg, "qualityRetentionProfileId");

                getNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['qualityRetentionProfileId'] ||
                    RED.util.getMessageProperty(msg, "qualityRetentionProfileId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkCameraQualityRetentionProfile_nodeParamType === 'str') {
                    //console.log('getNetworkCameraQualityRetentionProfile_nodeParamType is "str"');
                    getNetworkCameraQualityRetentionProfile_parameters.qualityRetentionProfileId = getNetworkCameraQualityRetentionProfile_nodeParam || undefined;
                } else {
                    //console.log('getNetworkCameraQualityRetentionProfile_nodeParamType is not "str"')
                    getNetworkCameraQualityRetentionProfile_parameters.qualityRetentionProfileId = RED.util.getMessageProperty(msg, "qualityRetentionProfileId");
                }
                                result = client.getNetworkCameraQualityRetentionProfile(getNetworkCameraQualityRetentionProfile_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkCameraQualityRetentionProfile') {
                var updateNetworkCameraQualityRetentionProfile_parameters = [];
                var updateNetworkCameraQualityRetentionProfile_nodeParam;
                var updateNetworkCameraQualityRetentionProfile_nodeParamType;
                
                
                updateNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkCameraQualityRetentionProfile_nodeParamType === 'str') {
                    //console.log('updateNetworkCameraQualityRetentionProfile_nodeParamType is "str"');
                    updateNetworkCameraQualityRetentionProfile_parameters.networkId = updateNetworkCameraQualityRetentionProfile_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkCameraQualityRetentionProfile_nodeParamType is not "str"')
                    updateNetworkCameraQualityRetentionProfile_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['qualityRetentionProfileId'] ||
                    RED.util.getMessageProperty(msg, "qualityRetentionProfileId");

                updateNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['qualityRetentionProfileId'] ||
                    RED.util.getMessageProperty(msg, "qualityRetentionProfileId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkCameraQualityRetentionProfile_nodeParamType === 'str') {
                    //console.log('updateNetworkCameraQualityRetentionProfile_nodeParamType is "str"');
                    updateNetworkCameraQualityRetentionProfile_parameters.qualityRetentionProfileId = updateNetworkCameraQualityRetentionProfile_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkCameraQualityRetentionProfile_nodeParamType is not "str"')
                    updateNetworkCameraQualityRetentionProfile_parameters.qualityRetentionProfileId = RED.util.getMessageProperty(msg, "qualityRetentionProfileId");
                }
                                
                updateNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['updateNetworkCameraQualityRetentionProfile'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCameraQualityRetentionProfile");

                updateNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['updateNetworkCameraQualityRetentionProfile'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCameraQualityRetentionProfile");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkCameraQualityRetentionProfile_parameters.updateNetworkCameraQualityRetentionProfile = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkCameraQualityRetentionProfile_nodeParam === 'object'){
                        updateNetworkCameraQualityRetentionProfile_parameters.updateNetworkCameraQualityRetentionProfile = updateNetworkCameraQualityRetentionProfile_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkCameraQualityRetentionProfile_nodeParam || '{}'
                        updateNetworkCameraQualityRetentionProfile_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkCameraQualityRetentionProfile_parameters.updateNetworkCameraQualityRetentionProfile = updateNetworkCameraQualityRetentionProfile_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkCameraQualityRetentionProfile_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkCameraQualityRetentionProfile(updateNetworkCameraQualityRetentionProfile_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkCameraQualityRetentionProfile') {
                var deleteNetworkCameraQualityRetentionProfile_parameters = [];
                var deleteNetworkCameraQualityRetentionProfile_nodeParam;
                var deleteNetworkCameraQualityRetentionProfile_nodeParamType;
                
                
                deleteNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkCameraQualityRetentionProfile_nodeParamType === 'str') {
                    //console.log('deleteNetworkCameraQualityRetentionProfile_nodeParamType is "str"');
                    deleteNetworkCameraQualityRetentionProfile_parameters.networkId = deleteNetworkCameraQualityRetentionProfile_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkCameraQualityRetentionProfile_nodeParamType is not "str"')
                    deleteNetworkCameraQualityRetentionProfile_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkCameraQualityRetentionProfile_nodeParam = storedParamValsMap['qualityRetentionProfileId'] ||
                    RED.util.getMessageProperty(msg, "qualityRetentionProfileId");

                deleteNetworkCameraQualityRetentionProfile_nodeParamType = storedParamTypeMap['qualityRetentionProfileId'] ||
                    RED.util.getMessageProperty(msg, "qualityRetentionProfileId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkCameraQualityRetentionProfile_nodeParamType === 'str') {
                    //console.log('deleteNetworkCameraQualityRetentionProfile_nodeParamType is "str"');
                    deleteNetworkCameraQualityRetentionProfile_parameters.qualityRetentionProfileId = deleteNetworkCameraQualityRetentionProfile_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkCameraQualityRetentionProfile_nodeParamType is not "str"')
                    deleteNetworkCameraQualityRetentionProfile_parameters.qualityRetentionProfileId = RED.util.getMessageProperty(msg, "qualityRetentionProfileId");
                }
                                result = client.deleteNetworkCameraQualityRetentionProfile(deleteNetworkCameraQualityRetentionProfile_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkCameraSchedules') {
                var getNetworkCameraSchedules_parameters = [];
                var getNetworkCameraSchedules_nodeParam;
                var getNetworkCameraSchedules_nodeParamType;
                
                
                getNetworkCameraSchedules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkCameraSchedules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkCameraSchedules_nodeParamType === 'str') {
                    //console.log('getNetworkCameraSchedules_nodeParamType is "str"');
                    getNetworkCameraSchedules_parameters.networkId = getNetworkCameraSchedules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkCameraSchedules_nodeParamType is not "str"')
                    getNetworkCameraSchedules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkCameraSchedules(getNetworkCameraSchedules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkCellularGatewayConnectivityMonitoringDestinations') {
                var getNetworkCellularGatewayConnectivityMonitoringDestinations_parameters = [];
                var getNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam;
                var getNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType;
                
                
                getNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType === 'str') {
                    //console.log('getNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType is "str"');
                    getNetworkCellularGatewayConnectivityMonitoringDestinations_parameters.networkId = getNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam || undefined;
                } else {
                    //console.log('getNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType is not "str"')
                    getNetworkCellularGatewayConnectivityMonitoringDestinations_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkCellularGatewayConnectivityMonitoringDestinations(getNetworkCellularGatewayConnectivityMonitoringDestinations_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkCellularGatewayConnectivityMonitoringDestinations') {
                var updateNetworkCellularGatewayConnectivityMonitoringDestinations_parameters = [];
                var updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam;
                var updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType;
                
                
                updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType === 'str') {
                    //console.log('updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType is "str"');
                    updateNetworkCellularGatewayConnectivityMonitoringDestinations_parameters.networkId = updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType is not "str"')
                    updateNetworkCellularGatewayConnectivityMonitoringDestinations_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam = storedParamValsMap['updateNetworkCellularGatewayConnectivityMonitoringDestinations'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCellularGatewayConnectivityMonitoringDestinations");

                updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParamType = storedParamTypeMap['updateNetworkCellularGatewayConnectivityMonitoringDestinations'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCellularGatewayConnectivityMonitoringDestinations");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkCellularGatewayConnectivityMonitoringDestinations_parameters.updateNetworkCellularGatewayConnectivityMonitoringDestinations = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam === 'object'){
                        updateNetworkCellularGatewayConnectivityMonitoringDestinations_parameters.updateNetworkCellularGatewayConnectivityMonitoringDestinations = updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam || '{}'
                        updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkCellularGatewayConnectivityMonitoringDestinations_parameters.updateNetworkCellularGatewayConnectivityMonitoringDestinations = updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkCellularGatewayConnectivityMonitoringDestinations_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkCellularGatewayConnectivityMonitoringDestinations(updateNetworkCellularGatewayConnectivityMonitoringDestinations_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkCellularGatewayDhcp') {
                var getNetworkCellularGatewayDhcp_parameters = [];
                var getNetworkCellularGatewayDhcp_nodeParam;
                var getNetworkCellularGatewayDhcp_nodeParamType;
                
                
                getNetworkCellularGatewayDhcp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkCellularGatewayDhcp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkCellularGatewayDhcp_nodeParamType === 'str') {
                    //console.log('getNetworkCellularGatewayDhcp_nodeParamType is "str"');
                    getNetworkCellularGatewayDhcp_parameters.networkId = getNetworkCellularGatewayDhcp_nodeParam || undefined;
                } else {
                    //console.log('getNetworkCellularGatewayDhcp_nodeParamType is not "str"')
                    getNetworkCellularGatewayDhcp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkCellularGatewayDhcp(getNetworkCellularGatewayDhcp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkCellularGatewayDhcp') {
                var updateNetworkCellularGatewayDhcp_parameters = [];
                var updateNetworkCellularGatewayDhcp_nodeParam;
                var updateNetworkCellularGatewayDhcp_nodeParamType;
                
                
                updateNetworkCellularGatewayDhcp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkCellularGatewayDhcp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkCellularGatewayDhcp_nodeParamType === 'str') {
                    //console.log('updateNetworkCellularGatewayDhcp_nodeParamType is "str"');
                    updateNetworkCellularGatewayDhcp_parameters.networkId = updateNetworkCellularGatewayDhcp_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkCellularGatewayDhcp_nodeParamType is not "str"')
                    updateNetworkCellularGatewayDhcp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkCellularGatewayDhcp_nodeParam = storedParamValsMap['updateNetworkCellularGatewayDhcp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCellularGatewayDhcp");

                updateNetworkCellularGatewayDhcp_nodeParamType = storedParamTypeMap['updateNetworkCellularGatewayDhcp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCellularGatewayDhcp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkCellularGatewayDhcp_parameters.updateNetworkCellularGatewayDhcp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkCellularGatewayDhcp_nodeParam === 'object'){
                        updateNetworkCellularGatewayDhcp_parameters.updateNetworkCellularGatewayDhcp = updateNetworkCellularGatewayDhcp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkCellularGatewayDhcp_nodeParam || '{}'
                        updateNetworkCellularGatewayDhcp_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkCellularGatewayDhcp_parameters.updateNetworkCellularGatewayDhcp = updateNetworkCellularGatewayDhcp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkCellularGatewayDhcp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkCellularGatewayDhcp(updateNetworkCellularGatewayDhcp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkCellularGatewaySubnetPool') {
                var getNetworkCellularGatewaySubnetPool_parameters = [];
                var getNetworkCellularGatewaySubnetPool_nodeParam;
                var getNetworkCellularGatewaySubnetPool_nodeParamType;
                
                
                getNetworkCellularGatewaySubnetPool_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkCellularGatewaySubnetPool_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkCellularGatewaySubnetPool_nodeParamType === 'str') {
                    //console.log('getNetworkCellularGatewaySubnetPool_nodeParamType is "str"');
                    getNetworkCellularGatewaySubnetPool_parameters.networkId = getNetworkCellularGatewaySubnetPool_nodeParam || undefined;
                } else {
                    //console.log('getNetworkCellularGatewaySubnetPool_nodeParamType is not "str"')
                    getNetworkCellularGatewaySubnetPool_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkCellularGatewaySubnetPool(getNetworkCellularGatewaySubnetPool_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkCellularGatewaySubnetPool') {
                var updateNetworkCellularGatewaySubnetPool_parameters = [];
                var updateNetworkCellularGatewaySubnetPool_nodeParam;
                var updateNetworkCellularGatewaySubnetPool_nodeParamType;
                
                
                updateNetworkCellularGatewaySubnetPool_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkCellularGatewaySubnetPool_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkCellularGatewaySubnetPool_nodeParamType === 'str') {
                    //console.log('updateNetworkCellularGatewaySubnetPool_nodeParamType is "str"');
                    updateNetworkCellularGatewaySubnetPool_parameters.networkId = updateNetworkCellularGatewaySubnetPool_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkCellularGatewaySubnetPool_nodeParamType is not "str"')
                    updateNetworkCellularGatewaySubnetPool_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkCellularGatewaySubnetPool_nodeParam = storedParamValsMap['updateNetworkCellularGatewaySubnetPool'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCellularGatewaySubnetPool");

                updateNetworkCellularGatewaySubnetPool_nodeParamType = storedParamTypeMap['updateNetworkCellularGatewaySubnetPool'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCellularGatewaySubnetPool");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkCellularGatewaySubnetPool_parameters.updateNetworkCellularGatewaySubnetPool = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkCellularGatewaySubnetPool_nodeParam === 'object'){
                        updateNetworkCellularGatewaySubnetPool_parameters.updateNetworkCellularGatewaySubnetPool = updateNetworkCellularGatewaySubnetPool_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkCellularGatewaySubnetPool_nodeParam || '{}'
                        updateNetworkCellularGatewaySubnetPool_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkCellularGatewaySubnetPool_parameters.updateNetworkCellularGatewaySubnetPool = updateNetworkCellularGatewaySubnetPool_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkCellularGatewaySubnetPool_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkCellularGatewaySubnetPool(updateNetworkCellularGatewaySubnetPool_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkCellularGatewayUplink') {
                var getNetworkCellularGatewayUplink_parameters = [];
                var getNetworkCellularGatewayUplink_nodeParam;
                var getNetworkCellularGatewayUplink_nodeParamType;
                
                
                getNetworkCellularGatewayUplink_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkCellularGatewayUplink_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkCellularGatewayUplink_nodeParamType === 'str') {
                    //console.log('getNetworkCellularGatewayUplink_nodeParamType is "str"');
                    getNetworkCellularGatewayUplink_parameters.networkId = getNetworkCellularGatewayUplink_nodeParam || undefined;
                } else {
                    //console.log('getNetworkCellularGatewayUplink_nodeParamType is not "str"')
                    getNetworkCellularGatewayUplink_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkCellularGatewayUplink(getNetworkCellularGatewayUplink_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkCellularGatewayUplink') {
                var updateNetworkCellularGatewayUplink_parameters = [];
                var updateNetworkCellularGatewayUplink_nodeParam;
                var updateNetworkCellularGatewayUplink_nodeParamType;
                
                
                updateNetworkCellularGatewayUplink_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkCellularGatewayUplink_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkCellularGatewayUplink_nodeParamType === 'str') {
                    //console.log('updateNetworkCellularGatewayUplink_nodeParamType is "str"');
                    updateNetworkCellularGatewayUplink_parameters.networkId = updateNetworkCellularGatewayUplink_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkCellularGatewayUplink_nodeParamType is not "str"')
                    updateNetworkCellularGatewayUplink_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkCellularGatewayUplink_nodeParam = storedParamValsMap['updateNetworkCellularGatewayUplink'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCellularGatewayUplink");

                updateNetworkCellularGatewayUplink_nodeParamType = storedParamTypeMap['updateNetworkCellularGatewayUplink'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkCellularGatewayUplink");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkCellularGatewayUplink_parameters.updateNetworkCellularGatewayUplink = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkCellularGatewayUplink_nodeParam === 'object'){
                        updateNetworkCellularGatewayUplink_parameters.updateNetworkCellularGatewayUplink = updateNetworkCellularGatewayUplink_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkCellularGatewayUplink_nodeParam || '{}'
                        updateNetworkCellularGatewayUplink_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkCellularGatewayUplink_parameters.updateNetworkCellularGatewayUplink = updateNetworkCellularGatewayUplink_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkCellularGatewayUplink_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkCellularGatewayUplink(updateNetworkCellularGatewayUplink_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkClients') {
                var getNetworkClients_parameters = [];
                var getNetworkClients_nodeParam;
                var getNetworkClients_nodeParamType;
                
                
                getNetworkClients_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkClients_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClients_nodeParamType === 'str') {
                    //console.log('getNetworkClients_nodeParamType is "str"');
                    getNetworkClients_parameters.networkId = getNetworkClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClients_nodeParamType is not "str"')
                    getNetworkClients_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkClients_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkClients_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClients_nodeParamType === 'str') {
                    //console.log('getNetworkClients_nodeParamType is "str"');
                    getNetworkClients_parameters.t0 = getNetworkClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClients_nodeParamType is not "str"')
                    getNetworkClients_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkClients_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkClients_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClients_nodeParamType === 'str') {
                    //console.log('getNetworkClients_nodeParamType is "str"');
                    getNetworkClients_parameters.timespan = getNetworkClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClients_nodeParamType is not "str"')
                    getNetworkClients_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkClients_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkClients_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClients_nodeParamType === 'str') {
                    //console.log('getNetworkClients_nodeParamType is "str"');
                    getNetworkClients_parameters.perPage = getNetworkClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClients_nodeParamType is not "str"')
                    getNetworkClients_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkClients_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkClients_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClients_nodeParamType === 'str') {
                    //console.log('getNetworkClients_nodeParamType is "str"');
                    getNetworkClients_parameters.startingAfter = getNetworkClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClients_nodeParamType is not "str"')
                    getNetworkClients_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkClients_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkClients_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClients_nodeParamType === 'str') {
                    //console.log('getNetworkClients_nodeParamType is "str"');
                    getNetworkClients_parameters.endingBefore = getNetworkClients_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClients_nodeParamType is not "str"')
                    getNetworkClients_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkClients(getNetworkClients_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkClientsApplicationUsage') {
                var getNetworkClientsApplicationUsage_parameters = [];
                var getNetworkClientsApplicationUsage_nodeParam;
                var getNetworkClientsApplicationUsage_nodeParamType;
                
                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.networkId = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['clients'] ||
                    RED.util.getMessageProperty(msg, "clients");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['clients'] ||
                    RED.util.getMessageProperty(msg, "clients");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.clients = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.clients = RED.util.getMessageProperty(msg, "clients");
                }
                                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['ssidNumber'] ||
                    RED.util.getMessageProperty(msg, "ssidNumber");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['ssidNumber'] ||
                    RED.util.getMessageProperty(msg, "ssidNumber");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.ssidNumber = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.ssidNumber = RED.util.getMessageProperty(msg, "ssidNumber");
                }
                                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.perPage = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.startingAfter = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.endingBefore = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.t0 = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.t1 = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkClientsApplicationUsage_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkClientsApplicationUsage_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsApplicationUsage_nodeParamType === 'str') {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is "str"');
                    getNetworkClientsApplicationUsage_parameters.timespan = getNetworkClientsApplicationUsage_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsApplicationUsage_nodeParamType is not "str"')
                    getNetworkClientsApplicationUsage_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getNetworkClientsApplicationUsage(getNetworkClientsApplicationUsage_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'provisionNetworkClients') {
                var provisionNetworkClients_parameters = [];
                var provisionNetworkClients_nodeParam;
                var provisionNetworkClients_nodeParamType;
                
                
                provisionNetworkClients_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                provisionNetworkClients_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (provisionNetworkClients_nodeParamType === 'str') {
                    //console.log('provisionNetworkClients_nodeParamType is "str"');
                    provisionNetworkClients_parameters.networkId = provisionNetworkClients_nodeParam || undefined;
                } else {
                    //console.log('provisionNetworkClients_nodeParamType is not "str"')
                    provisionNetworkClients_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                provisionNetworkClients_nodeParam = storedParamValsMap['provisionNetworkClients'] ||
                    RED.util.getMessageProperty(msg, "provisionNetworkClients");

                provisionNetworkClients_nodeParamType = storedParamTypeMap['provisionNetworkClients'] ||
                    RED.util.getMessageProperty(msg, "provisionNetworkClients");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        provisionNetworkClients_parameters.provisionNetworkClients = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof provisionNetworkClients_nodeParam === 'object'){
                        provisionNetworkClients_parameters.provisionNetworkClients = provisionNetworkClients_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = provisionNetworkClients_nodeParam || '{}'
                        provisionNetworkClients_nodeParam = JSON.parse(nodeParam) ; 
                        provisionNetworkClients_parameters.provisionNetworkClients = provisionNetworkClients_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof provisionNetworkClients_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.provisionNetworkClients(provisionNetworkClients_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkClientsUsageHistories') {
                var getNetworkClientsUsageHistories_parameters = [];
                var getNetworkClientsUsageHistories_nodeParam;
                var getNetworkClientsUsageHistories_nodeParamType;
                
                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.networkId = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['clients'] ||
                    RED.util.getMessageProperty(msg, "clients");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['clients'] ||
                    RED.util.getMessageProperty(msg, "clients");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.clients = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.clients = RED.util.getMessageProperty(msg, "clients");
                }
                                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['ssidNumber'] ||
                    RED.util.getMessageProperty(msg, "ssidNumber");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['ssidNumber'] ||
                    RED.util.getMessageProperty(msg, "ssidNumber");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.ssidNumber = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.ssidNumber = RED.util.getMessageProperty(msg, "ssidNumber");
                }
                                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.perPage = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.startingAfter = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.endingBefore = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.t0 = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.t1 = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkClientsUsageHistories_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkClientsUsageHistories_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientsUsageHistories_nodeParamType === 'str') {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is "str"');
                    getNetworkClientsUsageHistories_parameters.timespan = getNetworkClientsUsageHistories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientsUsageHistories_nodeParamType is not "str"')
                    getNetworkClientsUsageHistories_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getNetworkClientsUsageHistories(getNetworkClientsUsageHistories_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkClient') {
                var getNetworkClient_parameters = [];
                var getNetworkClient_nodeParam;
                var getNetworkClient_nodeParamType;
                
                
                getNetworkClient_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkClient_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClient_nodeParamType === 'str') {
                    //console.log('getNetworkClient_nodeParamType is "str"');
                    getNetworkClient_parameters.networkId = getNetworkClient_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClient_nodeParamType is not "str"')
                    getNetworkClient_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkClient_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkClient_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClient_nodeParamType === 'str') {
                    //console.log('getNetworkClient_nodeParamType is "str"');
                    getNetworkClient_parameters.clientId = getNetworkClient_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClient_nodeParamType is not "str"')
                    getNetworkClient_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                result = client.getNetworkClient(getNetworkClient_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkClientPolicy') {
                var getNetworkClientPolicy_parameters = [];
                var getNetworkClientPolicy_nodeParam;
                var getNetworkClientPolicy_nodeParamType;
                
                
                getNetworkClientPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkClientPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientPolicy_nodeParamType === 'str') {
                    //console.log('getNetworkClientPolicy_nodeParamType is "str"');
                    getNetworkClientPolicy_parameters.networkId = getNetworkClientPolicy_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientPolicy_nodeParamType is not "str"')
                    getNetworkClientPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkClientPolicy_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkClientPolicy_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientPolicy_nodeParamType === 'str') {
                    //console.log('getNetworkClientPolicy_nodeParamType is "str"');
                    getNetworkClientPolicy_parameters.clientId = getNetworkClientPolicy_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientPolicy_nodeParamType is not "str"')
                    getNetworkClientPolicy_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                result = client.getNetworkClientPolicy(getNetworkClientPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkClientPolicy') {
                var updateNetworkClientPolicy_parameters = [];
                var updateNetworkClientPolicy_nodeParam;
                var updateNetworkClientPolicy_nodeParamType;
                
                
                updateNetworkClientPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkClientPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkClientPolicy_nodeParamType === 'str') {
                    //console.log('updateNetworkClientPolicy_nodeParamType is "str"');
                    updateNetworkClientPolicy_parameters.networkId = updateNetworkClientPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkClientPolicy_nodeParamType is not "str"')
                    updateNetworkClientPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkClientPolicy_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                updateNetworkClientPolicy_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkClientPolicy_nodeParamType === 'str') {
                    //console.log('updateNetworkClientPolicy_nodeParamType is "str"');
                    updateNetworkClientPolicy_parameters.clientId = updateNetworkClientPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkClientPolicy_nodeParamType is not "str"')
                    updateNetworkClientPolicy_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                updateNetworkClientPolicy_nodeParam = storedParamValsMap['updateNetworkClientPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkClientPolicy");

                updateNetworkClientPolicy_nodeParamType = storedParamTypeMap['updateNetworkClientPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkClientPolicy");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkClientPolicy_parameters.updateNetworkClientPolicy = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkClientPolicy_nodeParam === 'object'){
                        updateNetworkClientPolicy_parameters.updateNetworkClientPolicy = updateNetworkClientPolicy_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkClientPolicy_nodeParam || '{}'
                        updateNetworkClientPolicy_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkClientPolicy_parameters.updateNetworkClientPolicy = updateNetworkClientPolicy_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkClientPolicy_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkClientPolicy(updateNetworkClientPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkClientSplashAuthorizationStatus') {
                var getNetworkClientSplashAuthorizationStatus_parameters = [];
                var getNetworkClientSplashAuthorizationStatus_nodeParam;
                var getNetworkClientSplashAuthorizationStatus_nodeParamType;
                
                
                getNetworkClientSplashAuthorizationStatus_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkClientSplashAuthorizationStatus_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientSplashAuthorizationStatus_nodeParamType === 'str') {
                    //console.log('getNetworkClientSplashAuthorizationStatus_nodeParamType is "str"');
                    getNetworkClientSplashAuthorizationStatus_parameters.networkId = getNetworkClientSplashAuthorizationStatus_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientSplashAuthorizationStatus_nodeParamType is not "str"')
                    getNetworkClientSplashAuthorizationStatus_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkClientSplashAuthorizationStatus_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkClientSplashAuthorizationStatus_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientSplashAuthorizationStatus_nodeParamType === 'str') {
                    //console.log('getNetworkClientSplashAuthorizationStatus_nodeParamType is "str"');
                    getNetworkClientSplashAuthorizationStatus_parameters.clientId = getNetworkClientSplashAuthorizationStatus_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientSplashAuthorizationStatus_nodeParamType is not "str"')
                    getNetworkClientSplashAuthorizationStatus_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                result = client.getNetworkClientSplashAuthorizationStatus(getNetworkClientSplashAuthorizationStatus_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkClientSplashAuthorizationStatus') {
                var updateNetworkClientSplashAuthorizationStatus_parameters = [];
                var updateNetworkClientSplashAuthorizationStatus_nodeParam;
                var updateNetworkClientSplashAuthorizationStatus_nodeParamType;
                
                
                updateNetworkClientSplashAuthorizationStatus_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkClientSplashAuthorizationStatus_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkClientSplashAuthorizationStatus_nodeParamType === 'str') {
                    //console.log('updateNetworkClientSplashAuthorizationStatus_nodeParamType is "str"');
                    updateNetworkClientSplashAuthorizationStatus_parameters.networkId = updateNetworkClientSplashAuthorizationStatus_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkClientSplashAuthorizationStatus_nodeParamType is not "str"')
                    updateNetworkClientSplashAuthorizationStatus_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkClientSplashAuthorizationStatus_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                updateNetworkClientSplashAuthorizationStatus_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkClientSplashAuthorizationStatus_nodeParamType === 'str') {
                    //console.log('updateNetworkClientSplashAuthorizationStatus_nodeParamType is "str"');
                    updateNetworkClientSplashAuthorizationStatus_parameters.clientId = updateNetworkClientSplashAuthorizationStatus_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkClientSplashAuthorizationStatus_nodeParamType is not "str"')
                    updateNetworkClientSplashAuthorizationStatus_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                updateNetworkClientSplashAuthorizationStatus_nodeParam = storedParamValsMap['updateNetworkClientSplashAuthorizationStatus'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkClientSplashAuthorizationStatus");

                updateNetworkClientSplashAuthorizationStatus_nodeParamType = storedParamTypeMap['updateNetworkClientSplashAuthorizationStatus'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkClientSplashAuthorizationStatus");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkClientSplashAuthorizationStatus_parameters.updateNetworkClientSplashAuthorizationStatus = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkClientSplashAuthorizationStatus_nodeParam === 'object'){
                        updateNetworkClientSplashAuthorizationStatus_parameters.updateNetworkClientSplashAuthorizationStatus = updateNetworkClientSplashAuthorizationStatus_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkClientSplashAuthorizationStatus_nodeParam || '{}'
                        updateNetworkClientSplashAuthorizationStatus_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkClientSplashAuthorizationStatus_parameters.updateNetworkClientSplashAuthorizationStatus = updateNetworkClientSplashAuthorizationStatus_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkClientSplashAuthorizationStatus_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkClientSplashAuthorizationStatus(updateNetworkClientSplashAuthorizationStatus_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkClientTrafficHistory') {
                var getNetworkClientTrafficHistory_parameters = [];
                var getNetworkClientTrafficHistory_nodeParam;
                var getNetworkClientTrafficHistory_nodeParamType;
                
                
                getNetworkClientTrafficHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkClientTrafficHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientTrafficHistory_nodeParamType === 'str') {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is "str"');
                    getNetworkClientTrafficHistory_parameters.networkId = getNetworkClientTrafficHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is not "str"')
                    getNetworkClientTrafficHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkClientTrafficHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkClientTrafficHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientTrafficHistory_nodeParamType === 'str') {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is "str"');
                    getNetworkClientTrafficHistory_parameters.clientId = getNetworkClientTrafficHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is not "str"')
                    getNetworkClientTrafficHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkClientTrafficHistory_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkClientTrafficHistory_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientTrafficHistory_nodeParamType === 'str') {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is "str"');
                    getNetworkClientTrafficHistory_parameters.perPage = getNetworkClientTrafficHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is not "str"')
                    getNetworkClientTrafficHistory_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkClientTrafficHistory_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkClientTrafficHistory_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientTrafficHistory_nodeParamType === 'str') {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is "str"');
                    getNetworkClientTrafficHistory_parameters.startingAfter = getNetworkClientTrafficHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is not "str"')
                    getNetworkClientTrafficHistory_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkClientTrafficHistory_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkClientTrafficHistory_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientTrafficHistory_nodeParamType === 'str') {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is "str"');
                    getNetworkClientTrafficHistory_parameters.endingBefore = getNetworkClientTrafficHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientTrafficHistory_nodeParamType is not "str"')
                    getNetworkClientTrafficHistory_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkClientTrafficHistory(getNetworkClientTrafficHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkClientUsageHistory') {
                var getNetworkClientUsageHistory_parameters = [];
                var getNetworkClientUsageHistory_nodeParam;
                var getNetworkClientUsageHistory_nodeParamType;
                
                
                getNetworkClientUsageHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkClientUsageHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkClientUsageHistory_nodeParamType is "str"');
                    getNetworkClientUsageHistory_parameters.networkId = getNetworkClientUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientUsageHistory_nodeParamType is not "str"')
                    getNetworkClientUsageHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkClientUsageHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkClientUsageHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkClientUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkClientUsageHistory_nodeParamType is "str"');
                    getNetworkClientUsageHistory_parameters.clientId = getNetworkClientUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkClientUsageHistory_nodeParamType is not "str"')
                    getNetworkClientUsageHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                result = client.getNetworkClientUsageHistory(getNetworkClientUsageHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkDevices') {
                var getNetworkDevices_parameters = [];
                var getNetworkDevices_nodeParam;
                var getNetworkDevices_nodeParamType;
                
                
                getNetworkDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkDevices_nodeParamType === 'str') {
                    //console.log('getNetworkDevices_nodeParamType is "str"');
                    getNetworkDevices_parameters.networkId = getNetworkDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkDevices_nodeParamType is not "str"')
                    getNetworkDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkDevices(getNetworkDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'claimNetworkDevices') {
                var claimNetworkDevices_parameters = [];
                var claimNetworkDevices_nodeParam;
                var claimNetworkDevices_nodeParamType;
                
                
                claimNetworkDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                claimNetworkDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (claimNetworkDevices_nodeParamType === 'str') {
                    //console.log('claimNetworkDevices_nodeParamType is "str"');
                    claimNetworkDevices_parameters.networkId = claimNetworkDevices_nodeParam || undefined;
                } else {
                    //console.log('claimNetworkDevices_nodeParamType is not "str"')
                    claimNetworkDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                claimNetworkDevices_nodeParam = storedParamValsMap['claimNetworkDevices'] ||
                    RED.util.getMessageProperty(msg, "claimNetworkDevices");

                claimNetworkDevices_nodeParamType = storedParamTypeMap['claimNetworkDevices'] ||
                    RED.util.getMessageProperty(msg, "claimNetworkDevices");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        claimNetworkDevices_parameters.claimNetworkDevices = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof claimNetworkDevices_nodeParam === 'object'){
                        claimNetworkDevices_parameters.claimNetworkDevices = claimNetworkDevices_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = claimNetworkDevices_nodeParam || '{}'
                        claimNetworkDevices_nodeParam = JSON.parse(nodeParam) ; 
                        claimNetworkDevices_parameters.claimNetworkDevices = claimNetworkDevices_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof claimNetworkDevices_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.claimNetworkDevices(claimNetworkDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'removeNetworkDevices') {
                var removeNetworkDevices_parameters = [];
                var removeNetworkDevices_nodeParam;
                var removeNetworkDevices_nodeParamType;
                
                
                removeNetworkDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                removeNetworkDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (removeNetworkDevices_nodeParamType === 'str') {
                    //console.log('removeNetworkDevices_nodeParamType is "str"');
                    removeNetworkDevices_parameters.networkId = removeNetworkDevices_nodeParam || undefined;
                } else {
                    //console.log('removeNetworkDevices_nodeParamType is not "str"')
                    removeNetworkDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                removeNetworkDevices_nodeParam = storedParamValsMap['removeNetworkDevices'] ||
                    RED.util.getMessageProperty(msg, "removeNetworkDevices");

                removeNetworkDevices_nodeParamType = storedParamTypeMap['removeNetworkDevices'] ||
                    RED.util.getMessageProperty(msg, "removeNetworkDevices");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        removeNetworkDevices_parameters.removeNetworkDevices = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof removeNetworkDevices_nodeParam === 'object'){
                        removeNetworkDevices_parameters.removeNetworkDevices = removeNetworkDevices_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = removeNetworkDevices_nodeParam || '{}'
                        removeNetworkDevices_nodeParam = JSON.parse(nodeParam) ; 
                        removeNetworkDevices_parameters.removeNetworkDevices = removeNetworkDevices_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof removeNetworkDevices_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.removeNetworkDevices(removeNetworkDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkEvents') {
                var getNetworkEvents_parameters = [];
                var getNetworkEvents_nodeParam;
                var getNetworkEvents_nodeParamType;
                
                
                getNetworkEvents_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkEvents_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.networkId = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['productType'] ||
                    RED.util.getMessageProperty(msg, "productType");

                getNetworkEvents_nodeParamType = storedParamTypeMap['productType'] ||
                    RED.util.getMessageProperty(msg, "productType");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.productType = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.productType = RED.util.getMessageProperty(msg, "productType");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['includedEventTypes'] ||
                    RED.util.getMessageProperty(msg, "includedEventTypes");

                getNetworkEvents_nodeParamType = storedParamTypeMap['includedEventTypes'] ||
                    RED.util.getMessageProperty(msg, "includedEventTypes");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.includedEventTypes = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.includedEventTypes = RED.util.getMessageProperty(msg, "includedEventTypes");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['excludedEventTypes'] ||
                    RED.util.getMessageProperty(msg, "excludedEventTypes");

                getNetworkEvents_nodeParamType = storedParamTypeMap['excludedEventTypes'] ||
                    RED.util.getMessageProperty(msg, "excludedEventTypes");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.excludedEventTypes = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.excludedEventTypes = RED.util.getMessageProperty(msg, "excludedEventTypes");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['deviceMac'] ||
                    RED.util.getMessageProperty(msg, "deviceMac");

                getNetworkEvents_nodeParamType = storedParamTypeMap['deviceMac'] ||
                    RED.util.getMessageProperty(msg, "deviceMac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.deviceMac = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.deviceMac = RED.util.getMessageProperty(msg, "deviceMac");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getNetworkEvents_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.deviceSerial = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['deviceName'] ||
                    RED.util.getMessageProperty(msg, "deviceName");

                getNetworkEvents_nodeParamType = storedParamTypeMap['deviceName'] ||
                    RED.util.getMessageProperty(msg, "deviceName");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.deviceName = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.deviceName = RED.util.getMessageProperty(msg, "deviceName");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['clientIp'] ||
                    RED.util.getMessageProperty(msg, "clientIp");

                getNetworkEvents_nodeParamType = storedParamTypeMap['clientIp'] ||
                    RED.util.getMessageProperty(msg, "clientIp");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.clientIp = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.clientIp = RED.util.getMessageProperty(msg, "clientIp");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['clientMac'] ||
                    RED.util.getMessageProperty(msg, "clientMac");

                getNetworkEvents_nodeParamType = storedParamTypeMap['clientMac'] ||
                    RED.util.getMessageProperty(msg, "clientMac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.clientMac = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.clientMac = RED.util.getMessageProperty(msg, "clientMac");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['clientName'] ||
                    RED.util.getMessageProperty(msg, "clientName");

                getNetworkEvents_nodeParamType = storedParamTypeMap['clientName'] ||
                    RED.util.getMessageProperty(msg, "clientName");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.clientName = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.clientName = RED.util.getMessageProperty(msg, "clientName");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['smDeviceMac'] ||
                    RED.util.getMessageProperty(msg, "smDeviceMac");

                getNetworkEvents_nodeParamType = storedParamTypeMap['smDeviceMac'] ||
                    RED.util.getMessageProperty(msg, "smDeviceMac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.smDeviceMac = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.smDeviceMac = RED.util.getMessageProperty(msg, "smDeviceMac");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['smDeviceName'] ||
                    RED.util.getMessageProperty(msg, "smDeviceName");

                getNetworkEvents_nodeParamType = storedParamTypeMap['smDeviceName'] ||
                    RED.util.getMessageProperty(msg, "smDeviceName");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.smDeviceName = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.smDeviceName = RED.util.getMessageProperty(msg, "smDeviceName");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkEvents_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.perPage = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkEvents_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.startingAfter = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkEvents_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkEvents_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEvents_nodeParamType === 'str') {
                    //console.log('getNetworkEvents_nodeParamType is "str"');
                    getNetworkEvents_parameters.endingBefore = getNetworkEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEvents_nodeParamType is not "str"')
                    getNetworkEvents_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkEvents(getNetworkEvents_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkEventsEventTypes') {
                var getNetworkEventsEventTypes_parameters = [];
                var getNetworkEventsEventTypes_nodeParam;
                var getNetworkEventsEventTypes_nodeParamType;
                
                
                getNetworkEventsEventTypes_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkEventsEventTypes_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkEventsEventTypes_nodeParamType === 'str') {
                    //console.log('getNetworkEventsEventTypes_nodeParamType is "str"');
                    getNetworkEventsEventTypes_parameters.networkId = getNetworkEventsEventTypes_nodeParam || undefined;
                } else {
                    //console.log('getNetworkEventsEventTypes_nodeParamType is not "str"')
                    getNetworkEventsEventTypes_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkEventsEventTypes(getNetworkEventsEventTypes_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkFirmwareUpgrades') {
                var getNetworkFirmwareUpgrades_parameters = [];
                var getNetworkFirmwareUpgrades_nodeParam;
                var getNetworkFirmwareUpgrades_nodeParamType;
                
                
                getNetworkFirmwareUpgrades_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkFirmwareUpgrades_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkFirmwareUpgrades_nodeParamType === 'str') {
                    //console.log('getNetworkFirmwareUpgrades_nodeParamType is "str"');
                    getNetworkFirmwareUpgrades_parameters.networkId = getNetworkFirmwareUpgrades_nodeParam || undefined;
                } else {
                    //console.log('getNetworkFirmwareUpgrades_nodeParamType is not "str"')
                    getNetworkFirmwareUpgrades_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkFirmwareUpgrades(getNetworkFirmwareUpgrades_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkFirmwareUpgrades') {
                var updateNetworkFirmwareUpgrades_parameters = [];
                var updateNetworkFirmwareUpgrades_nodeParam;
                var updateNetworkFirmwareUpgrades_nodeParamType;
                
                
                updateNetworkFirmwareUpgrades_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkFirmwareUpgrades_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkFirmwareUpgrades_nodeParamType === 'str') {
                    //console.log('updateNetworkFirmwareUpgrades_nodeParamType is "str"');
                    updateNetworkFirmwareUpgrades_parameters.networkId = updateNetworkFirmwareUpgrades_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkFirmwareUpgrades_nodeParamType is not "str"')
                    updateNetworkFirmwareUpgrades_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkFirmwareUpgrades_nodeParam = storedParamValsMap['updateNetworkFirmwareUpgrades'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkFirmwareUpgrades");

                updateNetworkFirmwareUpgrades_nodeParamType = storedParamTypeMap['updateNetworkFirmwareUpgrades'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkFirmwareUpgrades");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkFirmwareUpgrades_parameters.updateNetworkFirmwareUpgrades = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkFirmwareUpgrades_nodeParam === 'object'){
                        updateNetworkFirmwareUpgrades_parameters.updateNetworkFirmwareUpgrades = updateNetworkFirmwareUpgrades_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkFirmwareUpgrades_nodeParam || '{}'
                        updateNetworkFirmwareUpgrades_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkFirmwareUpgrades_parameters.updateNetworkFirmwareUpgrades = updateNetworkFirmwareUpgrades_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkFirmwareUpgrades_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkFirmwareUpgrades(updateNetworkFirmwareUpgrades_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkFloorPlans') {
                var getNetworkFloorPlans_parameters = [];
                var getNetworkFloorPlans_nodeParam;
                var getNetworkFloorPlans_nodeParamType;
                
                
                getNetworkFloorPlans_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkFloorPlans_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkFloorPlans_nodeParamType === 'str') {
                    //console.log('getNetworkFloorPlans_nodeParamType is "str"');
                    getNetworkFloorPlans_parameters.networkId = getNetworkFloorPlans_nodeParam || undefined;
                } else {
                    //console.log('getNetworkFloorPlans_nodeParamType is not "str"')
                    getNetworkFloorPlans_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkFloorPlans(getNetworkFloorPlans_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkFloorPlan') {
                var createNetworkFloorPlan_parameters = [];
                var createNetworkFloorPlan_nodeParam;
                var createNetworkFloorPlan_nodeParamType;
                
                
                createNetworkFloorPlan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkFloorPlan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkFloorPlan_nodeParamType === 'str') {
                    //console.log('createNetworkFloorPlan_nodeParamType is "str"');
                    createNetworkFloorPlan_parameters.networkId = createNetworkFloorPlan_nodeParam || undefined;
                } else {
                    //console.log('createNetworkFloorPlan_nodeParamType is not "str"')
                    createNetworkFloorPlan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkFloorPlan_nodeParam = storedParamValsMap['createNetworkFloorPlan'] ||
                    RED.util.getMessageProperty(msg, "createNetworkFloorPlan");

                createNetworkFloorPlan_nodeParamType = storedParamTypeMap['createNetworkFloorPlan'] ||
                    RED.util.getMessageProperty(msg, "createNetworkFloorPlan");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkFloorPlan_parameters.createNetworkFloorPlan = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkFloorPlan_nodeParam === 'object'){
                        createNetworkFloorPlan_parameters.createNetworkFloorPlan = createNetworkFloorPlan_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkFloorPlan_nodeParam || '{}'
                        createNetworkFloorPlan_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkFloorPlan_parameters.createNetworkFloorPlan = createNetworkFloorPlan_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkFloorPlan_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkFloorPlan(createNetworkFloorPlan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkFloorPlan') {
                var getNetworkFloorPlan_parameters = [];
                var getNetworkFloorPlan_nodeParam;
                var getNetworkFloorPlan_nodeParamType;
                
                
                getNetworkFloorPlan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkFloorPlan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkFloorPlan_nodeParamType === 'str') {
                    //console.log('getNetworkFloorPlan_nodeParamType is "str"');
                    getNetworkFloorPlan_parameters.networkId = getNetworkFloorPlan_nodeParam || undefined;
                } else {
                    //console.log('getNetworkFloorPlan_nodeParamType is not "str"')
                    getNetworkFloorPlan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkFloorPlan_nodeParam = storedParamValsMap['floorPlanId'] ||
                    RED.util.getMessageProperty(msg, "floorPlanId");

                getNetworkFloorPlan_nodeParamType = storedParamTypeMap['floorPlanId'] ||
                    RED.util.getMessageProperty(msg, "floorPlanId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkFloorPlan_nodeParamType === 'str') {
                    //console.log('getNetworkFloorPlan_nodeParamType is "str"');
                    getNetworkFloorPlan_parameters.floorPlanId = getNetworkFloorPlan_nodeParam || undefined;
                } else {
                    //console.log('getNetworkFloorPlan_nodeParamType is not "str"')
                    getNetworkFloorPlan_parameters.floorPlanId = RED.util.getMessageProperty(msg, "floorPlanId");
                }
                                result = client.getNetworkFloorPlan(getNetworkFloorPlan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkFloorPlan') {
                var updateNetworkFloorPlan_parameters = [];
                var updateNetworkFloorPlan_nodeParam;
                var updateNetworkFloorPlan_nodeParamType;
                
                
                updateNetworkFloorPlan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkFloorPlan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkFloorPlan_nodeParamType === 'str') {
                    //console.log('updateNetworkFloorPlan_nodeParamType is "str"');
                    updateNetworkFloorPlan_parameters.networkId = updateNetworkFloorPlan_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkFloorPlan_nodeParamType is not "str"')
                    updateNetworkFloorPlan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkFloorPlan_nodeParam = storedParamValsMap['floorPlanId'] ||
                    RED.util.getMessageProperty(msg, "floorPlanId");

                updateNetworkFloorPlan_nodeParamType = storedParamTypeMap['floorPlanId'] ||
                    RED.util.getMessageProperty(msg, "floorPlanId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkFloorPlan_nodeParamType === 'str') {
                    //console.log('updateNetworkFloorPlan_nodeParamType is "str"');
                    updateNetworkFloorPlan_parameters.floorPlanId = updateNetworkFloorPlan_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkFloorPlan_nodeParamType is not "str"')
                    updateNetworkFloorPlan_parameters.floorPlanId = RED.util.getMessageProperty(msg, "floorPlanId");
                }
                                
                updateNetworkFloorPlan_nodeParam = storedParamValsMap['updateNetworkFloorPlan'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkFloorPlan");

                updateNetworkFloorPlan_nodeParamType = storedParamTypeMap['updateNetworkFloorPlan'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkFloorPlan");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkFloorPlan_parameters.updateNetworkFloorPlan = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkFloorPlan_nodeParam === 'object'){
                        updateNetworkFloorPlan_parameters.updateNetworkFloorPlan = updateNetworkFloorPlan_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkFloorPlan_nodeParam || '{}'
                        updateNetworkFloorPlan_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkFloorPlan_parameters.updateNetworkFloorPlan = updateNetworkFloorPlan_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkFloorPlan_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkFloorPlan(updateNetworkFloorPlan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkFloorPlan') {
                var deleteNetworkFloorPlan_parameters = [];
                var deleteNetworkFloorPlan_nodeParam;
                var deleteNetworkFloorPlan_nodeParamType;
                
                
                deleteNetworkFloorPlan_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkFloorPlan_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkFloorPlan_nodeParamType === 'str') {
                    //console.log('deleteNetworkFloorPlan_nodeParamType is "str"');
                    deleteNetworkFloorPlan_parameters.networkId = deleteNetworkFloorPlan_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkFloorPlan_nodeParamType is not "str"')
                    deleteNetworkFloorPlan_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkFloorPlan_nodeParam = storedParamValsMap['floorPlanId'] ||
                    RED.util.getMessageProperty(msg, "floorPlanId");

                deleteNetworkFloorPlan_nodeParamType = storedParamTypeMap['floorPlanId'] ||
                    RED.util.getMessageProperty(msg, "floorPlanId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkFloorPlan_nodeParamType === 'str') {
                    //console.log('deleteNetworkFloorPlan_nodeParamType is "str"');
                    deleteNetworkFloorPlan_parameters.floorPlanId = deleteNetworkFloorPlan_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkFloorPlan_nodeParamType is not "str"')
                    deleteNetworkFloorPlan_parameters.floorPlanId = RED.util.getMessageProperty(msg, "floorPlanId");
                }
                                result = client.deleteNetworkFloorPlan(deleteNetworkFloorPlan_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkGroupPolicies') {
                var getNetworkGroupPolicies_parameters = [];
                var getNetworkGroupPolicies_nodeParam;
                var getNetworkGroupPolicies_nodeParamType;
                
                
                getNetworkGroupPolicies_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkGroupPolicies_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkGroupPolicies_nodeParamType === 'str') {
                    //console.log('getNetworkGroupPolicies_nodeParamType is "str"');
                    getNetworkGroupPolicies_parameters.networkId = getNetworkGroupPolicies_nodeParam || undefined;
                } else {
                    //console.log('getNetworkGroupPolicies_nodeParamType is not "str"')
                    getNetworkGroupPolicies_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkGroupPolicies(getNetworkGroupPolicies_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkGroupPolicy') {
                var createNetworkGroupPolicy_parameters = [];
                var createNetworkGroupPolicy_nodeParam;
                var createNetworkGroupPolicy_nodeParamType;
                
                
                createNetworkGroupPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkGroupPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkGroupPolicy_nodeParamType === 'str') {
                    //console.log('createNetworkGroupPolicy_nodeParamType is "str"');
                    createNetworkGroupPolicy_parameters.networkId = createNetworkGroupPolicy_nodeParam || undefined;
                } else {
                    //console.log('createNetworkGroupPolicy_nodeParamType is not "str"')
                    createNetworkGroupPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkGroupPolicy_nodeParam = storedParamValsMap['createNetworkGroupPolicy'] ||
                    RED.util.getMessageProperty(msg, "createNetworkGroupPolicy");

                createNetworkGroupPolicy_nodeParamType = storedParamTypeMap['createNetworkGroupPolicy'] ||
                    RED.util.getMessageProperty(msg, "createNetworkGroupPolicy");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkGroupPolicy_parameters.createNetworkGroupPolicy = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkGroupPolicy_nodeParam === 'object'){
                        createNetworkGroupPolicy_parameters.createNetworkGroupPolicy = createNetworkGroupPolicy_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkGroupPolicy_nodeParam || '{}'
                        createNetworkGroupPolicy_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkGroupPolicy_parameters.createNetworkGroupPolicy = createNetworkGroupPolicy_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkGroupPolicy_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkGroupPolicy(createNetworkGroupPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkGroupPolicy') {
                var getNetworkGroupPolicy_parameters = [];
                var getNetworkGroupPolicy_nodeParam;
                var getNetworkGroupPolicy_nodeParamType;
                
                
                getNetworkGroupPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkGroupPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkGroupPolicy_nodeParamType === 'str') {
                    //console.log('getNetworkGroupPolicy_nodeParamType is "str"');
                    getNetworkGroupPolicy_parameters.networkId = getNetworkGroupPolicy_nodeParam || undefined;
                } else {
                    //console.log('getNetworkGroupPolicy_nodeParamType is not "str"')
                    getNetworkGroupPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkGroupPolicy_nodeParam = storedParamValsMap['groupPolicyId'] ||
                    RED.util.getMessageProperty(msg, "groupPolicyId");

                getNetworkGroupPolicy_nodeParamType = storedParamTypeMap['groupPolicyId'] ||
                    RED.util.getMessageProperty(msg, "groupPolicyId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkGroupPolicy_nodeParamType === 'str') {
                    //console.log('getNetworkGroupPolicy_nodeParamType is "str"');
                    getNetworkGroupPolicy_parameters.groupPolicyId = getNetworkGroupPolicy_nodeParam || undefined;
                } else {
                    //console.log('getNetworkGroupPolicy_nodeParamType is not "str"')
                    getNetworkGroupPolicy_parameters.groupPolicyId = RED.util.getMessageProperty(msg, "groupPolicyId");
                }
                                result = client.getNetworkGroupPolicy(getNetworkGroupPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkGroupPolicy') {
                var updateNetworkGroupPolicy_parameters = [];
                var updateNetworkGroupPolicy_nodeParam;
                var updateNetworkGroupPolicy_nodeParamType;
                
                
                updateNetworkGroupPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkGroupPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkGroupPolicy_nodeParamType === 'str') {
                    //console.log('updateNetworkGroupPolicy_nodeParamType is "str"');
                    updateNetworkGroupPolicy_parameters.networkId = updateNetworkGroupPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkGroupPolicy_nodeParamType is not "str"')
                    updateNetworkGroupPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkGroupPolicy_nodeParam = storedParamValsMap['groupPolicyId'] ||
                    RED.util.getMessageProperty(msg, "groupPolicyId");

                updateNetworkGroupPolicy_nodeParamType = storedParamTypeMap['groupPolicyId'] ||
                    RED.util.getMessageProperty(msg, "groupPolicyId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkGroupPolicy_nodeParamType === 'str') {
                    //console.log('updateNetworkGroupPolicy_nodeParamType is "str"');
                    updateNetworkGroupPolicy_parameters.groupPolicyId = updateNetworkGroupPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkGroupPolicy_nodeParamType is not "str"')
                    updateNetworkGroupPolicy_parameters.groupPolicyId = RED.util.getMessageProperty(msg, "groupPolicyId");
                }
                                
                updateNetworkGroupPolicy_nodeParam = storedParamValsMap['updateNetworkGroupPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkGroupPolicy");

                updateNetworkGroupPolicy_nodeParamType = storedParamTypeMap['updateNetworkGroupPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkGroupPolicy");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkGroupPolicy_parameters.updateNetworkGroupPolicy = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkGroupPolicy_nodeParam === 'object'){
                        updateNetworkGroupPolicy_parameters.updateNetworkGroupPolicy = updateNetworkGroupPolicy_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkGroupPolicy_nodeParam || '{}'
                        updateNetworkGroupPolicy_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkGroupPolicy_parameters.updateNetworkGroupPolicy = updateNetworkGroupPolicy_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkGroupPolicy_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkGroupPolicy(updateNetworkGroupPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkGroupPolicy') {
                var deleteNetworkGroupPolicy_parameters = [];
                var deleteNetworkGroupPolicy_nodeParam;
                var deleteNetworkGroupPolicy_nodeParamType;
                
                
                deleteNetworkGroupPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkGroupPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkGroupPolicy_nodeParamType === 'str') {
                    //console.log('deleteNetworkGroupPolicy_nodeParamType is "str"');
                    deleteNetworkGroupPolicy_parameters.networkId = deleteNetworkGroupPolicy_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkGroupPolicy_nodeParamType is not "str"')
                    deleteNetworkGroupPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkGroupPolicy_nodeParam = storedParamValsMap['groupPolicyId'] ||
                    RED.util.getMessageProperty(msg, "groupPolicyId");

                deleteNetworkGroupPolicy_nodeParamType = storedParamTypeMap['groupPolicyId'] ||
                    RED.util.getMessageProperty(msg, "groupPolicyId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkGroupPolicy_nodeParamType === 'str') {
                    //console.log('deleteNetworkGroupPolicy_nodeParamType is "str"');
                    deleteNetworkGroupPolicy_parameters.groupPolicyId = deleteNetworkGroupPolicy_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkGroupPolicy_nodeParamType is not "str"')
                    deleteNetworkGroupPolicy_parameters.groupPolicyId = RED.util.getMessageProperty(msg, "groupPolicyId");
                }
                                result = client.deleteNetworkGroupPolicy(deleteNetworkGroupPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkMerakiAuthUsers') {
                var getNetworkMerakiAuthUsers_parameters = [];
                var getNetworkMerakiAuthUsers_nodeParam;
                var getNetworkMerakiAuthUsers_nodeParamType;
                
                
                getNetworkMerakiAuthUsers_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkMerakiAuthUsers_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkMerakiAuthUsers_nodeParamType === 'str') {
                    //console.log('getNetworkMerakiAuthUsers_nodeParamType is "str"');
                    getNetworkMerakiAuthUsers_parameters.networkId = getNetworkMerakiAuthUsers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkMerakiAuthUsers_nodeParamType is not "str"')
                    getNetworkMerakiAuthUsers_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkMerakiAuthUsers(getNetworkMerakiAuthUsers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkMerakiAuthUser') {
                var createNetworkMerakiAuthUser_parameters = [];
                var createNetworkMerakiAuthUser_nodeParam;
                var createNetworkMerakiAuthUser_nodeParamType;
                
                
                createNetworkMerakiAuthUser_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkMerakiAuthUser_nodeParamType === 'str') {
                    //console.log('createNetworkMerakiAuthUser_nodeParamType is "str"');
                    createNetworkMerakiAuthUser_parameters.networkId = createNetworkMerakiAuthUser_nodeParam || undefined;
                } else {
                    //console.log('createNetworkMerakiAuthUser_nodeParamType is not "str"')
                    createNetworkMerakiAuthUser_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkMerakiAuthUser_nodeParam = storedParamValsMap['createNetworkMerakiAuthUser'] ||
                    RED.util.getMessageProperty(msg, "createNetworkMerakiAuthUser");

                createNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['createNetworkMerakiAuthUser'] ||
                    RED.util.getMessageProperty(msg, "createNetworkMerakiAuthUser");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkMerakiAuthUser_parameters.createNetworkMerakiAuthUser = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkMerakiAuthUser_nodeParam === 'object'){
                        createNetworkMerakiAuthUser_parameters.createNetworkMerakiAuthUser = createNetworkMerakiAuthUser_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkMerakiAuthUser_nodeParam || '{}'
                        createNetworkMerakiAuthUser_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkMerakiAuthUser_parameters.createNetworkMerakiAuthUser = createNetworkMerakiAuthUser_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkMerakiAuthUser_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkMerakiAuthUser(createNetworkMerakiAuthUser_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkMerakiAuthUser') {
                var getNetworkMerakiAuthUser_parameters = [];
                var getNetworkMerakiAuthUser_nodeParam;
                var getNetworkMerakiAuthUser_nodeParamType;
                
                
                getNetworkMerakiAuthUser_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkMerakiAuthUser_nodeParamType === 'str') {
                    //console.log('getNetworkMerakiAuthUser_nodeParamType is "str"');
                    getNetworkMerakiAuthUser_parameters.networkId = getNetworkMerakiAuthUser_nodeParam || undefined;
                } else {
                    //console.log('getNetworkMerakiAuthUser_nodeParamType is not "str"')
                    getNetworkMerakiAuthUser_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkMerakiAuthUser_nodeParam = storedParamValsMap['merakiAuthUserId'] ||
                    RED.util.getMessageProperty(msg, "merakiAuthUserId");

                getNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['merakiAuthUserId'] ||
                    RED.util.getMessageProperty(msg, "merakiAuthUserId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkMerakiAuthUser_nodeParamType === 'str') {
                    //console.log('getNetworkMerakiAuthUser_nodeParamType is "str"');
                    getNetworkMerakiAuthUser_parameters.merakiAuthUserId = getNetworkMerakiAuthUser_nodeParam || undefined;
                } else {
                    //console.log('getNetworkMerakiAuthUser_nodeParamType is not "str"')
                    getNetworkMerakiAuthUser_parameters.merakiAuthUserId = RED.util.getMessageProperty(msg, "merakiAuthUserId");
                }
                                result = client.getNetworkMerakiAuthUser(getNetworkMerakiAuthUser_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkMerakiAuthUser') {
                var deleteNetworkMerakiAuthUser_parameters = [];
                var deleteNetworkMerakiAuthUser_nodeParam;
                var deleteNetworkMerakiAuthUser_nodeParamType;
                
                
                deleteNetworkMerakiAuthUser_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkMerakiAuthUser_nodeParamType === 'str') {
                    //console.log('deleteNetworkMerakiAuthUser_nodeParamType is "str"');
                    deleteNetworkMerakiAuthUser_parameters.networkId = deleteNetworkMerakiAuthUser_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkMerakiAuthUser_nodeParamType is not "str"')
                    deleteNetworkMerakiAuthUser_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkMerakiAuthUser_nodeParam = storedParamValsMap['merakiAuthUserId'] ||
                    RED.util.getMessageProperty(msg, "merakiAuthUserId");

                deleteNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['merakiAuthUserId'] ||
                    RED.util.getMessageProperty(msg, "merakiAuthUserId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkMerakiAuthUser_nodeParamType === 'str') {
                    //console.log('deleteNetworkMerakiAuthUser_nodeParamType is "str"');
                    deleteNetworkMerakiAuthUser_parameters.merakiAuthUserId = deleteNetworkMerakiAuthUser_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkMerakiAuthUser_nodeParamType is not "str"')
                    deleteNetworkMerakiAuthUser_parameters.merakiAuthUserId = RED.util.getMessageProperty(msg, "merakiAuthUserId");
                }
                                result = client.deleteNetworkMerakiAuthUser(deleteNetworkMerakiAuthUser_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkMerakiAuthUser') {
                var updateNetworkMerakiAuthUser_parameters = [];
                var updateNetworkMerakiAuthUser_nodeParam;
                var updateNetworkMerakiAuthUser_nodeParamType;
                
                
                updateNetworkMerakiAuthUser_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkMerakiAuthUser_nodeParamType === 'str') {
                    //console.log('updateNetworkMerakiAuthUser_nodeParamType is "str"');
                    updateNetworkMerakiAuthUser_parameters.networkId = updateNetworkMerakiAuthUser_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkMerakiAuthUser_nodeParamType is not "str"')
                    updateNetworkMerakiAuthUser_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkMerakiAuthUser_nodeParam = storedParamValsMap['merakiAuthUserId'] ||
                    RED.util.getMessageProperty(msg, "merakiAuthUserId");

                updateNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['merakiAuthUserId'] ||
                    RED.util.getMessageProperty(msg, "merakiAuthUserId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkMerakiAuthUser_nodeParamType === 'str') {
                    //console.log('updateNetworkMerakiAuthUser_nodeParamType is "str"');
                    updateNetworkMerakiAuthUser_parameters.merakiAuthUserId = updateNetworkMerakiAuthUser_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkMerakiAuthUser_nodeParamType is not "str"')
                    updateNetworkMerakiAuthUser_parameters.merakiAuthUserId = RED.util.getMessageProperty(msg, "merakiAuthUserId");
                }
                                
                updateNetworkMerakiAuthUser_nodeParam = storedParamValsMap['updateNetworkMerakiAuthUser'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkMerakiAuthUser");

                updateNetworkMerakiAuthUser_nodeParamType = storedParamTypeMap['updateNetworkMerakiAuthUser'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkMerakiAuthUser");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkMerakiAuthUser_parameters.updateNetworkMerakiAuthUser = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkMerakiAuthUser_nodeParam === 'object'){
                        updateNetworkMerakiAuthUser_parameters.updateNetworkMerakiAuthUser = updateNetworkMerakiAuthUser_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkMerakiAuthUser_nodeParam || '{}'
                        updateNetworkMerakiAuthUser_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkMerakiAuthUser_parameters.updateNetworkMerakiAuthUser = updateNetworkMerakiAuthUser_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkMerakiAuthUser_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkMerakiAuthUser(updateNetworkMerakiAuthUser_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkMqttBrokers') {
                var getNetworkMqttBrokers_parameters = [];
                var getNetworkMqttBrokers_nodeParam;
                var getNetworkMqttBrokers_nodeParamType;
                
                
                getNetworkMqttBrokers_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkMqttBrokers_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkMqttBrokers_nodeParamType === 'str') {
                    //console.log('getNetworkMqttBrokers_nodeParamType is "str"');
                    getNetworkMqttBrokers_parameters.networkId = getNetworkMqttBrokers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkMqttBrokers_nodeParamType is not "str"')
                    getNetworkMqttBrokers_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkMqttBrokers(getNetworkMqttBrokers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkMqttBroker') {
                var createNetworkMqttBroker_parameters = [];
                var createNetworkMqttBroker_nodeParam;
                var createNetworkMqttBroker_nodeParamType;
                
                
                createNetworkMqttBroker_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkMqttBroker_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkMqttBroker_nodeParamType === 'str') {
                    //console.log('createNetworkMqttBroker_nodeParamType is "str"');
                    createNetworkMqttBroker_parameters.networkId = createNetworkMqttBroker_nodeParam || undefined;
                } else {
                    //console.log('createNetworkMqttBroker_nodeParamType is not "str"')
                    createNetworkMqttBroker_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkMqttBroker_nodeParam = storedParamValsMap['createNetworkMqttBroker'] ||
                    RED.util.getMessageProperty(msg, "createNetworkMqttBroker");

                createNetworkMqttBroker_nodeParamType = storedParamTypeMap['createNetworkMqttBroker'] ||
                    RED.util.getMessageProperty(msg, "createNetworkMqttBroker");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkMqttBroker_parameters.createNetworkMqttBroker = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkMqttBroker_nodeParam === 'object'){
                        createNetworkMqttBroker_parameters.createNetworkMqttBroker = createNetworkMqttBroker_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkMqttBroker_nodeParam || '{}'
                        createNetworkMqttBroker_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkMqttBroker_parameters.createNetworkMqttBroker = createNetworkMqttBroker_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkMqttBroker_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkMqttBroker(createNetworkMqttBroker_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkMqttBroker') {
                var getNetworkMqttBroker_parameters = [];
                var getNetworkMqttBroker_nodeParam;
                var getNetworkMqttBroker_nodeParamType;
                
                
                getNetworkMqttBroker_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkMqttBroker_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkMqttBroker_nodeParamType === 'str') {
                    //console.log('getNetworkMqttBroker_nodeParamType is "str"');
                    getNetworkMqttBroker_parameters.networkId = getNetworkMqttBroker_nodeParam || undefined;
                } else {
                    //console.log('getNetworkMqttBroker_nodeParamType is not "str"')
                    getNetworkMqttBroker_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkMqttBroker_nodeParam = storedParamValsMap['mqttBrokerId'] ||
                    RED.util.getMessageProperty(msg, "mqttBrokerId");

                getNetworkMqttBroker_nodeParamType = storedParamTypeMap['mqttBrokerId'] ||
                    RED.util.getMessageProperty(msg, "mqttBrokerId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkMqttBroker_nodeParamType === 'str') {
                    //console.log('getNetworkMqttBroker_nodeParamType is "str"');
                    getNetworkMqttBroker_parameters.mqttBrokerId = getNetworkMqttBroker_nodeParam || undefined;
                } else {
                    //console.log('getNetworkMqttBroker_nodeParamType is not "str"')
                    getNetworkMqttBroker_parameters.mqttBrokerId = RED.util.getMessageProperty(msg, "mqttBrokerId");
                }
                                result = client.getNetworkMqttBroker(getNetworkMqttBroker_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkMqttBroker') {
                var updateNetworkMqttBroker_parameters = [];
                var updateNetworkMqttBroker_nodeParam;
                var updateNetworkMqttBroker_nodeParamType;
                
                
                updateNetworkMqttBroker_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkMqttBroker_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkMqttBroker_nodeParamType === 'str') {
                    //console.log('updateNetworkMqttBroker_nodeParamType is "str"');
                    updateNetworkMqttBroker_parameters.networkId = updateNetworkMqttBroker_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkMqttBroker_nodeParamType is not "str"')
                    updateNetworkMqttBroker_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkMqttBroker_nodeParam = storedParamValsMap['mqttBrokerId'] ||
                    RED.util.getMessageProperty(msg, "mqttBrokerId");

                updateNetworkMqttBroker_nodeParamType = storedParamTypeMap['mqttBrokerId'] ||
                    RED.util.getMessageProperty(msg, "mqttBrokerId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkMqttBroker_nodeParamType === 'str') {
                    //console.log('updateNetworkMqttBroker_nodeParamType is "str"');
                    updateNetworkMqttBroker_parameters.mqttBrokerId = updateNetworkMqttBroker_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkMqttBroker_nodeParamType is not "str"')
                    updateNetworkMqttBroker_parameters.mqttBrokerId = RED.util.getMessageProperty(msg, "mqttBrokerId");
                }
                                
                updateNetworkMqttBroker_nodeParam = storedParamValsMap['updateNetworkMqttBroker'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkMqttBroker");

                updateNetworkMqttBroker_nodeParamType = storedParamTypeMap['updateNetworkMqttBroker'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkMqttBroker");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkMqttBroker_parameters.updateNetworkMqttBroker = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkMqttBroker_nodeParam === 'object'){
                        updateNetworkMqttBroker_parameters.updateNetworkMqttBroker = updateNetworkMqttBroker_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkMqttBroker_nodeParam || '{}'
                        updateNetworkMqttBroker_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkMqttBroker_parameters.updateNetworkMqttBroker = updateNetworkMqttBroker_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkMqttBroker_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkMqttBroker(updateNetworkMqttBroker_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkMqttBroker') {
                var deleteNetworkMqttBroker_parameters = [];
                var deleteNetworkMqttBroker_nodeParam;
                var deleteNetworkMqttBroker_nodeParamType;
                
                
                deleteNetworkMqttBroker_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkMqttBroker_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkMqttBroker_nodeParamType === 'str') {
                    //console.log('deleteNetworkMqttBroker_nodeParamType is "str"');
                    deleteNetworkMqttBroker_parameters.networkId = deleteNetworkMqttBroker_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkMqttBroker_nodeParamType is not "str"')
                    deleteNetworkMqttBroker_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkMqttBroker_nodeParam = storedParamValsMap['mqttBrokerId'] ||
                    RED.util.getMessageProperty(msg, "mqttBrokerId");

                deleteNetworkMqttBroker_nodeParamType = storedParamTypeMap['mqttBrokerId'] ||
                    RED.util.getMessageProperty(msg, "mqttBrokerId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkMqttBroker_nodeParamType === 'str') {
                    //console.log('deleteNetworkMqttBroker_nodeParamType is "str"');
                    deleteNetworkMqttBroker_parameters.mqttBrokerId = deleteNetworkMqttBroker_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkMqttBroker_nodeParamType is not "str"')
                    deleteNetworkMqttBroker_parameters.mqttBrokerId = RED.util.getMessageProperty(msg, "mqttBrokerId");
                }
                                result = client.deleteNetworkMqttBroker(deleteNetworkMqttBroker_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkNetflow') {
                var getNetworkNetflow_parameters = [];
                var getNetworkNetflow_nodeParam;
                var getNetworkNetflow_nodeParamType;
                
                
                getNetworkNetflow_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkNetflow_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetflow_nodeParamType === 'str') {
                    //console.log('getNetworkNetflow_nodeParamType is "str"');
                    getNetworkNetflow_parameters.networkId = getNetworkNetflow_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetflow_nodeParamType is not "str"')
                    getNetworkNetflow_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkNetflow(getNetworkNetflow_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkNetflow') {
                var updateNetworkNetflow_parameters = [];
                var updateNetworkNetflow_nodeParam;
                var updateNetworkNetflow_nodeParamType;
                
                
                updateNetworkNetflow_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkNetflow_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkNetflow_nodeParamType === 'str') {
                    //console.log('updateNetworkNetflow_nodeParamType is "str"');
                    updateNetworkNetflow_parameters.networkId = updateNetworkNetflow_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkNetflow_nodeParamType is not "str"')
                    updateNetworkNetflow_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkNetflow_nodeParam = storedParamValsMap['updateNetworkNetflow'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkNetflow");

                updateNetworkNetflow_nodeParamType = storedParamTypeMap['updateNetworkNetflow'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkNetflow");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkNetflow_parameters.updateNetworkNetflow = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkNetflow_nodeParam === 'object'){
                        updateNetworkNetflow_parameters.updateNetworkNetflow = updateNetworkNetflow_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkNetflow_nodeParam || '{}'
                        updateNetworkNetflow_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkNetflow_parameters.updateNetworkNetflow = updateNetworkNetflow_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkNetflow_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkNetflow(updateNetworkNetflow_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkNetworkHealthChannelUtilization') {
                var getNetworkNetworkHealthChannelUtilization_parameters = [];
                var getNetworkNetworkHealthChannelUtilization_nodeParam;
                var getNetworkNetworkHealthChannelUtilization_nodeParamType;
                
                
                getNetworkNetworkHealthChannelUtilization_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkNetworkHealthChannelUtilization_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetworkHealthChannelUtilization_nodeParamType === 'str') {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is "str"');
                    getNetworkNetworkHealthChannelUtilization_parameters.networkId = getNetworkNetworkHealthChannelUtilization_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is not "str"')
                    getNetworkNetworkHealthChannelUtilization_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkNetworkHealthChannelUtilization_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkNetworkHealthChannelUtilization_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetworkHealthChannelUtilization_nodeParamType === 'str') {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is "str"');
                    getNetworkNetworkHealthChannelUtilization_parameters.t0 = getNetworkNetworkHealthChannelUtilization_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is not "str"')
                    getNetworkNetworkHealthChannelUtilization_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkNetworkHealthChannelUtilization_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkNetworkHealthChannelUtilization_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetworkHealthChannelUtilization_nodeParamType === 'str') {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is "str"');
                    getNetworkNetworkHealthChannelUtilization_parameters.t1 = getNetworkNetworkHealthChannelUtilization_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is not "str"')
                    getNetworkNetworkHealthChannelUtilization_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkNetworkHealthChannelUtilization_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkNetworkHealthChannelUtilization_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetworkHealthChannelUtilization_nodeParamType === 'str') {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is "str"');
                    getNetworkNetworkHealthChannelUtilization_parameters.timespan = getNetworkNetworkHealthChannelUtilization_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is not "str"')
                    getNetworkNetworkHealthChannelUtilization_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkNetworkHealthChannelUtilization_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getNetworkNetworkHealthChannelUtilization_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetworkHealthChannelUtilization_nodeParamType === 'str') {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is "str"');
                    getNetworkNetworkHealthChannelUtilization_parameters.resolution = getNetworkNetworkHealthChannelUtilization_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is not "str"')
                    getNetworkNetworkHealthChannelUtilization_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getNetworkNetworkHealthChannelUtilization_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkNetworkHealthChannelUtilization_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetworkHealthChannelUtilization_nodeParamType === 'str') {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is "str"');
                    getNetworkNetworkHealthChannelUtilization_parameters.perPage = getNetworkNetworkHealthChannelUtilization_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is not "str"')
                    getNetworkNetworkHealthChannelUtilization_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkNetworkHealthChannelUtilization_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkNetworkHealthChannelUtilization_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetworkHealthChannelUtilization_nodeParamType === 'str') {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is "str"');
                    getNetworkNetworkHealthChannelUtilization_parameters.startingAfter = getNetworkNetworkHealthChannelUtilization_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is not "str"')
                    getNetworkNetworkHealthChannelUtilization_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkNetworkHealthChannelUtilization_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkNetworkHealthChannelUtilization_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkNetworkHealthChannelUtilization_nodeParamType === 'str') {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is "str"');
                    getNetworkNetworkHealthChannelUtilization_parameters.endingBefore = getNetworkNetworkHealthChannelUtilization_nodeParam || undefined;
                } else {
                    //console.log('getNetworkNetworkHealthChannelUtilization_nodeParamType is not "str"')
                    getNetworkNetworkHealthChannelUtilization_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkNetworkHealthChannelUtilization(getNetworkNetworkHealthChannelUtilization_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkPiiPiiKeys') {
                var getNetworkPiiPiiKeys_parameters = [];
                var getNetworkPiiPiiKeys_nodeParam;
                var getNetworkPiiPiiKeys_nodeParamType;
                
                
                getNetworkPiiPiiKeys_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkPiiPiiKeys_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiPiiKeys_nodeParamType === 'str') {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is "str"');
                    getNetworkPiiPiiKeys_parameters.networkId = getNetworkPiiPiiKeys_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is not "str"')
                    getNetworkPiiPiiKeys_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkPiiPiiKeys_nodeParam = storedParamValsMap['username'] ||
                    RED.util.getMessageProperty(msg, "username");

                getNetworkPiiPiiKeys_nodeParamType = storedParamTypeMap['username'] ||
                    RED.util.getMessageProperty(msg, "username");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiPiiKeys_nodeParamType === 'str') {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is "str"');
                    getNetworkPiiPiiKeys_parameters.username = getNetworkPiiPiiKeys_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is not "str"')
                    getNetworkPiiPiiKeys_parameters.username = RED.util.getMessageProperty(msg, "username");
                }
                                
                getNetworkPiiPiiKeys_nodeParam = storedParamValsMap['email'] ||
                    RED.util.getMessageProperty(msg, "email");

                getNetworkPiiPiiKeys_nodeParamType = storedParamTypeMap['email'] ||
                    RED.util.getMessageProperty(msg, "email");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiPiiKeys_nodeParamType === 'str') {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is "str"');
                    getNetworkPiiPiiKeys_parameters.email = getNetworkPiiPiiKeys_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is not "str"')
                    getNetworkPiiPiiKeys_parameters.email = RED.util.getMessageProperty(msg, "email");
                }
                                
                getNetworkPiiPiiKeys_nodeParam = storedParamValsMap['mac'] ||
                    RED.util.getMessageProperty(msg, "mac");

                getNetworkPiiPiiKeys_nodeParamType = storedParamTypeMap['mac'] ||
                    RED.util.getMessageProperty(msg, "mac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiPiiKeys_nodeParamType === 'str') {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is "str"');
                    getNetworkPiiPiiKeys_parameters.mac = getNetworkPiiPiiKeys_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is not "str"')
                    getNetworkPiiPiiKeys_parameters.mac = RED.util.getMessageProperty(msg, "mac");
                }
                                
                getNetworkPiiPiiKeys_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getNetworkPiiPiiKeys_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiPiiKeys_nodeParamType === 'str') {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is "str"');
                    getNetworkPiiPiiKeys_parameters.serial = getNetworkPiiPiiKeys_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is not "str"')
                    getNetworkPiiPiiKeys_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getNetworkPiiPiiKeys_nodeParam = storedParamValsMap['imei'] ||
                    RED.util.getMessageProperty(msg, "imei");

                getNetworkPiiPiiKeys_nodeParamType = storedParamTypeMap['imei'] ||
                    RED.util.getMessageProperty(msg, "imei");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiPiiKeys_nodeParamType === 'str') {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is "str"');
                    getNetworkPiiPiiKeys_parameters.imei = getNetworkPiiPiiKeys_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is not "str"')
                    getNetworkPiiPiiKeys_parameters.imei = RED.util.getMessageProperty(msg, "imei");
                }
                                
                getNetworkPiiPiiKeys_nodeParam = storedParamValsMap['bluetoothMac'] ||
                    RED.util.getMessageProperty(msg, "bluetoothMac");

                getNetworkPiiPiiKeys_nodeParamType = storedParamTypeMap['bluetoothMac'] ||
                    RED.util.getMessageProperty(msg, "bluetoothMac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiPiiKeys_nodeParamType === 'str') {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is "str"');
                    getNetworkPiiPiiKeys_parameters.bluetoothMac = getNetworkPiiPiiKeys_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiPiiKeys_nodeParamType is not "str"')
                    getNetworkPiiPiiKeys_parameters.bluetoothMac = RED.util.getMessageProperty(msg, "bluetoothMac");
                }
                                result = client.getNetworkPiiPiiKeys(getNetworkPiiPiiKeys_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkPiiRequests') {
                var getNetworkPiiRequests_parameters = [];
                var getNetworkPiiRequests_nodeParam;
                var getNetworkPiiRequests_nodeParamType;
                
                
                getNetworkPiiRequests_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkPiiRequests_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiRequests_nodeParamType === 'str') {
                    //console.log('getNetworkPiiRequests_nodeParamType is "str"');
                    getNetworkPiiRequests_parameters.networkId = getNetworkPiiRequests_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiRequests_nodeParamType is not "str"')
                    getNetworkPiiRequests_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkPiiRequests(getNetworkPiiRequests_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkPiiRequest') {
                var createNetworkPiiRequest_parameters = [];
                var createNetworkPiiRequest_nodeParam;
                var createNetworkPiiRequest_nodeParamType;
                
                
                createNetworkPiiRequest_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkPiiRequest_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkPiiRequest_nodeParamType === 'str') {
                    //console.log('createNetworkPiiRequest_nodeParamType is "str"');
                    createNetworkPiiRequest_parameters.networkId = createNetworkPiiRequest_nodeParam || undefined;
                } else {
                    //console.log('createNetworkPiiRequest_nodeParamType is not "str"')
                    createNetworkPiiRequest_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkPiiRequest_nodeParam = storedParamValsMap['createNetworkPiiRequest'] ||
                    RED.util.getMessageProperty(msg, "createNetworkPiiRequest");

                createNetworkPiiRequest_nodeParamType = storedParamTypeMap['createNetworkPiiRequest'] ||
                    RED.util.getMessageProperty(msg, "createNetworkPiiRequest");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkPiiRequest_parameters.createNetworkPiiRequest = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkPiiRequest_nodeParam === 'object'){
                        createNetworkPiiRequest_parameters.createNetworkPiiRequest = createNetworkPiiRequest_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkPiiRequest_nodeParam || '{}'
                        createNetworkPiiRequest_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkPiiRequest_parameters.createNetworkPiiRequest = createNetworkPiiRequest_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkPiiRequest_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkPiiRequest(createNetworkPiiRequest_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkPiiRequest') {
                var getNetworkPiiRequest_parameters = [];
                var getNetworkPiiRequest_nodeParam;
                var getNetworkPiiRequest_nodeParamType;
                
                
                getNetworkPiiRequest_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkPiiRequest_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiRequest_nodeParamType === 'str') {
                    //console.log('getNetworkPiiRequest_nodeParamType is "str"');
                    getNetworkPiiRequest_parameters.networkId = getNetworkPiiRequest_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiRequest_nodeParamType is not "str"')
                    getNetworkPiiRequest_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkPiiRequest_nodeParam = storedParamValsMap['requestId'] ||
                    RED.util.getMessageProperty(msg, "requestId");

                getNetworkPiiRequest_nodeParamType = storedParamTypeMap['requestId'] ||
                    RED.util.getMessageProperty(msg, "requestId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiRequest_nodeParamType === 'str') {
                    //console.log('getNetworkPiiRequest_nodeParamType is "str"');
                    getNetworkPiiRequest_parameters.requestId = getNetworkPiiRequest_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiRequest_nodeParamType is not "str"')
                    getNetworkPiiRequest_parameters.requestId = RED.util.getMessageProperty(msg, "requestId");
                }
                                result = client.getNetworkPiiRequest(getNetworkPiiRequest_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkPiiRequest') {
                var deleteNetworkPiiRequest_parameters = [];
                var deleteNetworkPiiRequest_nodeParam;
                var deleteNetworkPiiRequest_nodeParamType;
                
                
                deleteNetworkPiiRequest_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkPiiRequest_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkPiiRequest_nodeParamType === 'str') {
                    //console.log('deleteNetworkPiiRequest_nodeParamType is "str"');
                    deleteNetworkPiiRequest_parameters.networkId = deleteNetworkPiiRequest_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkPiiRequest_nodeParamType is not "str"')
                    deleteNetworkPiiRequest_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkPiiRequest_nodeParam = storedParamValsMap['requestId'] ||
                    RED.util.getMessageProperty(msg, "requestId");

                deleteNetworkPiiRequest_nodeParamType = storedParamTypeMap['requestId'] ||
                    RED.util.getMessageProperty(msg, "requestId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkPiiRequest_nodeParamType === 'str') {
                    //console.log('deleteNetworkPiiRequest_nodeParamType is "str"');
                    deleteNetworkPiiRequest_parameters.requestId = deleteNetworkPiiRequest_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkPiiRequest_nodeParamType is not "str"')
                    deleteNetworkPiiRequest_parameters.requestId = RED.util.getMessageProperty(msg, "requestId");
                }
                                result = client.deleteNetworkPiiRequest(deleteNetworkPiiRequest_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkPiiSmDevicesForKey') {
                var getNetworkPiiSmDevicesForKey_parameters = [];
                var getNetworkPiiSmDevicesForKey_nodeParam;
                var getNetworkPiiSmDevicesForKey_nodeParamType;
                
                
                getNetworkPiiSmDevicesForKey_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkPiiSmDevicesForKey_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmDevicesForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is "str"');
                    getNetworkPiiSmDevicesForKey_parameters.networkId = getNetworkPiiSmDevicesForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is not "str"')
                    getNetworkPiiSmDevicesForKey_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkPiiSmDevicesForKey_nodeParam = storedParamValsMap['username'] ||
                    RED.util.getMessageProperty(msg, "username");

                getNetworkPiiSmDevicesForKey_nodeParamType = storedParamTypeMap['username'] ||
                    RED.util.getMessageProperty(msg, "username");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmDevicesForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is "str"');
                    getNetworkPiiSmDevicesForKey_parameters.username = getNetworkPiiSmDevicesForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is not "str"')
                    getNetworkPiiSmDevicesForKey_parameters.username = RED.util.getMessageProperty(msg, "username");
                }
                                
                getNetworkPiiSmDevicesForKey_nodeParam = storedParamValsMap['email'] ||
                    RED.util.getMessageProperty(msg, "email");

                getNetworkPiiSmDevicesForKey_nodeParamType = storedParamTypeMap['email'] ||
                    RED.util.getMessageProperty(msg, "email");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmDevicesForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is "str"');
                    getNetworkPiiSmDevicesForKey_parameters.email = getNetworkPiiSmDevicesForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is not "str"')
                    getNetworkPiiSmDevicesForKey_parameters.email = RED.util.getMessageProperty(msg, "email");
                }
                                
                getNetworkPiiSmDevicesForKey_nodeParam = storedParamValsMap['mac'] ||
                    RED.util.getMessageProperty(msg, "mac");

                getNetworkPiiSmDevicesForKey_nodeParamType = storedParamTypeMap['mac'] ||
                    RED.util.getMessageProperty(msg, "mac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmDevicesForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is "str"');
                    getNetworkPiiSmDevicesForKey_parameters.mac = getNetworkPiiSmDevicesForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is not "str"')
                    getNetworkPiiSmDevicesForKey_parameters.mac = RED.util.getMessageProperty(msg, "mac");
                }
                                
                getNetworkPiiSmDevicesForKey_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getNetworkPiiSmDevicesForKey_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmDevicesForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is "str"');
                    getNetworkPiiSmDevicesForKey_parameters.serial = getNetworkPiiSmDevicesForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is not "str"')
                    getNetworkPiiSmDevicesForKey_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getNetworkPiiSmDevicesForKey_nodeParam = storedParamValsMap['imei'] ||
                    RED.util.getMessageProperty(msg, "imei");

                getNetworkPiiSmDevicesForKey_nodeParamType = storedParamTypeMap['imei'] ||
                    RED.util.getMessageProperty(msg, "imei");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmDevicesForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is "str"');
                    getNetworkPiiSmDevicesForKey_parameters.imei = getNetworkPiiSmDevicesForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is not "str"')
                    getNetworkPiiSmDevicesForKey_parameters.imei = RED.util.getMessageProperty(msg, "imei");
                }
                                
                getNetworkPiiSmDevicesForKey_nodeParam = storedParamValsMap['bluetoothMac'] ||
                    RED.util.getMessageProperty(msg, "bluetoothMac");

                getNetworkPiiSmDevicesForKey_nodeParamType = storedParamTypeMap['bluetoothMac'] ||
                    RED.util.getMessageProperty(msg, "bluetoothMac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmDevicesForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is "str"');
                    getNetworkPiiSmDevicesForKey_parameters.bluetoothMac = getNetworkPiiSmDevicesForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmDevicesForKey_nodeParamType is not "str"')
                    getNetworkPiiSmDevicesForKey_parameters.bluetoothMac = RED.util.getMessageProperty(msg, "bluetoothMac");
                }
                                result = client.getNetworkPiiSmDevicesForKey(getNetworkPiiSmDevicesForKey_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkPiiSmOwnersForKey') {
                var getNetworkPiiSmOwnersForKey_parameters = [];
                var getNetworkPiiSmOwnersForKey_nodeParam;
                var getNetworkPiiSmOwnersForKey_nodeParamType;
                
                
                getNetworkPiiSmOwnersForKey_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkPiiSmOwnersForKey_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmOwnersForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is "str"');
                    getNetworkPiiSmOwnersForKey_parameters.networkId = getNetworkPiiSmOwnersForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is not "str"')
                    getNetworkPiiSmOwnersForKey_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkPiiSmOwnersForKey_nodeParam = storedParamValsMap['username'] ||
                    RED.util.getMessageProperty(msg, "username");

                getNetworkPiiSmOwnersForKey_nodeParamType = storedParamTypeMap['username'] ||
                    RED.util.getMessageProperty(msg, "username");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmOwnersForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is "str"');
                    getNetworkPiiSmOwnersForKey_parameters.username = getNetworkPiiSmOwnersForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is not "str"')
                    getNetworkPiiSmOwnersForKey_parameters.username = RED.util.getMessageProperty(msg, "username");
                }
                                
                getNetworkPiiSmOwnersForKey_nodeParam = storedParamValsMap['email'] ||
                    RED.util.getMessageProperty(msg, "email");

                getNetworkPiiSmOwnersForKey_nodeParamType = storedParamTypeMap['email'] ||
                    RED.util.getMessageProperty(msg, "email");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmOwnersForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is "str"');
                    getNetworkPiiSmOwnersForKey_parameters.email = getNetworkPiiSmOwnersForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is not "str"')
                    getNetworkPiiSmOwnersForKey_parameters.email = RED.util.getMessageProperty(msg, "email");
                }
                                
                getNetworkPiiSmOwnersForKey_nodeParam = storedParamValsMap['mac'] ||
                    RED.util.getMessageProperty(msg, "mac");

                getNetworkPiiSmOwnersForKey_nodeParamType = storedParamTypeMap['mac'] ||
                    RED.util.getMessageProperty(msg, "mac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmOwnersForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is "str"');
                    getNetworkPiiSmOwnersForKey_parameters.mac = getNetworkPiiSmOwnersForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is not "str"')
                    getNetworkPiiSmOwnersForKey_parameters.mac = RED.util.getMessageProperty(msg, "mac");
                }
                                
                getNetworkPiiSmOwnersForKey_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getNetworkPiiSmOwnersForKey_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmOwnersForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is "str"');
                    getNetworkPiiSmOwnersForKey_parameters.serial = getNetworkPiiSmOwnersForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is not "str"')
                    getNetworkPiiSmOwnersForKey_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getNetworkPiiSmOwnersForKey_nodeParam = storedParamValsMap['imei'] ||
                    RED.util.getMessageProperty(msg, "imei");

                getNetworkPiiSmOwnersForKey_nodeParamType = storedParamTypeMap['imei'] ||
                    RED.util.getMessageProperty(msg, "imei");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmOwnersForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is "str"');
                    getNetworkPiiSmOwnersForKey_parameters.imei = getNetworkPiiSmOwnersForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is not "str"')
                    getNetworkPiiSmOwnersForKey_parameters.imei = RED.util.getMessageProperty(msg, "imei");
                }
                                
                getNetworkPiiSmOwnersForKey_nodeParam = storedParamValsMap['bluetoothMac'] ||
                    RED.util.getMessageProperty(msg, "bluetoothMac");

                getNetworkPiiSmOwnersForKey_nodeParamType = storedParamTypeMap['bluetoothMac'] ||
                    RED.util.getMessageProperty(msg, "bluetoothMac");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkPiiSmOwnersForKey_nodeParamType === 'str') {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is "str"');
                    getNetworkPiiSmOwnersForKey_parameters.bluetoothMac = getNetworkPiiSmOwnersForKey_nodeParam || undefined;
                } else {
                    //console.log('getNetworkPiiSmOwnersForKey_nodeParamType is not "str"')
                    getNetworkPiiSmOwnersForKey_parameters.bluetoothMac = RED.util.getMessageProperty(msg, "bluetoothMac");
                }
                                result = client.getNetworkPiiSmOwnersForKey(getNetworkPiiSmOwnersForKey_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSettings') {
                var getNetworkSettings_parameters = [];
                var getNetworkSettings_nodeParam;
                var getNetworkSettings_nodeParamType;
                
                
                getNetworkSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSettings_nodeParamType === 'str') {
                    //console.log('getNetworkSettings_nodeParamType is "str"');
                    getNetworkSettings_parameters.networkId = getNetworkSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSettings_nodeParamType is not "str"')
                    getNetworkSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSettings(getNetworkSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSettings') {
                var updateNetworkSettings_parameters = [];
                var updateNetworkSettings_nodeParam;
                var updateNetworkSettings_nodeParamType;
                
                
                updateNetworkSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSettings_nodeParamType === 'str') {
                    //console.log('updateNetworkSettings_nodeParamType is "str"');
                    updateNetworkSettings_parameters.networkId = updateNetworkSettings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSettings_nodeParamType is not "str"')
                    updateNetworkSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSettings_nodeParam = storedParamValsMap['updateNetworkSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSettings");

                updateNetworkSettings_nodeParamType = storedParamTypeMap['updateNetworkSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSettings_parameters.updateNetworkSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSettings_nodeParam === 'object'){
                        updateNetworkSettings_parameters.updateNetworkSettings = updateNetworkSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSettings_nodeParam || '{}'
                        updateNetworkSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSettings_parameters.updateNetworkSettings = updateNetworkSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSettings(updateNetworkSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSmBypassActivationLockAttempt') {
                var createNetworkSmBypassActivationLockAttempt_parameters = [];
                var createNetworkSmBypassActivationLockAttempt_nodeParam;
                var createNetworkSmBypassActivationLockAttempt_nodeParamType;
                
                
                createNetworkSmBypassActivationLockAttempt_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSmBypassActivationLockAttempt_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSmBypassActivationLockAttempt_nodeParamType === 'str') {
                    //console.log('createNetworkSmBypassActivationLockAttempt_nodeParamType is "str"');
                    createNetworkSmBypassActivationLockAttempt_parameters.networkId = createNetworkSmBypassActivationLockAttempt_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSmBypassActivationLockAttempt_nodeParamType is not "str"')
                    createNetworkSmBypassActivationLockAttempt_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSmBypassActivationLockAttempt_nodeParam = storedParamValsMap['createNetworkSmBypassActivationLockAttempt'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSmBypassActivationLockAttempt");

                createNetworkSmBypassActivationLockAttempt_nodeParamType = storedParamTypeMap['createNetworkSmBypassActivationLockAttempt'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSmBypassActivationLockAttempt");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSmBypassActivationLockAttempt_parameters.createNetworkSmBypassActivationLockAttempt = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSmBypassActivationLockAttempt_nodeParam === 'object'){
                        createNetworkSmBypassActivationLockAttempt_parameters.createNetworkSmBypassActivationLockAttempt = createNetworkSmBypassActivationLockAttempt_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSmBypassActivationLockAttempt_nodeParam || '{}'
                        createNetworkSmBypassActivationLockAttempt_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSmBypassActivationLockAttempt_parameters.createNetworkSmBypassActivationLockAttempt = createNetworkSmBypassActivationLockAttempt_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSmBypassActivationLockAttempt_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSmBypassActivationLockAttempt(createNetworkSmBypassActivationLockAttempt_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmBypassActivationLockAttempt') {
                var getNetworkSmBypassActivationLockAttempt_parameters = [];
                var getNetworkSmBypassActivationLockAttempt_nodeParam;
                var getNetworkSmBypassActivationLockAttempt_nodeParamType;
                
                
                getNetworkSmBypassActivationLockAttempt_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmBypassActivationLockAttempt_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmBypassActivationLockAttempt_nodeParamType === 'str') {
                    //console.log('getNetworkSmBypassActivationLockAttempt_nodeParamType is "str"');
                    getNetworkSmBypassActivationLockAttempt_parameters.networkId = getNetworkSmBypassActivationLockAttempt_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmBypassActivationLockAttempt_nodeParamType is not "str"')
                    getNetworkSmBypassActivationLockAttempt_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmBypassActivationLockAttempt_nodeParam = storedParamValsMap['attemptId'] ||
                    RED.util.getMessageProperty(msg, "attemptId");

                getNetworkSmBypassActivationLockAttempt_nodeParamType = storedParamTypeMap['attemptId'] ||
                    RED.util.getMessageProperty(msg, "attemptId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmBypassActivationLockAttempt_nodeParamType === 'str') {
                    //console.log('getNetworkSmBypassActivationLockAttempt_nodeParamType is "str"');
                    getNetworkSmBypassActivationLockAttempt_parameters.attemptId = getNetworkSmBypassActivationLockAttempt_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmBypassActivationLockAttempt_nodeParamType is not "str"')
                    getNetworkSmBypassActivationLockAttempt_parameters.attemptId = RED.util.getMessageProperty(msg, "attemptId");
                }
                                result = client.getNetworkSmBypassActivationLockAttempt(getNetworkSmBypassActivationLockAttempt_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDevices') {
                var getNetworkSmDevices_parameters = [];
                var getNetworkSmDevices_nodeParam;
                var getNetworkSmDevices_nodeParamType;
                
                
                getNetworkSmDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.networkId = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDevices_nodeParam = storedParamValsMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.fields = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.fields = RED.util.getMessageProperty(msg, "fields");
                }
                                
                getNetworkSmDevices_nodeParam = storedParamValsMap['wifiMacs'] ||
                    RED.util.getMessageProperty(msg, "wifiMacs");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['wifiMacs'] ||
                    RED.util.getMessageProperty(msg, "wifiMacs");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.wifiMacs = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.wifiMacs = RED.util.getMessageProperty(msg, "wifiMacs");
                }
                                
                getNetworkSmDevices_nodeParam = storedParamValsMap['serials'] ||
                    RED.util.getMessageProperty(msg, "serials");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['serials'] ||
                    RED.util.getMessageProperty(msg, "serials");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.serials = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.serials = RED.util.getMessageProperty(msg, "serials");
                }
                                
                getNetworkSmDevices_nodeParam = storedParamValsMap['ids'] ||
                    RED.util.getMessageProperty(msg, "ids");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['ids'] ||
                    RED.util.getMessageProperty(msg, "ids");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.ids = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.ids = RED.util.getMessageProperty(msg, "ids");
                }
                                
                getNetworkSmDevices_nodeParam = storedParamValsMap['scope'] ||
                    RED.util.getMessageProperty(msg, "scope");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['scope'] ||
                    RED.util.getMessageProperty(msg, "scope");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.scope = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.scope = RED.util.getMessageProperty(msg, "scope");
                }
                                
                getNetworkSmDevices_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.perPage = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkSmDevices_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.startingAfter = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkSmDevices_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkSmDevices_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevices_nodeParamType is "str"');
                    getNetworkSmDevices_parameters.endingBefore = getNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevices_nodeParamType is not "str"')
                    getNetworkSmDevices_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkSmDevices(getNetworkSmDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'checkinNetworkSmDevices') {
                var checkinNetworkSmDevices_parameters = [];
                var checkinNetworkSmDevices_nodeParam;
                var checkinNetworkSmDevices_nodeParamType;
                
                
                checkinNetworkSmDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                checkinNetworkSmDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (checkinNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('checkinNetworkSmDevices_nodeParamType is "str"');
                    checkinNetworkSmDevices_parameters.networkId = checkinNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('checkinNetworkSmDevices_nodeParamType is not "str"')
                    checkinNetworkSmDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                checkinNetworkSmDevices_nodeParam = storedParamValsMap['checkinNetworkSmDevices'] ||
                    RED.util.getMessageProperty(msg, "checkinNetworkSmDevices");

                checkinNetworkSmDevices_nodeParamType = storedParamTypeMap['checkinNetworkSmDevices'] ||
                    RED.util.getMessageProperty(msg, "checkinNetworkSmDevices");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        checkinNetworkSmDevices_parameters.checkinNetworkSmDevices = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof checkinNetworkSmDevices_nodeParam === 'object'){
                        checkinNetworkSmDevices_parameters.checkinNetworkSmDevices = checkinNetworkSmDevices_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = checkinNetworkSmDevices_nodeParam || '{}'
                        checkinNetworkSmDevices_nodeParam = JSON.parse(nodeParam) ; 
                        checkinNetworkSmDevices_parameters.checkinNetworkSmDevices = checkinNetworkSmDevices_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof checkinNetworkSmDevices_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.checkinNetworkSmDevices(checkinNetworkSmDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSmDevicesFields') {
                var updateNetworkSmDevicesFields_parameters = [];
                var updateNetworkSmDevicesFields_nodeParam;
                var updateNetworkSmDevicesFields_nodeParamType;
                
                
                updateNetworkSmDevicesFields_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSmDevicesFields_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSmDevicesFields_nodeParamType === 'str') {
                    //console.log('updateNetworkSmDevicesFields_nodeParamType is "str"');
                    updateNetworkSmDevicesFields_parameters.networkId = updateNetworkSmDevicesFields_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSmDevicesFields_nodeParamType is not "str"')
                    updateNetworkSmDevicesFields_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSmDevicesFields_nodeParam = storedParamValsMap['updateNetworkSmDevicesFields'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSmDevicesFields");

                updateNetworkSmDevicesFields_nodeParamType = storedParamTypeMap['updateNetworkSmDevicesFields'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSmDevicesFields");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSmDevicesFields_parameters.updateNetworkSmDevicesFields = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSmDevicesFields_nodeParam === 'object'){
                        updateNetworkSmDevicesFields_parameters.updateNetworkSmDevicesFields = updateNetworkSmDevicesFields_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSmDevicesFields_nodeParam || '{}'
                        updateNetworkSmDevicesFields_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSmDevicesFields_parameters.updateNetworkSmDevicesFields = updateNetworkSmDevicesFields_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSmDevicesFields_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSmDevicesFields(updateNetworkSmDevicesFields_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'lockNetworkSmDevices') {
                var lockNetworkSmDevices_parameters = [];
                var lockNetworkSmDevices_nodeParam;
                var lockNetworkSmDevices_nodeParamType;
                
                
                lockNetworkSmDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                lockNetworkSmDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (lockNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('lockNetworkSmDevices_nodeParamType is "str"');
                    lockNetworkSmDevices_parameters.networkId = lockNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('lockNetworkSmDevices_nodeParamType is not "str"')
                    lockNetworkSmDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                lockNetworkSmDevices_nodeParam = storedParamValsMap['lockNetworkSmDevices'] ||
                    RED.util.getMessageProperty(msg, "lockNetworkSmDevices");

                lockNetworkSmDevices_nodeParamType = storedParamTypeMap['lockNetworkSmDevices'] ||
                    RED.util.getMessageProperty(msg, "lockNetworkSmDevices");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        lockNetworkSmDevices_parameters.lockNetworkSmDevices = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof lockNetworkSmDevices_nodeParam === 'object'){
                        lockNetworkSmDevices_parameters.lockNetworkSmDevices = lockNetworkSmDevices_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = lockNetworkSmDevices_nodeParam || '{}'
                        lockNetworkSmDevices_nodeParam = JSON.parse(nodeParam) ; 
                        lockNetworkSmDevices_parameters.lockNetworkSmDevices = lockNetworkSmDevices_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof lockNetworkSmDevices_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.lockNetworkSmDevices(lockNetworkSmDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'modifyNetworkSmDevicesTags') {
                var modifyNetworkSmDevicesTags_parameters = [];
                var modifyNetworkSmDevicesTags_nodeParam;
                var modifyNetworkSmDevicesTags_nodeParamType;
                
                
                modifyNetworkSmDevicesTags_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                modifyNetworkSmDevicesTags_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (modifyNetworkSmDevicesTags_nodeParamType === 'str') {
                    //console.log('modifyNetworkSmDevicesTags_nodeParamType is "str"');
                    modifyNetworkSmDevicesTags_parameters.networkId = modifyNetworkSmDevicesTags_nodeParam || undefined;
                } else {
                    //console.log('modifyNetworkSmDevicesTags_nodeParamType is not "str"')
                    modifyNetworkSmDevicesTags_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                modifyNetworkSmDevicesTags_nodeParam = storedParamValsMap['modifyNetworkSmDevicesTags'] ||
                    RED.util.getMessageProperty(msg, "modifyNetworkSmDevicesTags");

                modifyNetworkSmDevicesTags_nodeParamType = storedParamTypeMap['modifyNetworkSmDevicesTags'] ||
                    RED.util.getMessageProperty(msg, "modifyNetworkSmDevicesTags");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        modifyNetworkSmDevicesTags_parameters.modifyNetworkSmDevicesTags = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof modifyNetworkSmDevicesTags_nodeParam === 'object'){
                        modifyNetworkSmDevicesTags_parameters.modifyNetworkSmDevicesTags = modifyNetworkSmDevicesTags_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = modifyNetworkSmDevicesTags_nodeParam || '{}'
                        modifyNetworkSmDevicesTags_nodeParam = JSON.parse(nodeParam) ; 
                        modifyNetworkSmDevicesTags_parameters.modifyNetworkSmDevicesTags = modifyNetworkSmDevicesTags_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof modifyNetworkSmDevicesTags_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.modifyNetworkSmDevicesTags(modifyNetworkSmDevicesTags_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'moveNetworkSmDevices') {
                var moveNetworkSmDevices_parameters = [];
                var moveNetworkSmDevices_nodeParam;
                var moveNetworkSmDevices_nodeParamType;
                
                
                moveNetworkSmDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                moveNetworkSmDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (moveNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('moveNetworkSmDevices_nodeParamType is "str"');
                    moveNetworkSmDevices_parameters.networkId = moveNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('moveNetworkSmDevices_nodeParamType is not "str"')
                    moveNetworkSmDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                moveNetworkSmDevices_nodeParam = storedParamValsMap['moveNetworkSmDevices'] ||
                    RED.util.getMessageProperty(msg, "moveNetworkSmDevices");

                moveNetworkSmDevices_nodeParamType = storedParamTypeMap['moveNetworkSmDevices'] ||
                    RED.util.getMessageProperty(msg, "moveNetworkSmDevices");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        moveNetworkSmDevices_parameters.moveNetworkSmDevices = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof moveNetworkSmDevices_nodeParam === 'object'){
                        moveNetworkSmDevices_parameters.moveNetworkSmDevices = moveNetworkSmDevices_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = moveNetworkSmDevices_nodeParam || '{}'
                        moveNetworkSmDevices_nodeParam = JSON.parse(nodeParam) ; 
                        moveNetworkSmDevices_parameters.moveNetworkSmDevices = moveNetworkSmDevices_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof moveNetworkSmDevices_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.moveNetworkSmDevices(moveNetworkSmDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'wipeNetworkSmDevices') {
                var wipeNetworkSmDevices_parameters = [];
                var wipeNetworkSmDevices_nodeParam;
                var wipeNetworkSmDevices_nodeParamType;
                
                
                wipeNetworkSmDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                wipeNetworkSmDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (wipeNetworkSmDevices_nodeParamType === 'str') {
                    //console.log('wipeNetworkSmDevices_nodeParamType is "str"');
                    wipeNetworkSmDevices_parameters.networkId = wipeNetworkSmDevices_nodeParam || undefined;
                } else {
                    //console.log('wipeNetworkSmDevices_nodeParamType is not "str"')
                    wipeNetworkSmDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                wipeNetworkSmDevices_nodeParam = storedParamValsMap['wipeNetworkSmDevices'] ||
                    RED.util.getMessageProperty(msg, "wipeNetworkSmDevices");

                wipeNetworkSmDevices_nodeParamType = storedParamTypeMap['wipeNetworkSmDevices'] ||
                    RED.util.getMessageProperty(msg, "wipeNetworkSmDevices");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        wipeNetworkSmDevices_parameters.wipeNetworkSmDevices = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof wipeNetworkSmDevices_nodeParam === 'object'){
                        wipeNetworkSmDevices_parameters.wipeNetworkSmDevices = wipeNetworkSmDevices_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = wipeNetworkSmDevices_nodeParam || '{}'
                        wipeNetworkSmDevices_nodeParam = JSON.parse(nodeParam) ; 
                        wipeNetworkSmDevices_parameters.wipeNetworkSmDevices = wipeNetworkSmDevices_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof wipeNetworkSmDevices_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.wipeNetworkSmDevices(wipeNetworkSmDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceCellularUsageHistory') {
                var getNetworkSmDeviceCellularUsageHistory_parameters = [];
                var getNetworkSmDeviceCellularUsageHistory_nodeParam;
                var getNetworkSmDeviceCellularUsageHistory_nodeParamType;
                
                
                getNetworkSmDeviceCellularUsageHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceCellularUsageHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceCellularUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceCellularUsageHistory_nodeParamType is "str"');
                    getNetworkSmDeviceCellularUsageHistory_parameters.networkId = getNetworkSmDeviceCellularUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceCellularUsageHistory_nodeParamType is not "str"')
                    getNetworkSmDeviceCellularUsageHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceCellularUsageHistory_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceCellularUsageHistory_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceCellularUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceCellularUsageHistory_nodeParamType is "str"');
                    getNetworkSmDeviceCellularUsageHistory_parameters.deviceId = getNetworkSmDeviceCellularUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceCellularUsageHistory_nodeParamType is not "str"')
                    getNetworkSmDeviceCellularUsageHistory_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.getNetworkSmDeviceCellularUsageHistory(getNetworkSmDeviceCellularUsageHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceCerts') {
                var getNetworkSmDeviceCerts_parameters = [];
                var getNetworkSmDeviceCerts_nodeParam;
                var getNetworkSmDeviceCerts_nodeParamType;
                
                
                getNetworkSmDeviceCerts_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceCerts_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceCerts_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceCerts_nodeParamType is "str"');
                    getNetworkSmDeviceCerts_parameters.networkId = getNetworkSmDeviceCerts_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceCerts_nodeParamType is not "str"')
                    getNetworkSmDeviceCerts_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceCerts_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceCerts_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceCerts_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceCerts_nodeParamType is "str"');
                    getNetworkSmDeviceCerts_parameters.deviceId = getNetworkSmDeviceCerts_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceCerts_nodeParamType is not "str"')
                    getNetworkSmDeviceCerts_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.getNetworkSmDeviceCerts(getNetworkSmDeviceCerts_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceConnectivity') {
                var getNetworkSmDeviceConnectivity_parameters = [];
                var getNetworkSmDeviceConnectivity_nodeParam;
                var getNetworkSmDeviceConnectivity_nodeParamType;
                
                
                getNetworkSmDeviceConnectivity_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceConnectivity_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceConnectivity_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is "str"');
                    getNetworkSmDeviceConnectivity_parameters.networkId = getNetworkSmDeviceConnectivity_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is not "str"')
                    getNetworkSmDeviceConnectivity_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceConnectivity_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceConnectivity_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceConnectivity_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is "str"');
                    getNetworkSmDeviceConnectivity_parameters.deviceId = getNetworkSmDeviceConnectivity_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is not "str"')
                    getNetworkSmDeviceConnectivity_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                
                getNetworkSmDeviceConnectivity_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkSmDeviceConnectivity_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceConnectivity_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is "str"');
                    getNetworkSmDeviceConnectivity_parameters.perPage = getNetworkSmDeviceConnectivity_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is not "str"')
                    getNetworkSmDeviceConnectivity_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkSmDeviceConnectivity_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkSmDeviceConnectivity_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceConnectivity_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is "str"');
                    getNetworkSmDeviceConnectivity_parameters.startingAfter = getNetworkSmDeviceConnectivity_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is not "str"')
                    getNetworkSmDeviceConnectivity_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkSmDeviceConnectivity_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkSmDeviceConnectivity_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceConnectivity_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is "str"');
                    getNetworkSmDeviceConnectivity_parameters.endingBefore = getNetworkSmDeviceConnectivity_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceConnectivity_nodeParamType is not "str"')
                    getNetworkSmDeviceConnectivity_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkSmDeviceConnectivity(getNetworkSmDeviceConnectivity_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceDesktopLogs') {
                var getNetworkSmDeviceDesktopLogs_parameters = [];
                var getNetworkSmDeviceDesktopLogs_nodeParam;
                var getNetworkSmDeviceDesktopLogs_nodeParamType;
                
                
                getNetworkSmDeviceDesktopLogs_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceDesktopLogs_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDesktopLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDesktopLogs_parameters.networkId = getNetworkSmDeviceDesktopLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDesktopLogs_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceDesktopLogs_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceDesktopLogs_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDesktopLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDesktopLogs_parameters.deviceId = getNetworkSmDeviceDesktopLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDesktopLogs_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                
                getNetworkSmDeviceDesktopLogs_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkSmDeviceDesktopLogs_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDesktopLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDesktopLogs_parameters.perPage = getNetworkSmDeviceDesktopLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDesktopLogs_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkSmDeviceDesktopLogs_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkSmDeviceDesktopLogs_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDesktopLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDesktopLogs_parameters.startingAfter = getNetworkSmDeviceDesktopLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDesktopLogs_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkSmDeviceDesktopLogs_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkSmDeviceDesktopLogs_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDesktopLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDesktopLogs_parameters.endingBefore = getNetworkSmDeviceDesktopLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDesktopLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDesktopLogs_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkSmDeviceDesktopLogs(getNetworkSmDeviceDesktopLogs_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceDeviceCommandLogs') {
                var getNetworkSmDeviceDeviceCommandLogs_parameters = [];
                var getNetworkSmDeviceDeviceCommandLogs_nodeParam;
                var getNetworkSmDeviceDeviceCommandLogs_nodeParamType;
                
                
                getNetworkSmDeviceDeviceCommandLogs_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceDeviceCommandLogs_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDeviceCommandLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDeviceCommandLogs_parameters.networkId = getNetworkSmDeviceDeviceCommandLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDeviceCommandLogs_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceDeviceCommandLogs_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceDeviceCommandLogs_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDeviceCommandLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDeviceCommandLogs_parameters.deviceId = getNetworkSmDeviceDeviceCommandLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDeviceCommandLogs_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                
                getNetworkSmDeviceDeviceCommandLogs_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkSmDeviceDeviceCommandLogs_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDeviceCommandLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDeviceCommandLogs_parameters.perPage = getNetworkSmDeviceDeviceCommandLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDeviceCommandLogs_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkSmDeviceDeviceCommandLogs_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkSmDeviceDeviceCommandLogs_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDeviceCommandLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDeviceCommandLogs_parameters.startingAfter = getNetworkSmDeviceDeviceCommandLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDeviceCommandLogs_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkSmDeviceDeviceCommandLogs_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkSmDeviceDeviceCommandLogs_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDeviceCommandLogs_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is "str"');
                    getNetworkSmDeviceDeviceCommandLogs_parameters.endingBefore = getNetworkSmDeviceDeviceCommandLogs_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDeviceCommandLogs_nodeParamType is not "str"')
                    getNetworkSmDeviceDeviceCommandLogs_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkSmDeviceDeviceCommandLogs(getNetworkSmDeviceDeviceCommandLogs_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceDeviceProfiles') {
                var getNetworkSmDeviceDeviceProfiles_parameters = [];
                var getNetworkSmDeviceDeviceProfiles_nodeParam;
                var getNetworkSmDeviceDeviceProfiles_nodeParamType;
                
                
                getNetworkSmDeviceDeviceProfiles_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceDeviceProfiles_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDeviceProfiles_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDeviceProfiles_nodeParamType is "str"');
                    getNetworkSmDeviceDeviceProfiles_parameters.networkId = getNetworkSmDeviceDeviceProfiles_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDeviceProfiles_nodeParamType is not "str"')
                    getNetworkSmDeviceDeviceProfiles_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceDeviceProfiles_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceDeviceProfiles_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceDeviceProfiles_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceDeviceProfiles_nodeParamType is "str"');
                    getNetworkSmDeviceDeviceProfiles_parameters.deviceId = getNetworkSmDeviceDeviceProfiles_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceDeviceProfiles_nodeParamType is not "str"')
                    getNetworkSmDeviceDeviceProfiles_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.getNetworkSmDeviceDeviceProfiles(getNetworkSmDeviceDeviceProfiles_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceNetworkAdapters') {
                var getNetworkSmDeviceNetworkAdapters_parameters = [];
                var getNetworkSmDeviceNetworkAdapters_nodeParam;
                var getNetworkSmDeviceNetworkAdapters_nodeParamType;
                
                
                getNetworkSmDeviceNetworkAdapters_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceNetworkAdapters_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceNetworkAdapters_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceNetworkAdapters_nodeParamType is "str"');
                    getNetworkSmDeviceNetworkAdapters_parameters.networkId = getNetworkSmDeviceNetworkAdapters_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceNetworkAdapters_nodeParamType is not "str"')
                    getNetworkSmDeviceNetworkAdapters_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceNetworkAdapters_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceNetworkAdapters_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceNetworkAdapters_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceNetworkAdapters_nodeParamType is "str"');
                    getNetworkSmDeviceNetworkAdapters_parameters.deviceId = getNetworkSmDeviceNetworkAdapters_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceNetworkAdapters_nodeParamType is not "str"')
                    getNetworkSmDeviceNetworkAdapters_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.getNetworkSmDeviceNetworkAdapters(getNetworkSmDeviceNetworkAdapters_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDevicePerformanceHistory') {
                var getNetworkSmDevicePerformanceHistory_parameters = [];
                var getNetworkSmDevicePerformanceHistory_nodeParam;
                var getNetworkSmDevicePerformanceHistory_nodeParamType;
                
                
                getNetworkSmDevicePerformanceHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDevicePerformanceHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevicePerformanceHistory_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is "str"');
                    getNetworkSmDevicePerformanceHistory_parameters.networkId = getNetworkSmDevicePerformanceHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is not "str"')
                    getNetworkSmDevicePerformanceHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDevicePerformanceHistory_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDevicePerformanceHistory_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevicePerformanceHistory_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is "str"');
                    getNetworkSmDevicePerformanceHistory_parameters.deviceId = getNetworkSmDevicePerformanceHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is not "str"')
                    getNetworkSmDevicePerformanceHistory_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                
                getNetworkSmDevicePerformanceHistory_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkSmDevicePerformanceHistory_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevicePerformanceHistory_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is "str"');
                    getNetworkSmDevicePerformanceHistory_parameters.perPage = getNetworkSmDevicePerformanceHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is not "str"')
                    getNetworkSmDevicePerformanceHistory_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkSmDevicePerformanceHistory_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkSmDevicePerformanceHistory_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevicePerformanceHistory_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is "str"');
                    getNetworkSmDevicePerformanceHistory_parameters.startingAfter = getNetworkSmDevicePerformanceHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is not "str"')
                    getNetworkSmDevicePerformanceHistory_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkSmDevicePerformanceHistory_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkSmDevicePerformanceHistory_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDevicePerformanceHistory_nodeParamType === 'str') {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is "str"');
                    getNetworkSmDevicePerformanceHistory_parameters.endingBefore = getNetworkSmDevicePerformanceHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDevicePerformanceHistory_nodeParamType is not "str"')
                    getNetworkSmDevicePerformanceHistory_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkSmDevicePerformanceHistory(getNetworkSmDevicePerformanceHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'refreshNetworkSmDeviceDetails') {
                var refreshNetworkSmDeviceDetails_parameters = [];
                var refreshNetworkSmDeviceDetails_nodeParam;
                var refreshNetworkSmDeviceDetails_nodeParamType;
                
                
                refreshNetworkSmDeviceDetails_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                refreshNetworkSmDeviceDetails_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (refreshNetworkSmDeviceDetails_nodeParamType === 'str') {
                    //console.log('refreshNetworkSmDeviceDetails_nodeParamType is "str"');
                    refreshNetworkSmDeviceDetails_parameters.networkId = refreshNetworkSmDeviceDetails_nodeParam || undefined;
                } else {
                    //console.log('refreshNetworkSmDeviceDetails_nodeParamType is not "str"')
                    refreshNetworkSmDeviceDetails_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                refreshNetworkSmDeviceDetails_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                refreshNetworkSmDeviceDetails_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (refreshNetworkSmDeviceDetails_nodeParamType === 'str') {
                    //console.log('refreshNetworkSmDeviceDetails_nodeParamType is "str"');
                    refreshNetworkSmDeviceDetails_parameters.deviceId = refreshNetworkSmDeviceDetails_nodeParam || undefined;
                } else {
                    //console.log('refreshNetworkSmDeviceDetails_nodeParamType is not "str"')
                    refreshNetworkSmDeviceDetails_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.refreshNetworkSmDeviceDetails(refreshNetworkSmDeviceDetails_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceRestrictions') {
                var getNetworkSmDeviceRestrictions_parameters = [];
                var getNetworkSmDeviceRestrictions_nodeParam;
                var getNetworkSmDeviceRestrictions_nodeParamType;
                
                
                getNetworkSmDeviceRestrictions_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceRestrictions_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceRestrictions_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceRestrictions_nodeParamType is "str"');
                    getNetworkSmDeviceRestrictions_parameters.networkId = getNetworkSmDeviceRestrictions_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceRestrictions_nodeParamType is not "str"')
                    getNetworkSmDeviceRestrictions_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceRestrictions_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceRestrictions_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceRestrictions_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceRestrictions_nodeParamType is "str"');
                    getNetworkSmDeviceRestrictions_parameters.deviceId = getNetworkSmDeviceRestrictions_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceRestrictions_nodeParamType is not "str"')
                    getNetworkSmDeviceRestrictions_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.getNetworkSmDeviceRestrictions(getNetworkSmDeviceRestrictions_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceSecurityCenters') {
                var getNetworkSmDeviceSecurityCenters_parameters = [];
                var getNetworkSmDeviceSecurityCenters_nodeParam;
                var getNetworkSmDeviceSecurityCenters_nodeParamType;
                
                
                getNetworkSmDeviceSecurityCenters_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceSecurityCenters_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceSecurityCenters_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceSecurityCenters_nodeParamType is "str"');
                    getNetworkSmDeviceSecurityCenters_parameters.networkId = getNetworkSmDeviceSecurityCenters_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceSecurityCenters_nodeParamType is not "str"')
                    getNetworkSmDeviceSecurityCenters_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceSecurityCenters_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceSecurityCenters_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceSecurityCenters_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceSecurityCenters_nodeParamType is "str"');
                    getNetworkSmDeviceSecurityCenters_parameters.deviceId = getNetworkSmDeviceSecurityCenters_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceSecurityCenters_nodeParamType is not "str"')
                    getNetworkSmDeviceSecurityCenters_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.getNetworkSmDeviceSecurityCenters(getNetworkSmDeviceSecurityCenters_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceSoftwares') {
                var getNetworkSmDeviceSoftwares_parameters = [];
                var getNetworkSmDeviceSoftwares_nodeParam;
                var getNetworkSmDeviceSoftwares_nodeParamType;
                
                
                getNetworkSmDeviceSoftwares_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceSoftwares_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceSoftwares_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceSoftwares_nodeParamType is "str"');
                    getNetworkSmDeviceSoftwares_parameters.networkId = getNetworkSmDeviceSoftwares_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceSoftwares_nodeParamType is not "str"')
                    getNetworkSmDeviceSoftwares_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceSoftwares_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceSoftwares_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceSoftwares_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceSoftwares_nodeParamType is "str"');
                    getNetworkSmDeviceSoftwares_parameters.deviceId = getNetworkSmDeviceSoftwares_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceSoftwares_nodeParamType is not "str"')
                    getNetworkSmDeviceSoftwares_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.getNetworkSmDeviceSoftwares(getNetworkSmDeviceSoftwares_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'unenrollNetworkSmDevice') {
                var unenrollNetworkSmDevice_parameters = [];
                var unenrollNetworkSmDevice_nodeParam;
                var unenrollNetworkSmDevice_nodeParamType;
                
                
                unenrollNetworkSmDevice_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                unenrollNetworkSmDevice_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (unenrollNetworkSmDevice_nodeParamType === 'str') {
                    //console.log('unenrollNetworkSmDevice_nodeParamType is "str"');
                    unenrollNetworkSmDevice_parameters.networkId = unenrollNetworkSmDevice_nodeParam || undefined;
                } else {
                    //console.log('unenrollNetworkSmDevice_nodeParamType is not "str"')
                    unenrollNetworkSmDevice_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                unenrollNetworkSmDevice_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                unenrollNetworkSmDevice_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (unenrollNetworkSmDevice_nodeParamType === 'str') {
                    //console.log('unenrollNetworkSmDevice_nodeParamType is "str"');
                    unenrollNetworkSmDevice_parameters.deviceId = unenrollNetworkSmDevice_nodeParam || undefined;
                } else {
                    //console.log('unenrollNetworkSmDevice_nodeParamType is not "str"')
                    unenrollNetworkSmDevice_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.unenrollNetworkSmDevice(unenrollNetworkSmDevice_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmDeviceWlanLists') {
                var getNetworkSmDeviceWlanLists_parameters = [];
                var getNetworkSmDeviceWlanLists_nodeParam;
                var getNetworkSmDeviceWlanLists_nodeParamType;
                
                
                getNetworkSmDeviceWlanLists_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmDeviceWlanLists_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceWlanLists_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceWlanLists_nodeParamType is "str"');
                    getNetworkSmDeviceWlanLists_parameters.networkId = getNetworkSmDeviceWlanLists_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceWlanLists_nodeParamType is not "str"')
                    getNetworkSmDeviceWlanLists_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmDeviceWlanLists_nodeParam = storedParamValsMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                getNetworkSmDeviceWlanLists_nodeParamType = storedParamTypeMap['deviceId'] ||
                    RED.util.getMessageProperty(msg, "deviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmDeviceWlanLists_nodeParamType === 'str') {
                    //console.log('getNetworkSmDeviceWlanLists_nodeParamType is "str"');
                    getNetworkSmDeviceWlanLists_parameters.deviceId = getNetworkSmDeviceWlanLists_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmDeviceWlanLists_nodeParamType is not "str"')
                    getNetworkSmDeviceWlanLists_parameters.deviceId = RED.util.getMessageProperty(msg, "deviceId");
                }
                                result = client.getNetworkSmDeviceWlanLists(getNetworkSmDeviceWlanLists_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmProfiles') {
                var getNetworkSmProfiles_parameters = [];
                var getNetworkSmProfiles_nodeParam;
                var getNetworkSmProfiles_nodeParamType;
                
                
                getNetworkSmProfiles_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmProfiles_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmProfiles_nodeParamType === 'str') {
                    //console.log('getNetworkSmProfiles_nodeParamType is "str"');
                    getNetworkSmProfiles_parameters.networkId = getNetworkSmProfiles_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmProfiles_nodeParamType is not "str"')
                    getNetworkSmProfiles_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSmProfiles(getNetworkSmProfiles_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmTargetGroups') {
                var getNetworkSmTargetGroups_parameters = [];
                var getNetworkSmTargetGroups_nodeParam;
                var getNetworkSmTargetGroups_nodeParamType;
                
                
                getNetworkSmTargetGroups_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmTargetGroups_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmTargetGroups_nodeParamType === 'str') {
                    //console.log('getNetworkSmTargetGroups_nodeParamType is "str"');
                    getNetworkSmTargetGroups_parameters.networkId = getNetworkSmTargetGroups_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmTargetGroups_nodeParamType is not "str"')
                    getNetworkSmTargetGroups_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmTargetGroups_nodeParam = storedParamValsMap['withDetails'] ||
                    RED.util.getMessageProperty(msg, "withDetails");

                getNetworkSmTargetGroups_nodeParamType = storedParamTypeMap['withDetails'] ||
                    RED.util.getMessageProperty(msg, "withDetails");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmTargetGroups_nodeParamType === 'str') {
                    //console.log('getNetworkSmTargetGroups_nodeParamType is "str"');
                    getNetworkSmTargetGroups_parameters.withDetails = getNetworkSmTargetGroups_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmTargetGroups_nodeParamType is not "str"')
                    getNetworkSmTargetGroups_parameters.withDetails = RED.util.getMessageProperty(msg, "withDetails");
                }
                                result = client.getNetworkSmTargetGroups(getNetworkSmTargetGroups_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSmTargetGroup') {
                var createNetworkSmTargetGroup_parameters = [];
                var createNetworkSmTargetGroup_nodeParam;
                var createNetworkSmTargetGroup_nodeParamType;
                
                
                createNetworkSmTargetGroup_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSmTargetGroup_nodeParamType === 'str') {
                    //console.log('createNetworkSmTargetGroup_nodeParamType is "str"');
                    createNetworkSmTargetGroup_parameters.networkId = createNetworkSmTargetGroup_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSmTargetGroup_nodeParamType is not "str"')
                    createNetworkSmTargetGroup_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSmTargetGroup_nodeParam = storedParamValsMap['createNetworkSmTargetGroup'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSmTargetGroup");

                createNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['createNetworkSmTargetGroup'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSmTargetGroup");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSmTargetGroup_parameters.createNetworkSmTargetGroup = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSmTargetGroup_nodeParam === 'object'){
                        createNetworkSmTargetGroup_parameters.createNetworkSmTargetGroup = createNetworkSmTargetGroup_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSmTargetGroup_nodeParam || '{}'
                        createNetworkSmTargetGroup_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSmTargetGroup_parameters.createNetworkSmTargetGroup = createNetworkSmTargetGroup_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSmTargetGroup_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSmTargetGroup(createNetworkSmTargetGroup_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmTargetGroup') {
                var getNetworkSmTargetGroup_parameters = [];
                var getNetworkSmTargetGroup_nodeParam;
                var getNetworkSmTargetGroup_nodeParamType;
                
                
                getNetworkSmTargetGroup_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmTargetGroup_nodeParamType === 'str') {
                    //console.log('getNetworkSmTargetGroup_nodeParamType is "str"');
                    getNetworkSmTargetGroup_parameters.networkId = getNetworkSmTargetGroup_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmTargetGroup_nodeParamType is not "str"')
                    getNetworkSmTargetGroup_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmTargetGroup_nodeParam = storedParamValsMap['targetGroupId'] ||
                    RED.util.getMessageProperty(msg, "targetGroupId");

                getNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['targetGroupId'] ||
                    RED.util.getMessageProperty(msg, "targetGroupId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmTargetGroup_nodeParamType === 'str') {
                    //console.log('getNetworkSmTargetGroup_nodeParamType is "str"');
                    getNetworkSmTargetGroup_parameters.targetGroupId = getNetworkSmTargetGroup_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmTargetGroup_nodeParamType is not "str"')
                    getNetworkSmTargetGroup_parameters.targetGroupId = RED.util.getMessageProperty(msg, "targetGroupId");
                }
                                
                getNetworkSmTargetGroup_nodeParam = storedParamValsMap['withDetails'] ||
                    RED.util.getMessageProperty(msg, "withDetails");

                getNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['withDetails'] ||
                    RED.util.getMessageProperty(msg, "withDetails");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmTargetGroup_nodeParamType === 'str') {
                    //console.log('getNetworkSmTargetGroup_nodeParamType is "str"');
                    getNetworkSmTargetGroup_parameters.withDetails = getNetworkSmTargetGroup_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmTargetGroup_nodeParamType is not "str"')
                    getNetworkSmTargetGroup_parameters.withDetails = RED.util.getMessageProperty(msg, "withDetails");
                }
                                result = client.getNetworkSmTargetGroup(getNetworkSmTargetGroup_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSmTargetGroup') {
                var updateNetworkSmTargetGroup_parameters = [];
                var updateNetworkSmTargetGroup_nodeParam;
                var updateNetworkSmTargetGroup_nodeParamType;
                
                
                updateNetworkSmTargetGroup_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSmTargetGroup_nodeParamType === 'str') {
                    //console.log('updateNetworkSmTargetGroup_nodeParamType is "str"');
                    updateNetworkSmTargetGroup_parameters.networkId = updateNetworkSmTargetGroup_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSmTargetGroup_nodeParamType is not "str"')
                    updateNetworkSmTargetGroup_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSmTargetGroup_nodeParam = storedParamValsMap['targetGroupId'] ||
                    RED.util.getMessageProperty(msg, "targetGroupId");

                updateNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['targetGroupId'] ||
                    RED.util.getMessageProperty(msg, "targetGroupId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSmTargetGroup_nodeParamType === 'str') {
                    //console.log('updateNetworkSmTargetGroup_nodeParamType is "str"');
                    updateNetworkSmTargetGroup_parameters.targetGroupId = updateNetworkSmTargetGroup_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSmTargetGroup_nodeParamType is not "str"')
                    updateNetworkSmTargetGroup_parameters.targetGroupId = RED.util.getMessageProperty(msg, "targetGroupId");
                }
                                
                updateNetworkSmTargetGroup_nodeParam = storedParamValsMap['updateNetworkSmTargetGroup'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSmTargetGroup");

                updateNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['updateNetworkSmTargetGroup'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSmTargetGroup");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSmTargetGroup_parameters.updateNetworkSmTargetGroup = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSmTargetGroup_nodeParam === 'object'){
                        updateNetworkSmTargetGroup_parameters.updateNetworkSmTargetGroup = updateNetworkSmTargetGroup_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSmTargetGroup_nodeParam || '{}'
                        updateNetworkSmTargetGroup_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSmTargetGroup_parameters.updateNetworkSmTargetGroup = updateNetworkSmTargetGroup_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSmTargetGroup_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSmTargetGroup(updateNetworkSmTargetGroup_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSmTargetGroup') {
                var deleteNetworkSmTargetGroup_parameters = [];
                var deleteNetworkSmTargetGroup_nodeParam;
                var deleteNetworkSmTargetGroup_nodeParamType;
                
                
                deleteNetworkSmTargetGroup_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSmTargetGroup_nodeParamType === 'str') {
                    //console.log('deleteNetworkSmTargetGroup_nodeParamType is "str"');
                    deleteNetworkSmTargetGroup_parameters.networkId = deleteNetworkSmTargetGroup_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSmTargetGroup_nodeParamType is not "str"')
                    deleteNetworkSmTargetGroup_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSmTargetGroup_nodeParam = storedParamValsMap['targetGroupId'] ||
                    RED.util.getMessageProperty(msg, "targetGroupId");

                deleteNetworkSmTargetGroup_nodeParamType = storedParamTypeMap['targetGroupId'] ||
                    RED.util.getMessageProperty(msg, "targetGroupId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSmTargetGroup_nodeParamType === 'str') {
                    //console.log('deleteNetworkSmTargetGroup_nodeParamType is "str"');
                    deleteNetworkSmTargetGroup_parameters.targetGroupId = deleteNetworkSmTargetGroup_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSmTargetGroup_nodeParamType is not "str"')
                    deleteNetworkSmTargetGroup_parameters.targetGroupId = RED.util.getMessageProperty(msg, "targetGroupId");
                }
                                result = client.deleteNetworkSmTargetGroup(deleteNetworkSmTargetGroup_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmUserAccessDevices') {
                var getNetworkSmUserAccessDevices_parameters = [];
                var getNetworkSmUserAccessDevices_nodeParam;
                var getNetworkSmUserAccessDevices_nodeParamType;
                
                
                getNetworkSmUserAccessDevices_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmUserAccessDevices_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUserAccessDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmUserAccessDevices_nodeParamType is "str"');
                    getNetworkSmUserAccessDevices_parameters.networkId = getNetworkSmUserAccessDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUserAccessDevices_nodeParamType is not "str"')
                    getNetworkSmUserAccessDevices_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmUserAccessDevices_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkSmUserAccessDevices_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUserAccessDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmUserAccessDevices_nodeParamType is "str"');
                    getNetworkSmUserAccessDevices_parameters.perPage = getNetworkSmUserAccessDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUserAccessDevices_nodeParamType is not "str"')
                    getNetworkSmUserAccessDevices_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkSmUserAccessDevices_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkSmUserAccessDevices_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUserAccessDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmUserAccessDevices_nodeParamType is "str"');
                    getNetworkSmUserAccessDevices_parameters.startingAfter = getNetworkSmUserAccessDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUserAccessDevices_nodeParamType is not "str"')
                    getNetworkSmUserAccessDevices_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkSmUserAccessDevices_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkSmUserAccessDevices_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUserAccessDevices_nodeParamType === 'str') {
                    //console.log('getNetworkSmUserAccessDevices_nodeParamType is "str"');
                    getNetworkSmUserAccessDevices_parameters.endingBefore = getNetworkSmUserAccessDevices_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUserAccessDevices_nodeParamType is not "str"')
                    getNetworkSmUserAccessDevices_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkSmUserAccessDevices(getNetworkSmUserAccessDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSmUserAccessDevice') {
                var deleteNetworkSmUserAccessDevice_parameters = [];
                var deleteNetworkSmUserAccessDevice_nodeParam;
                var deleteNetworkSmUserAccessDevice_nodeParamType;
                
                
                deleteNetworkSmUserAccessDevice_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSmUserAccessDevice_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSmUserAccessDevice_nodeParamType === 'str') {
                    //console.log('deleteNetworkSmUserAccessDevice_nodeParamType is "str"');
                    deleteNetworkSmUserAccessDevice_parameters.networkId = deleteNetworkSmUserAccessDevice_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSmUserAccessDevice_nodeParamType is not "str"')
                    deleteNetworkSmUserAccessDevice_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSmUserAccessDevice_nodeParam = storedParamValsMap['userAccessDeviceId'] ||
                    RED.util.getMessageProperty(msg, "userAccessDeviceId");

                deleteNetworkSmUserAccessDevice_nodeParamType = storedParamTypeMap['userAccessDeviceId'] ||
                    RED.util.getMessageProperty(msg, "userAccessDeviceId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSmUserAccessDevice_nodeParamType === 'str') {
                    //console.log('deleteNetworkSmUserAccessDevice_nodeParamType is "str"');
                    deleteNetworkSmUserAccessDevice_parameters.userAccessDeviceId = deleteNetworkSmUserAccessDevice_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSmUserAccessDevice_nodeParamType is not "str"')
                    deleteNetworkSmUserAccessDevice_parameters.userAccessDeviceId = RED.util.getMessageProperty(msg, "userAccessDeviceId");
                }
                                result = client.deleteNetworkSmUserAccessDevice(deleteNetworkSmUserAccessDevice_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmUsers') {
                var getNetworkSmUsers_parameters = [];
                var getNetworkSmUsers_nodeParam;
                var getNetworkSmUsers_nodeParamType;
                
                
                getNetworkSmUsers_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmUsers_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUsers_nodeParamType === 'str') {
                    //console.log('getNetworkSmUsers_nodeParamType is "str"');
                    getNetworkSmUsers_parameters.networkId = getNetworkSmUsers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUsers_nodeParamType is not "str"')
                    getNetworkSmUsers_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmUsers_nodeParam = storedParamValsMap['ids'] ||
                    RED.util.getMessageProperty(msg, "ids");

                getNetworkSmUsers_nodeParamType = storedParamTypeMap['ids'] ||
                    RED.util.getMessageProperty(msg, "ids");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUsers_nodeParamType === 'str') {
                    //console.log('getNetworkSmUsers_nodeParamType is "str"');
                    getNetworkSmUsers_parameters.ids = getNetworkSmUsers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUsers_nodeParamType is not "str"')
                    getNetworkSmUsers_parameters.ids = RED.util.getMessageProperty(msg, "ids");
                }
                                
                getNetworkSmUsers_nodeParam = storedParamValsMap['usernames'] ||
                    RED.util.getMessageProperty(msg, "usernames");

                getNetworkSmUsers_nodeParamType = storedParamTypeMap['usernames'] ||
                    RED.util.getMessageProperty(msg, "usernames");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUsers_nodeParamType === 'str') {
                    //console.log('getNetworkSmUsers_nodeParamType is "str"');
                    getNetworkSmUsers_parameters.usernames = getNetworkSmUsers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUsers_nodeParamType is not "str"')
                    getNetworkSmUsers_parameters.usernames = RED.util.getMessageProperty(msg, "usernames");
                }
                                
                getNetworkSmUsers_nodeParam = storedParamValsMap['emails'] ||
                    RED.util.getMessageProperty(msg, "emails");

                getNetworkSmUsers_nodeParamType = storedParamTypeMap['emails'] ||
                    RED.util.getMessageProperty(msg, "emails");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUsers_nodeParamType === 'str') {
                    //console.log('getNetworkSmUsers_nodeParamType is "str"');
                    getNetworkSmUsers_parameters.emails = getNetworkSmUsers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUsers_nodeParamType is not "str"')
                    getNetworkSmUsers_parameters.emails = RED.util.getMessageProperty(msg, "emails");
                }
                                
                getNetworkSmUsers_nodeParam = storedParamValsMap['scope'] ||
                    RED.util.getMessageProperty(msg, "scope");

                getNetworkSmUsers_nodeParamType = storedParamTypeMap['scope'] ||
                    RED.util.getMessageProperty(msg, "scope");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUsers_nodeParamType === 'str') {
                    //console.log('getNetworkSmUsers_nodeParamType is "str"');
                    getNetworkSmUsers_parameters.scope = getNetworkSmUsers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUsers_nodeParamType is not "str"')
                    getNetworkSmUsers_parameters.scope = RED.util.getMessageProperty(msg, "scope");
                }
                                result = client.getNetworkSmUsers(getNetworkSmUsers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmUserDeviceProfiles') {
                var getNetworkSmUserDeviceProfiles_parameters = [];
                var getNetworkSmUserDeviceProfiles_nodeParam;
                var getNetworkSmUserDeviceProfiles_nodeParamType;
                
                
                getNetworkSmUserDeviceProfiles_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmUserDeviceProfiles_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUserDeviceProfiles_nodeParamType === 'str') {
                    //console.log('getNetworkSmUserDeviceProfiles_nodeParamType is "str"');
                    getNetworkSmUserDeviceProfiles_parameters.networkId = getNetworkSmUserDeviceProfiles_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUserDeviceProfiles_nodeParamType is not "str"')
                    getNetworkSmUserDeviceProfiles_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmUserDeviceProfiles_nodeParam = storedParamValsMap['userId'] ||
                    RED.util.getMessageProperty(msg, "userId");

                getNetworkSmUserDeviceProfiles_nodeParamType = storedParamTypeMap['userId'] ||
                    RED.util.getMessageProperty(msg, "userId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUserDeviceProfiles_nodeParamType === 'str') {
                    //console.log('getNetworkSmUserDeviceProfiles_nodeParamType is "str"');
                    getNetworkSmUserDeviceProfiles_parameters.userId = getNetworkSmUserDeviceProfiles_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUserDeviceProfiles_nodeParamType is not "str"')
                    getNetworkSmUserDeviceProfiles_parameters.userId = RED.util.getMessageProperty(msg, "userId");
                }
                                result = client.getNetworkSmUserDeviceProfiles(getNetworkSmUserDeviceProfiles_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSmUserSoftwares') {
                var getNetworkSmUserSoftwares_parameters = [];
                var getNetworkSmUserSoftwares_nodeParam;
                var getNetworkSmUserSoftwares_nodeParamType;
                
                
                getNetworkSmUserSoftwares_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSmUserSoftwares_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUserSoftwares_nodeParamType === 'str') {
                    //console.log('getNetworkSmUserSoftwares_nodeParamType is "str"');
                    getNetworkSmUserSoftwares_parameters.networkId = getNetworkSmUserSoftwares_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUserSoftwares_nodeParamType is not "str"')
                    getNetworkSmUserSoftwares_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSmUserSoftwares_nodeParam = storedParamValsMap['userId'] ||
                    RED.util.getMessageProperty(msg, "userId");

                getNetworkSmUserSoftwares_nodeParamType = storedParamTypeMap['userId'] ||
                    RED.util.getMessageProperty(msg, "userId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSmUserSoftwares_nodeParamType === 'str') {
                    //console.log('getNetworkSmUserSoftwares_nodeParamType is "str"');
                    getNetworkSmUserSoftwares_parameters.userId = getNetworkSmUserSoftwares_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSmUserSoftwares_nodeParamType is not "str"')
                    getNetworkSmUserSoftwares_parameters.userId = RED.util.getMessageProperty(msg, "userId");
                }
                                result = client.getNetworkSmUserSoftwares(getNetworkSmUserSoftwares_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSnmp') {
                var getNetworkSnmp_parameters = [];
                var getNetworkSnmp_nodeParam;
                var getNetworkSnmp_nodeParamType;
                
                
                getNetworkSnmp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSnmp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSnmp_nodeParamType === 'str') {
                    //console.log('getNetworkSnmp_nodeParamType is "str"');
                    getNetworkSnmp_parameters.networkId = getNetworkSnmp_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSnmp_nodeParamType is not "str"')
                    getNetworkSnmp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSnmp(getNetworkSnmp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSnmp') {
                var updateNetworkSnmp_parameters = [];
                var updateNetworkSnmp_nodeParam;
                var updateNetworkSnmp_nodeParamType;
                
                
                updateNetworkSnmp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSnmp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSnmp_nodeParamType === 'str') {
                    //console.log('updateNetworkSnmp_nodeParamType is "str"');
                    updateNetworkSnmp_parameters.networkId = updateNetworkSnmp_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSnmp_nodeParamType is not "str"')
                    updateNetworkSnmp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSnmp_nodeParam = storedParamValsMap['updateNetworkSnmp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSnmp");

                updateNetworkSnmp_nodeParamType = storedParamTypeMap['updateNetworkSnmp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSnmp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSnmp_parameters.updateNetworkSnmp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSnmp_nodeParam === 'object'){
                        updateNetworkSnmp_parameters.updateNetworkSnmp = updateNetworkSnmp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSnmp_nodeParam || '{}'
                        updateNetworkSnmp_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSnmp_parameters.updateNetworkSnmp = updateNetworkSnmp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSnmp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSnmp(updateNetworkSnmp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSplashLoginAttempts') {
                var getNetworkSplashLoginAttempts_parameters = [];
                var getNetworkSplashLoginAttempts_nodeParam;
                var getNetworkSplashLoginAttempts_nodeParamType;
                
                
                getNetworkSplashLoginAttempts_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSplashLoginAttempts_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSplashLoginAttempts_nodeParamType === 'str') {
                    //console.log('getNetworkSplashLoginAttempts_nodeParamType is "str"');
                    getNetworkSplashLoginAttempts_parameters.networkId = getNetworkSplashLoginAttempts_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSplashLoginAttempts_nodeParamType is not "str"')
                    getNetworkSplashLoginAttempts_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSplashLoginAttempts_nodeParam = storedParamValsMap['ssidNumber'] ||
                    RED.util.getMessageProperty(msg, "ssidNumber");

                getNetworkSplashLoginAttempts_nodeParamType = storedParamTypeMap['ssidNumber'] ||
                    RED.util.getMessageProperty(msg, "ssidNumber");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSplashLoginAttempts_nodeParamType === 'str') {
                    //console.log('getNetworkSplashLoginAttempts_nodeParamType is "str"');
                    getNetworkSplashLoginAttempts_parameters.ssidNumber = getNetworkSplashLoginAttempts_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSplashLoginAttempts_nodeParamType is not "str"')
                    getNetworkSplashLoginAttempts_parameters.ssidNumber = RED.util.getMessageProperty(msg, "ssidNumber");
                }
                                
                getNetworkSplashLoginAttempts_nodeParam = storedParamValsMap['loginIdentifier'] ||
                    RED.util.getMessageProperty(msg, "loginIdentifier");

                getNetworkSplashLoginAttempts_nodeParamType = storedParamTypeMap['loginIdentifier'] ||
                    RED.util.getMessageProperty(msg, "loginIdentifier");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSplashLoginAttempts_nodeParamType === 'str') {
                    //console.log('getNetworkSplashLoginAttempts_nodeParamType is "str"');
                    getNetworkSplashLoginAttempts_parameters.loginIdentifier = getNetworkSplashLoginAttempts_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSplashLoginAttempts_nodeParamType is not "str"')
                    getNetworkSplashLoginAttempts_parameters.loginIdentifier = RED.util.getMessageProperty(msg, "loginIdentifier");
                }
                                
                getNetworkSplashLoginAttempts_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkSplashLoginAttempts_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSplashLoginAttempts_nodeParamType === 'str') {
                    //console.log('getNetworkSplashLoginAttempts_nodeParamType is "str"');
                    getNetworkSplashLoginAttempts_parameters.timespan = getNetworkSplashLoginAttempts_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSplashLoginAttempts_nodeParamType is not "str"')
                    getNetworkSplashLoginAttempts_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getNetworkSplashLoginAttempts(getNetworkSplashLoginAttempts_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'splitNetwork') {
                var splitNetwork_parameters = [];
                var splitNetwork_nodeParam;
                var splitNetwork_nodeParamType;
                
                
                splitNetwork_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                splitNetwork_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (splitNetwork_nodeParamType === 'str') {
                    //console.log('splitNetwork_nodeParamType is "str"');
                    splitNetwork_parameters.networkId = splitNetwork_nodeParam || undefined;
                } else {
                    //console.log('splitNetwork_nodeParamType is not "str"')
                    splitNetwork_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.splitNetwork(splitNetwork_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchAccessControlLists') {
                var getNetworkSwitchAccessControlLists_parameters = [];
                var getNetworkSwitchAccessControlLists_nodeParam;
                var getNetworkSwitchAccessControlLists_nodeParamType;
                
                
                getNetworkSwitchAccessControlLists_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchAccessControlLists_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchAccessControlLists_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchAccessControlLists_nodeParamType is "str"');
                    getNetworkSwitchAccessControlLists_parameters.networkId = getNetworkSwitchAccessControlLists_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchAccessControlLists_nodeParamType is not "str"')
                    getNetworkSwitchAccessControlLists_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchAccessControlLists(getNetworkSwitchAccessControlLists_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchAccessControlLists') {
                var updateNetworkSwitchAccessControlLists_parameters = [];
                var updateNetworkSwitchAccessControlLists_nodeParam;
                var updateNetworkSwitchAccessControlLists_nodeParamType;
                
                
                updateNetworkSwitchAccessControlLists_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchAccessControlLists_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchAccessControlLists_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchAccessControlLists_nodeParamType is "str"');
                    updateNetworkSwitchAccessControlLists_parameters.networkId = updateNetworkSwitchAccessControlLists_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchAccessControlLists_nodeParamType is not "str"')
                    updateNetworkSwitchAccessControlLists_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchAccessControlLists_nodeParam = storedParamValsMap['updateNetworkSwitchAccessControlLists'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchAccessControlLists");

                updateNetworkSwitchAccessControlLists_nodeParamType = storedParamTypeMap['updateNetworkSwitchAccessControlLists'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchAccessControlLists");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchAccessControlLists_parameters.updateNetworkSwitchAccessControlLists = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchAccessControlLists_nodeParam === 'object'){
                        updateNetworkSwitchAccessControlLists_parameters.updateNetworkSwitchAccessControlLists = updateNetworkSwitchAccessControlLists_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchAccessControlLists_nodeParam || '{}'
                        updateNetworkSwitchAccessControlLists_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchAccessControlLists_parameters.updateNetworkSwitchAccessControlLists = updateNetworkSwitchAccessControlLists_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchAccessControlLists_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchAccessControlLists(updateNetworkSwitchAccessControlLists_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchAccessPolicies') {
                var getNetworkSwitchAccessPolicies_parameters = [];
                var getNetworkSwitchAccessPolicies_nodeParam;
                var getNetworkSwitchAccessPolicies_nodeParamType;
                
                
                getNetworkSwitchAccessPolicies_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchAccessPolicies_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchAccessPolicies_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchAccessPolicies_nodeParamType is "str"');
                    getNetworkSwitchAccessPolicies_parameters.networkId = getNetworkSwitchAccessPolicies_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchAccessPolicies_nodeParamType is not "str"')
                    getNetworkSwitchAccessPolicies_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchAccessPolicies(getNetworkSwitchAccessPolicies_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSwitchAccessPolicy') {
                var createNetworkSwitchAccessPolicy_parameters = [];
                var createNetworkSwitchAccessPolicy_nodeParam;
                var createNetworkSwitchAccessPolicy_nodeParamType;
                
                
                createNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchAccessPolicy_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchAccessPolicy_nodeParamType is "str"');
                    createNetworkSwitchAccessPolicy_parameters.networkId = createNetworkSwitchAccessPolicy_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchAccessPolicy_nodeParamType is not "str"')
                    createNetworkSwitchAccessPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['createNetworkSwitchAccessPolicy'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchAccessPolicy");

                createNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['createNetworkSwitchAccessPolicy'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchAccessPolicy");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSwitchAccessPolicy_parameters.createNetworkSwitchAccessPolicy = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSwitchAccessPolicy_nodeParam === 'object'){
                        createNetworkSwitchAccessPolicy_parameters.createNetworkSwitchAccessPolicy = createNetworkSwitchAccessPolicy_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSwitchAccessPolicy_nodeParam || '{}'
                        createNetworkSwitchAccessPolicy_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSwitchAccessPolicy_parameters.createNetworkSwitchAccessPolicy = createNetworkSwitchAccessPolicy_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSwitchAccessPolicy_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSwitchAccessPolicy(createNetworkSwitchAccessPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchAccessPolicy') {
                var getNetworkSwitchAccessPolicy_parameters = [];
                var getNetworkSwitchAccessPolicy_nodeParam;
                var getNetworkSwitchAccessPolicy_nodeParamType;
                
                
                getNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchAccessPolicy_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchAccessPolicy_nodeParamType is "str"');
                    getNetworkSwitchAccessPolicy_parameters.networkId = getNetworkSwitchAccessPolicy_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchAccessPolicy_nodeParamType is not "str"')
                    getNetworkSwitchAccessPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['accessPolicyNumber'] ||
                    RED.util.getMessageProperty(msg, "accessPolicyNumber");

                getNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['accessPolicyNumber'] ||
                    RED.util.getMessageProperty(msg, "accessPolicyNumber");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchAccessPolicy_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchAccessPolicy_nodeParamType is "str"');
                    getNetworkSwitchAccessPolicy_parameters.accessPolicyNumber = getNetworkSwitchAccessPolicy_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchAccessPolicy_nodeParamType is not "str"')
                    getNetworkSwitchAccessPolicy_parameters.accessPolicyNumber = RED.util.getMessageProperty(msg, "accessPolicyNumber");
                }
                                result = client.getNetworkSwitchAccessPolicy(getNetworkSwitchAccessPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchAccessPolicy') {
                var updateNetworkSwitchAccessPolicy_parameters = [];
                var updateNetworkSwitchAccessPolicy_nodeParam;
                var updateNetworkSwitchAccessPolicy_nodeParamType;
                
                
                updateNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchAccessPolicy_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchAccessPolicy_nodeParamType is "str"');
                    updateNetworkSwitchAccessPolicy_parameters.networkId = updateNetworkSwitchAccessPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchAccessPolicy_nodeParamType is not "str"')
                    updateNetworkSwitchAccessPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['accessPolicyNumber'] ||
                    RED.util.getMessageProperty(msg, "accessPolicyNumber");

                updateNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['accessPolicyNumber'] ||
                    RED.util.getMessageProperty(msg, "accessPolicyNumber");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchAccessPolicy_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchAccessPolicy_nodeParamType is "str"');
                    updateNetworkSwitchAccessPolicy_parameters.accessPolicyNumber = updateNetworkSwitchAccessPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchAccessPolicy_nodeParamType is not "str"')
                    updateNetworkSwitchAccessPolicy_parameters.accessPolicyNumber = RED.util.getMessageProperty(msg, "accessPolicyNumber");
                }
                                
                updateNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['updateNetworkSwitchAccessPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchAccessPolicy");

                updateNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['updateNetworkSwitchAccessPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchAccessPolicy");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchAccessPolicy_parameters.updateNetworkSwitchAccessPolicy = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchAccessPolicy_nodeParam === 'object'){
                        updateNetworkSwitchAccessPolicy_parameters.updateNetworkSwitchAccessPolicy = updateNetworkSwitchAccessPolicy_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchAccessPolicy_nodeParam || '{}'
                        updateNetworkSwitchAccessPolicy_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchAccessPolicy_parameters.updateNetworkSwitchAccessPolicy = updateNetworkSwitchAccessPolicy_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchAccessPolicy_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchAccessPolicy(updateNetworkSwitchAccessPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSwitchAccessPolicy') {
                var deleteNetworkSwitchAccessPolicy_parameters = [];
                var deleteNetworkSwitchAccessPolicy_nodeParam;
                var deleteNetworkSwitchAccessPolicy_nodeParamType;
                
                
                deleteNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchAccessPolicy_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchAccessPolicy_nodeParamType is "str"');
                    deleteNetworkSwitchAccessPolicy_parameters.networkId = deleteNetworkSwitchAccessPolicy_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchAccessPolicy_nodeParamType is not "str"')
                    deleteNetworkSwitchAccessPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSwitchAccessPolicy_nodeParam = storedParamValsMap['accessPolicyNumber'] ||
                    RED.util.getMessageProperty(msg, "accessPolicyNumber");

                deleteNetworkSwitchAccessPolicy_nodeParamType = storedParamTypeMap['accessPolicyNumber'] ||
                    RED.util.getMessageProperty(msg, "accessPolicyNumber");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchAccessPolicy_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchAccessPolicy_nodeParamType is "str"');
                    deleteNetworkSwitchAccessPolicy_parameters.accessPolicyNumber = deleteNetworkSwitchAccessPolicy_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchAccessPolicy_nodeParamType is not "str"')
                    deleteNetworkSwitchAccessPolicy_parameters.accessPolicyNumber = RED.util.getMessageProperty(msg, "accessPolicyNumber");
                }
                                result = client.deleteNetworkSwitchAccessPolicy(deleteNetworkSwitchAccessPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchAlternateManagementInterface') {
                var getNetworkSwitchAlternateManagementInterface_parameters = [];
                var getNetworkSwitchAlternateManagementInterface_nodeParam;
                var getNetworkSwitchAlternateManagementInterface_nodeParamType;
                
                
                getNetworkSwitchAlternateManagementInterface_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchAlternateManagementInterface_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchAlternateManagementInterface_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchAlternateManagementInterface_nodeParamType is "str"');
                    getNetworkSwitchAlternateManagementInterface_parameters.networkId = getNetworkSwitchAlternateManagementInterface_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchAlternateManagementInterface_nodeParamType is not "str"')
                    getNetworkSwitchAlternateManagementInterface_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchAlternateManagementInterface(getNetworkSwitchAlternateManagementInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchAlternateManagementInterface') {
                var updateNetworkSwitchAlternateManagementInterface_parameters = [];
                var updateNetworkSwitchAlternateManagementInterface_nodeParam;
                var updateNetworkSwitchAlternateManagementInterface_nodeParamType;
                
                
                updateNetworkSwitchAlternateManagementInterface_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchAlternateManagementInterface_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchAlternateManagementInterface_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchAlternateManagementInterface_nodeParamType is "str"');
                    updateNetworkSwitchAlternateManagementInterface_parameters.networkId = updateNetworkSwitchAlternateManagementInterface_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchAlternateManagementInterface_nodeParamType is not "str"')
                    updateNetworkSwitchAlternateManagementInterface_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchAlternateManagementInterface_nodeParam = storedParamValsMap['updateNetworkSwitchAlternateManagementInterface'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchAlternateManagementInterface");

                updateNetworkSwitchAlternateManagementInterface_nodeParamType = storedParamTypeMap['updateNetworkSwitchAlternateManagementInterface'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchAlternateManagementInterface");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchAlternateManagementInterface_parameters.updateNetworkSwitchAlternateManagementInterface = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchAlternateManagementInterface_nodeParam === 'object'){
                        updateNetworkSwitchAlternateManagementInterface_parameters.updateNetworkSwitchAlternateManagementInterface = updateNetworkSwitchAlternateManagementInterface_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchAlternateManagementInterface_nodeParam || '{}'
                        updateNetworkSwitchAlternateManagementInterface_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchAlternateManagementInterface_parameters.updateNetworkSwitchAlternateManagementInterface = updateNetworkSwitchAlternateManagementInterface_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchAlternateManagementInterface_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchAlternateManagementInterface(updateNetworkSwitchAlternateManagementInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchDhcpServerPolicy') {
                var getNetworkSwitchDhcpServerPolicy_parameters = [];
                var getNetworkSwitchDhcpServerPolicy_nodeParam;
                var getNetworkSwitchDhcpServerPolicy_nodeParamType;
                
                
                getNetworkSwitchDhcpServerPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchDhcpServerPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchDhcpServerPolicy_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchDhcpServerPolicy_nodeParamType is "str"');
                    getNetworkSwitchDhcpServerPolicy_parameters.networkId = getNetworkSwitchDhcpServerPolicy_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchDhcpServerPolicy_nodeParamType is not "str"')
                    getNetworkSwitchDhcpServerPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchDhcpServerPolicy(getNetworkSwitchDhcpServerPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchDhcpServerPolicy') {
                var updateNetworkSwitchDhcpServerPolicy_parameters = [];
                var updateNetworkSwitchDhcpServerPolicy_nodeParam;
                var updateNetworkSwitchDhcpServerPolicy_nodeParamType;
                
                
                updateNetworkSwitchDhcpServerPolicy_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchDhcpServerPolicy_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchDhcpServerPolicy_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchDhcpServerPolicy_nodeParamType is "str"');
                    updateNetworkSwitchDhcpServerPolicy_parameters.networkId = updateNetworkSwitchDhcpServerPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchDhcpServerPolicy_nodeParamType is not "str"')
                    updateNetworkSwitchDhcpServerPolicy_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchDhcpServerPolicy_nodeParam = storedParamValsMap['updateNetworkSwitchDhcpServerPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchDhcpServerPolicy");

                updateNetworkSwitchDhcpServerPolicy_nodeParamType = storedParamTypeMap['updateNetworkSwitchDhcpServerPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchDhcpServerPolicy");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchDhcpServerPolicy_parameters.updateNetworkSwitchDhcpServerPolicy = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchDhcpServerPolicy_nodeParam === 'object'){
                        updateNetworkSwitchDhcpServerPolicy_parameters.updateNetworkSwitchDhcpServerPolicy = updateNetworkSwitchDhcpServerPolicy_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchDhcpServerPolicy_nodeParam || '{}'
                        updateNetworkSwitchDhcpServerPolicy_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchDhcpServerPolicy_parameters.updateNetworkSwitchDhcpServerPolicy = updateNetworkSwitchDhcpServerPolicy_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchDhcpServerPolicy_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchDhcpServerPolicy(updateNetworkSwitchDhcpServerPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchDscpToCosMappings') {
                var getNetworkSwitchDscpToCosMappings_parameters = [];
                var getNetworkSwitchDscpToCosMappings_nodeParam;
                var getNetworkSwitchDscpToCosMappings_nodeParamType;
                
                
                getNetworkSwitchDscpToCosMappings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchDscpToCosMappings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchDscpToCosMappings_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchDscpToCosMappings_nodeParamType is "str"');
                    getNetworkSwitchDscpToCosMappings_parameters.networkId = getNetworkSwitchDscpToCosMappings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchDscpToCosMappings_nodeParamType is not "str"')
                    getNetworkSwitchDscpToCosMappings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchDscpToCosMappings(getNetworkSwitchDscpToCosMappings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchDscpToCosMappings') {
                var updateNetworkSwitchDscpToCosMappings_parameters = [];
                var updateNetworkSwitchDscpToCosMappings_nodeParam;
                var updateNetworkSwitchDscpToCosMappings_nodeParamType;
                
                
                updateNetworkSwitchDscpToCosMappings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchDscpToCosMappings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchDscpToCosMappings_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchDscpToCosMappings_nodeParamType is "str"');
                    updateNetworkSwitchDscpToCosMappings_parameters.networkId = updateNetworkSwitchDscpToCosMappings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchDscpToCosMappings_nodeParamType is not "str"')
                    updateNetworkSwitchDscpToCosMappings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchDscpToCosMappings_nodeParam = storedParamValsMap['updateNetworkSwitchDscpToCosMappings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchDscpToCosMappings");

                updateNetworkSwitchDscpToCosMappings_nodeParamType = storedParamTypeMap['updateNetworkSwitchDscpToCosMappings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchDscpToCosMappings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchDscpToCosMappings_parameters.updateNetworkSwitchDscpToCosMappings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchDscpToCosMappings_nodeParam === 'object'){
                        updateNetworkSwitchDscpToCosMappings_parameters.updateNetworkSwitchDscpToCosMappings = updateNetworkSwitchDscpToCosMappings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchDscpToCosMappings_nodeParam || '{}'
                        updateNetworkSwitchDscpToCosMappings_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchDscpToCosMappings_parameters.updateNetworkSwitchDscpToCosMappings = updateNetworkSwitchDscpToCosMappings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchDscpToCosMappings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchDscpToCosMappings(updateNetworkSwitchDscpToCosMappings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchLinkAggregations') {
                var getNetworkSwitchLinkAggregations_parameters = [];
                var getNetworkSwitchLinkAggregations_nodeParam;
                var getNetworkSwitchLinkAggregations_nodeParamType;
                
                
                getNetworkSwitchLinkAggregations_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchLinkAggregations_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchLinkAggregations_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchLinkAggregations_nodeParamType is "str"');
                    getNetworkSwitchLinkAggregations_parameters.networkId = getNetworkSwitchLinkAggregations_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchLinkAggregations_nodeParamType is not "str"')
                    getNetworkSwitchLinkAggregations_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchLinkAggregations(getNetworkSwitchLinkAggregations_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSwitchLinkAggregation') {
                var createNetworkSwitchLinkAggregation_parameters = [];
                var createNetworkSwitchLinkAggregation_nodeParam;
                var createNetworkSwitchLinkAggregation_nodeParamType;
                
                
                createNetworkSwitchLinkAggregation_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSwitchLinkAggregation_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchLinkAggregation_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchLinkAggregation_nodeParamType is "str"');
                    createNetworkSwitchLinkAggregation_parameters.networkId = createNetworkSwitchLinkAggregation_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchLinkAggregation_nodeParamType is not "str"')
                    createNetworkSwitchLinkAggregation_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSwitchLinkAggregation_nodeParam = storedParamValsMap['createNetworkSwitchLinkAggregation'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchLinkAggregation");

                createNetworkSwitchLinkAggregation_nodeParamType = storedParamTypeMap['createNetworkSwitchLinkAggregation'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchLinkAggregation");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSwitchLinkAggregation_parameters.createNetworkSwitchLinkAggregation = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSwitchLinkAggregation_nodeParam === 'object'){
                        createNetworkSwitchLinkAggregation_parameters.createNetworkSwitchLinkAggregation = createNetworkSwitchLinkAggregation_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSwitchLinkAggregation_nodeParam || '{}'
                        createNetworkSwitchLinkAggregation_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSwitchLinkAggregation_parameters.createNetworkSwitchLinkAggregation = createNetworkSwitchLinkAggregation_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSwitchLinkAggregation_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSwitchLinkAggregation(createNetworkSwitchLinkAggregation_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchLinkAggregation') {
                var updateNetworkSwitchLinkAggregation_parameters = [];
                var updateNetworkSwitchLinkAggregation_nodeParam;
                var updateNetworkSwitchLinkAggregation_nodeParamType;
                
                
                updateNetworkSwitchLinkAggregation_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchLinkAggregation_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchLinkAggregation_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchLinkAggregation_nodeParamType is "str"');
                    updateNetworkSwitchLinkAggregation_parameters.networkId = updateNetworkSwitchLinkAggregation_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchLinkAggregation_nodeParamType is not "str"')
                    updateNetworkSwitchLinkAggregation_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchLinkAggregation_nodeParam = storedParamValsMap['linkAggregationId'] ||
                    RED.util.getMessageProperty(msg, "linkAggregationId");

                updateNetworkSwitchLinkAggregation_nodeParamType = storedParamTypeMap['linkAggregationId'] ||
                    RED.util.getMessageProperty(msg, "linkAggregationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchLinkAggregation_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchLinkAggregation_nodeParamType is "str"');
                    updateNetworkSwitchLinkAggregation_parameters.linkAggregationId = updateNetworkSwitchLinkAggregation_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchLinkAggregation_nodeParamType is not "str"')
                    updateNetworkSwitchLinkAggregation_parameters.linkAggregationId = RED.util.getMessageProperty(msg, "linkAggregationId");
                }
                                
                updateNetworkSwitchLinkAggregation_nodeParam = storedParamValsMap['updateNetworkSwitchLinkAggregation'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchLinkAggregation");

                updateNetworkSwitchLinkAggregation_nodeParamType = storedParamTypeMap['updateNetworkSwitchLinkAggregation'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchLinkAggregation");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchLinkAggregation_parameters.updateNetworkSwitchLinkAggregation = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchLinkAggregation_nodeParam === 'object'){
                        updateNetworkSwitchLinkAggregation_parameters.updateNetworkSwitchLinkAggregation = updateNetworkSwitchLinkAggregation_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchLinkAggregation_nodeParam || '{}'
                        updateNetworkSwitchLinkAggregation_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchLinkAggregation_parameters.updateNetworkSwitchLinkAggregation = updateNetworkSwitchLinkAggregation_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchLinkAggregation_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchLinkAggregation(updateNetworkSwitchLinkAggregation_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSwitchLinkAggregation') {
                var deleteNetworkSwitchLinkAggregation_parameters = [];
                var deleteNetworkSwitchLinkAggregation_nodeParam;
                var deleteNetworkSwitchLinkAggregation_nodeParamType;
                
                
                deleteNetworkSwitchLinkAggregation_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSwitchLinkAggregation_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchLinkAggregation_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchLinkAggregation_nodeParamType is "str"');
                    deleteNetworkSwitchLinkAggregation_parameters.networkId = deleteNetworkSwitchLinkAggregation_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchLinkAggregation_nodeParamType is not "str"')
                    deleteNetworkSwitchLinkAggregation_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSwitchLinkAggregation_nodeParam = storedParamValsMap['linkAggregationId'] ||
                    RED.util.getMessageProperty(msg, "linkAggregationId");

                deleteNetworkSwitchLinkAggregation_nodeParamType = storedParamTypeMap['linkAggregationId'] ||
                    RED.util.getMessageProperty(msg, "linkAggregationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchLinkAggregation_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchLinkAggregation_nodeParamType is "str"');
                    deleteNetworkSwitchLinkAggregation_parameters.linkAggregationId = deleteNetworkSwitchLinkAggregation_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchLinkAggregation_nodeParamType is not "str"')
                    deleteNetworkSwitchLinkAggregation_parameters.linkAggregationId = RED.util.getMessageProperty(msg, "linkAggregationId");
                }
                                result = client.deleteNetworkSwitchLinkAggregation(deleteNetworkSwitchLinkAggregation_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchMtu') {
                var getNetworkSwitchMtu_parameters = [];
                var getNetworkSwitchMtu_nodeParam;
                var getNetworkSwitchMtu_nodeParamType;
                
                
                getNetworkSwitchMtu_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchMtu_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchMtu_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchMtu_nodeParamType is "str"');
                    getNetworkSwitchMtu_parameters.networkId = getNetworkSwitchMtu_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchMtu_nodeParamType is not "str"')
                    getNetworkSwitchMtu_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchMtu(getNetworkSwitchMtu_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchMtu') {
                var updateNetworkSwitchMtu_parameters = [];
                var updateNetworkSwitchMtu_nodeParam;
                var updateNetworkSwitchMtu_nodeParamType;
                
                
                updateNetworkSwitchMtu_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchMtu_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchMtu_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchMtu_nodeParamType is "str"');
                    updateNetworkSwitchMtu_parameters.networkId = updateNetworkSwitchMtu_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchMtu_nodeParamType is not "str"')
                    updateNetworkSwitchMtu_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchMtu_nodeParam = storedParamValsMap['updateNetworkSwitchMtu'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchMtu");

                updateNetworkSwitchMtu_nodeParamType = storedParamTypeMap['updateNetworkSwitchMtu'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchMtu");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchMtu_parameters.updateNetworkSwitchMtu = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchMtu_nodeParam === 'object'){
                        updateNetworkSwitchMtu_parameters.updateNetworkSwitchMtu = updateNetworkSwitchMtu_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchMtu_nodeParam || '{}'
                        updateNetworkSwitchMtu_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchMtu_parameters.updateNetworkSwitchMtu = updateNetworkSwitchMtu_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchMtu_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchMtu(updateNetworkSwitchMtu_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchPortSchedules') {
                var getNetworkSwitchPortSchedules_parameters = [];
                var getNetworkSwitchPortSchedules_nodeParam;
                var getNetworkSwitchPortSchedules_nodeParamType;
                
                
                getNetworkSwitchPortSchedules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchPortSchedules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchPortSchedules_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchPortSchedules_nodeParamType is "str"');
                    getNetworkSwitchPortSchedules_parameters.networkId = getNetworkSwitchPortSchedules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchPortSchedules_nodeParamType is not "str"')
                    getNetworkSwitchPortSchedules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchPortSchedules(getNetworkSwitchPortSchedules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSwitchPortSchedule') {
                var createNetworkSwitchPortSchedule_parameters = [];
                var createNetworkSwitchPortSchedule_nodeParam;
                var createNetworkSwitchPortSchedule_nodeParamType;
                
                
                createNetworkSwitchPortSchedule_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSwitchPortSchedule_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchPortSchedule_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchPortSchedule_nodeParamType is "str"');
                    createNetworkSwitchPortSchedule_parameters.networkId = createNetworkSwitchPortSchedule_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchPortSchedule_nodeParamType is not "str"')
                    createNetworkSwitchPortSchedule_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSwitchPortSchedule_nodeParam = storedParamValsMap['createNetworkSwitchPortSchedule'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchPortSchedule");

                createNetworkSwitchPortSchedule_nodeParamType = storedParamTypeMap['createNetworkSwitchPortSchedule'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchPortSchedule");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSwitchPortSchedule_parameters.createNetworkSwitchPortSchedule = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSwitchPortSchedule_nodeParam === 'object'){
                        createNetworkSwitchPortSchedule_parameters.createNetworkSwitchPortSchedule = createNetworkSwitchPortSchedule_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSwitchPortSchedule_nodeParam || '{}'
                        createNetworkSwitchPortSchedule_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSwitchPortSchedule_parameters.createNetworkSwitchPortSchedule = createNetworkSwitchPortSchedule_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSwitchPortSchedule_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSwitchPortSchedule(createNetworkSwitchPortSchedule_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSwitchPortSchedule') {
                var deleteNetworkSwitchPortSchedule_parameters = [];
                var deleteNetworkSwitchPortSchedule_nodeParam;
                var deleteNetworkSwitchPortSchedule_nodeParamType;
                
                
                deleteNetworkSwitchPortSchedule_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSwitchPortSchedule_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchPortSchedule_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchPortSchedule_nodeParamType is "str"');
                    deleteNetworkSwitchPortSchedule_parameters.networkId = deleteNetworkSwitchPortSchedule_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchPortSchedule_nodeParamType is not "str"')
                    deleteNetworkSwitchPortSchedule_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSwitchPortSchedule_nodeParam = storedParamValsMap['portScheduleId'] ||
                    RED.util.getMessageProperty(msg, "portScheduleId");

                deleteNetworkSwitchPortSchedule_nodeParamType = storedParamTypeMap['portScheduleId'] ||
                    RED.util.getMessageProperty(msg, "portScheduleId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchPortSchedule_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchPortSchedule_nodeParamType is "str"');
                    deleteNetworkSwitchPortSchedule_parameters.portScheduleId = deleteNetworkSwitchPortSchedule_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchPortSchedule_nodeParamType is not "str"')
                    deleteNetworkSwitchPortSchedule_parameters.portScheduleId = RED.util.getMessageProperty(msg, "portScheduleId");
                }
                                result = client.deleteNetworkSwitchPortSchedule(deleteNetworkSwitchPortSchedule_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchPortSchedule') {
                var updateNetworkSwitchPortSchedule_parameters = [];
                var updateNetworkSwitchPortSchedule_nodeParam;
                var updateNetworkSwitchPortSchedule_nodeParamType;
                
                
                updateNetworkSwitchPortSchedule_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchPortSchedule_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchPortSchedule_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchPortSchedule_nodeParamType is "str"');
                    updateNetworkSwitchPortSchedule_parameters.networkId = updateNetworkSwitchPortSchedule_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchPortSchedule_nodeParamType is not "str"')
                    updateNetworkSwitchPortSchedule_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchPortSchedule_nodeParam = storedParamValsMap['portScheduleId'] ||
                    RED.util.getMessageProperty(msg, "portScheduleId");

                updateNetworkSwitchPortSchedule_nodeParamType = storedParamTypeMap['portScheduleId'] ||
                    RED.util.getMessageProperty(msg, "portScheduleId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchPortSchedule_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchPortSchedule_nodeParamType is "str"');
                    updateNetworkSwitchPortSchedule_parameters.portScheduleId = updateNetworkSwitchPortSchedule_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchPortSchedule_nodeParamType is not "str"')
                    updateNetworkSwitchPortSchedule_parameters.portScheduleId = RED.util.getMessageProperty(msg, "portScheduleId");
                }
                                
                updateNetworkSwitchPortSchedule_nodeParam = storedParamValsMap['updateNetworkSwitchPortSchedule'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchPortSchedule");

                updateNetworkSwitchPortSchedule_nodeParamType = storedParamTypeMap['updateNetworkSwitchPortSchedule'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchPortSchedule");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchPortSchedule_parameters.updateNetworkSwitchPortSchedule = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchPortSchedule_nodeParam === 'object'){
                        updateNetworkSwitchPortSchedule_parameters.updateNetworkSwitchPortSchedule = updateNetworkSwitchPortSchedule_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchPortSchedule_nodeParam || '{}'
                        updateNetworkSwitchPortSchedule_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchPortSchedule_parameters.updateNetworkSwitchPortSchedule = updateNetworkSwitchPortSchedule_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchPortSchedule_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchPortSchedule(updateNetworkSwitchPortSchedule_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchQosRules') {
                var getNetworkSwitchQosRules_parameters = [];
                var getNetworkSwitchQosRules_nodeParam;
                var getNetworkSwitchQosRules_nodeParamType;
                
                
                getNetworkSwitchQosRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchQosRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchQosRules_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchQosRules_nodeParamType is "str"');
                    getNetworkSwitchQosRules_parameters.networkId = getNetworkSwitchQosRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchQosRules_nodeParamType is not "str"')
                    getNetworkSwitchQosRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchQosRules(getNetworkSwitchQosRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSwitchQosRule') {
                var createNetworkSwitchQosRule_parameters = [];
                var createNetworkSwitchQosRule_nodeParam;
                var createNetworkSwitchQosRule_nodeParamType;
                
                
                createNetworkSwitchQosRule_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchQosRule_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchQosRule_nodeParamType is "str"');
                    createNetworkSwitchQosRule_parameters.networkId = createNetworkSwitchQosRule_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchQosRule_nodeParamType is not "str"')
                    createNetworkSwitchQosRule_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSwitchQosRule_nodeParam = storedParamValsMap['createNetworkSwitchQosRule'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchQosRule");

                createNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['createNetworkSwitchQosRule'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchQosRule");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSwitchQosRule_parameters.createNetworkSwitchQosRule = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSwitchQosRule_nodeParam === 'object'){
                        createNetworkSwitchQosRule_parameters.createNetworkSwitchQosRule = createNetworkSwitchQosRule_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSwitchQosRule_nodeParam || '{}'
                        createNetworkSwitchQosRule_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSwitchQosRule_parameters.createNetworkSwitchQosRule = createNetworkSwitchQosRule_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSwitchQosRule_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSwitchQosRule(createNetworkSwitchQosRule_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchQosRulesOrder') {
                var getNetworkSwitchQosRulesOrder_parameters = [];
                var getNetworkSwitchQosRulesOrder_nodeParam;
                var getNetworkSwitchQosRulesOrder_nodeParamType;
                
                
                getNetworkSwitchQosRulesOrder_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchQosRulesOrder_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchQosRulesOrder_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchQosRulesOrder_nodeParamType is "str"');
                    getNetworkSwitchQosRulesOrder_parameters.networkId = getNetworkSwitchQosRulesOrder_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchQosRulesOrder_nodeParamType is not "str"')
                    getNetworkSwitchQosRulesOrder_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchQosRulesOrder(getNetworkSwitchQosRulesOrder_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchQosRulesOrder') {
                var updateNetworkSwitchQosRulesOrder_parameters = [];
                var updateNetworkSwitchQosRulesOrder_nodeParam;
                var updateNetworkSwitchQosRulesOrder_nodeParamType;
                
                
                updateNetworkSwitchQosRulesOrder_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchQosRulesOrder_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchQosRulesOrder_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchQosRulesOrder_nodeParamType is "str"');
                    updateNetworkSwitchQosRulesOrder_parameters.networkId = updateNetworkSwitchQosRulesOrder_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchQosRulesOrder_nodeParamType is not "str"')
                    updateNetworkSwitchQosRulesOrder_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchQosRulesOrder_nodeParam = storedParamValsMap['updateNetworkSwitchQosRulesOrder'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchQosRulesOrder");

                updateNetworkSwitchQosRulesOrder_nodeParamType = storedParamTypeMap['updateNetworkSwitchQosRulesOrder'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchQosRulesOrder");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchQosRulesOrder_parameters.updateNetworkSwitchQosRulesOrder = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchQosRulesOrder_nodeParam === 'object'){
                        updateNetworkSwitchQosRulesOrder_parameters.updateNetworkSwitchQosRulesOrder = updateNetworkSwitchQosRulesOrder_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchQosRulesOrder_nodeParam || '{}'
                        updateNetworkSwitchQosRulesOrder_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchQosRulesOrder_parameters.updateNetworkSwitchQosRulesOrder = updateNetworkSwitchQosRulesOrder_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchQosRulesOrder_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchQosRulesOrder(updateNetworkSwitchQosRulesOrder_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchQosRule') {
                var getNetworkSwitchQosRule_parameters = [];
                var getNetworkSwitchQosRule_nodeParam;
                var getNetworkSwitchQosRule_nodeParamType;
                
                
                getNetworkSwitchQosRule_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchQosRule_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchQosRule_nodeParamType is "str"');
                    getNetworkSwitchQosRule_parameters.networkId = getNetworkSwitchQosRule_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchQosRule_nodeParamType is not "str"')
                    getNetworkSwitchQosRule_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchQosRule_nodeParam = storedParamValsMap['qosRuleId'] ||
                    RED.util.getMessageProperty(msg, "qosRuleId");

                getNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['qosRuleId'] ||
                    RED.util.getMessageProperty(msg, "qosRuleId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchQosRule_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchQosRule_nodeParamType is "str"');
                    getNetworkSwitchQosRule_parameters.qosRuleId = getNetworkSwitchQosRule_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchQosRule_nodeParamType is not "str"')
                    getNetworkSwitchQosRule_parameters.qosRuleId = RED.util.getMessageProperty(msg, "qosRuleId");
                }
                                result = client.getNetworkSwitchQosRule(getNetworkSwitchQosRule_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSwitchQosRule') {
                var deleteNetworkSwitchQosRule_parameters = [];
                var deleteNetworkSwitchQosRule_nodeParam;
                var deleteNetworkSwitchQosRule_nodeParamType;
                
                
                deleteNetworkSwitchQosRule_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchQosRule_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchQosRule_nodeParamType is "str"');
                    deleteNetworkSwitchQosRule_parameters.networkId = deleteNetworkSwitchQosRule_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchQosRule_nodeParamType is not "str"')
                    deleteNetworkSwitchQosRule_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSwitchQosRule_nodeParam = storedParamValsMap['qosRuleId'] ||
                    RED.util.getMessageProperty(msg, "qosRuleId");

                deleteNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['qosRuleId'] ||
                    RED.util.getMessageProperty(msg, "qosRuleId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchQosRule_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchQosRule_nodeParamType is "str"');
                    deleteNetworkSwitchQosRule_parameters.qosRuleId = deleteNetworkSwitchQosRule_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchQosRule_nodeParamType is not "str"')
                    deleteNetworkSwitchQosRule_parameters.qosRuleId = RED.util.getMessageProperty(msg, "qosRuleId");
                }
                                result = client.deleteNetworkSwitchQosRule(deleteNetworkSwitchQosRule_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchQosRule') {
                var updateNetworkSwitchQosRule_parameters = [];
                var updateNetworkSwitchQosRule_nodeParam;
                var updateNetworkSwitchQosRule_nodeParamType;
                
                
                updateNetworkSwitchQosRule_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchQosRule_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchQosRule_nodeParamType is "str"');
                    updateNetworkSwitchQosRule_parameters.networkId = updateNetworkSwitchQosRule_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchQosRule_nodeParamType is not "str"')
                    updateNetworkSwitchQosRule_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchQosRule_nodeParam = storedParamValsMap['qosRuleId'] ||
                    RED.util.getMessageProperty(msg, "qosRuleId");

                updateNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['qosRuleId'] ||
                    RED.util.getMessageProperty(msg, "qosRuleId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchQosRule_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchQosRule_nodeParamType is "str"');
                    updateNetworkSwitchQosRule_parameters.qosRuleId = updateNetworkSwitchQosRule_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchQosRule_nodeParamType is not "str"')
                    updateNetworkSwitchQosRule_parameters.qosRuleId = RED.util.getMessageProperty(msg, "qosRuleId");
                }
                                
                updateNetworkSwitchQosRule_nodeParam = storedParamValsMap['updateNetworkSwitchQosRule'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchQosRule");

                updateNetworkSwitchQosRule_nodeParamType = storedParamTypeMap['updateNetworkSwitchQosRule'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchQosRule");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchQosRule_parameters.updateNetworkSwitchQosRule = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchQosRule_nodeParam === 'object'){
                        updateNetworkSwitchQosRule_parameters.updateNetworkSwitchQosRule = updateNetworkSwitchQosRule_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchQosRule_nodeParam || '{}'
                        updateNetworkSwitchQosRule_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchQosRule_parameters.updateNetworkSwitchQosRule = updateNetworkSwitchQosRule_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchQosRule_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchQosRule(updateNetworkSwitchQosRule_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchRoutingMulticast') {
                var getNetworkSwitchRoutingMulticast_parameters = [];
                var getNetworkSwitchRoutingMulticast_nodeParam;
                var getNetworkSwitchRoutingMulticast_nodeParamType;
                
                
                getNetworkSwitchRoutingMulticast_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchRoutingMulticast_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchRoutingMulticast_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchRoutingMulticast_nodeParamType is "str"');
                    getNetworkSwitchRoutingMulticast_parameters.networkId = getNetworkSwitchRoutingMulticast_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchRoutingMulticast_nodeParamType is not "str"')
                    getNetworkSwitchRoutingMulticast_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchRoutingMulticast(getNetworkSwitchRoutingMulticast_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchRoutingMulticast') {
                var updateNetworkSwitchRoutingMulticast_parameters = [];
                var updateNetworkSwitchRoutingMulticast_nodeParam;
                var updateNetworkSwitchRoutingMulticast_nodeParamType;
                
                
                updateNetworkSwitchRoutingMulticast_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchRoutingMulticast_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchRoutingMulticast_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchRoutingMulticast_nodeParamType is "str"');
                    updateNetworkSwitchRoutingMulticast_parameters.networkId = updateNetworkSwitchRoutingMulticast_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchRoutingMulticast_nodeParamType is not "str"')
                    updateNetworkSwitchRoutingMulticast_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchRoutingMulticast_nodeParam = storedParamValsMap['updateNetworkSwitchRoutingMulticast'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchRoutingMulticast");

                updateNetworkSwitchRoutingMulticast_nodeParamType = storedParamTypeMap['updateNetworkSwitchRoutingMulticast'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchRoutingMulticast");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchRoutingMulticast_parameters.updateNetworkSwitchRoutingMulticast = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchRoutingMulticast_nodeParam === 'object'){
                        updateNetworkSwitchRoutingMulticast_parameters.updateNetworkSwitchRoutingMulticast = updateNetworkSwitchRoutingMulticast_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchRoutingMulticast_nodeParam || '{}'
                        updateNetworkSwitchRoutingMulticast_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchRoutingMulticast_parameters.updateNetworkSwitchRoutingMulticast = updateNetworkSwitchRoutingMulticast_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchRoutingMulticast_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchRoutingMulticast(updateNetworkSwitchRoutingMulticast_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchRoutingMulticastRendezvousPoints') {
                var getNetworkSwitchRoutingMulticastRendezvousPoints_parameters = [];
                var getNetworkSwitchRoutingMulticastRendezvousPoints_nodeParam;
                var getNetworkSwitchRoutingMulticastRendezvousPoints_nodeParamType;
                
                
                getNetworkSwitchRoutingMulticastRendezvousPoints_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchRoutingMulticastRendezvousPoints_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchRoutingMulticastRendezvousPoints_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchRoutingMulticastRendezvousPoints_nodeParamType is "str"');
                    getNetworkSwitchRoutingMulticastRendezvousPoints_parameters.networkId = getNetworkSwitchRoutingMulticastRendezvousPoints_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchRoutingMulticastRendezvousPoints_nodeParamType is not "str"')
                    getNetworkSwitchRoutingMulticastRendezvousPoints_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchRoutingMulticastRendezvousPoints(getNetworkSwitchRoutingMulticastRendezvousPoints_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSwitchRoutingMulticastRendezvousPoint') {
                var createNetworkSwitchRoutingMulticastRendezvousPoint_parameters = [];
                var createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam;
                var createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType;
                
                
                createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is "str"');
                    createNetworkSwitchRoutingMulticastRendezvousPoint_parameters.networkId = createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is not "str"')
                    createNetworkSwitchRoutingMulticastRendezvousPoint_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['createNetworkSwitchRoutingMulticastRendezvousPoint'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchRoutingMulticastRendezvousPoint");

                createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['createNetworkSwitchRoutingMulticastRendezvousPoint'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchRoutingMulticastRendezvousPoint");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSwitchRoutingMulticastRendezvousPoint_parameters.createNetworkSwitchRoutingMulticastRendezvousPoint = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam === 'object'){
                        createNetworkSwitchRoutingMulticastRendezvousPoint_parameters.createNetworkSwitchRoutingMulticastRendezvousPoint = createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || '{}'
                        createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSwitchRoutingMulticastRendezvousPoint_parameters.createNetworkSwitchRoutingMulticastRendezvousPoint = createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSwitchRoutingMulticastRendezvousPoint(createNetworkSwitchRoutingMulticastRendezvousPoint_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchRoutingMulticastRendezvousPoint') {
                var getNetworkSwitchRoutingMulticastRendezvousPoint_parameters = [];
                var getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam;
                var getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType;
                
                
                getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is "str"');
                    getNetworkSwitchRoutingMulticastRendezvousPoint_parameters.networkId = getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is not "str"')
                    getNetworkSwitchRoutingMulticastRendezvousPoint_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['rendezvousPointId'] ||
                    RED.util.getMessageProperty(msg, "rendezvousPointId");

                getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['rendezvousPointId'] ||
                    RED.util.getMessageProperty(msg, "rendezvousPointId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is "str"');
                    getNetworkSwitchRoutingMulticastRendezvousPoint_parameters.rendezvousPointId = getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is not "str"')
                    getNetworkSwitchRoutingMulticastRendezvousPoint_parameters.rendezvousPointId = RED.util.getMessageProperty(msg, "rendezvousPointId");
                }
                                result = client.getNetworkSwitchRoutingMulticastRendezvousPoint(getNetworkSwitchRoutingMulticastRendezvousPoint_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSwitchRoutingMulticastRendezvousPoint') {
                var deleteNetworkSwitchRoutingMulticastRendezvousPoint_parameters = [];
                var deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam;
                var deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType;
                
                
                deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is "str"');
                    deleteNetworkSwitchRoutingMulticastRendezvousPoint_parameters.networkId = deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is not "str"')
                    deleteNetworkSwitchRoutingMulticastRendezvousPoint_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['rendezvousPointId'] ||
                    RED.util.getMessageProperty(msg, "rendezvousPointId");

                deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['rendezvousPointId'] ||
                    RED.util.getMessageProperty(msg, "rendezvousPointId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is "str"');
                    deleteNetworkSwitchRoutingMulticastRendezvousPoint_parameters.rendezvousPointId = deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is not "str"')
                    deleteNetworkSwitchRoutingMulticastRendezvousPoint_parameters.rendezvousPointId = RED.util.getMessageProperty(msg, "rendezvousPointId");
                }
                                result = client.deleteNetworkSwitchRoutingMulticastRendezvousPoint(deleteNetworkSwitchRoutingMulticastRendezvousPoint_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchRoutingMulticastRendezvousPoint') {
                var updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters = [];
                var updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam;
                var updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType;
                
                
                updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is "str"');
                    updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters.networkId = updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is not "str"')
                    updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['rendezvousPointId'] ||
                    RED.util.getMessageProperty(msg, "rendezvousPointId");

                updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['rendezvousPointId'] ||
                    RED.util.getMessageProperty(msg, "rendezvousPointId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is "str"');
                    updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters.rendezvousPointId = updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType is not "str"')
                    updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters.rendezvousPointId = RED.util.getMessageProperty(msg, "rendezvousPointId");
                }
                                
                updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = storedParamValsMap['updateNetworkSwitchRoutingMulticastRendezvousPoint'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchRoutingMulticastRendezvousPoint");

                updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParamType = storedParamTypeMap['updateNetworkSwitchRoutingMulticastRendezvousPoint'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchRoutingMulticastRendezvousPoint");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters.updateNetworkSwitchRoutingMulticastRendezvousPoint = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam === 'object'){
                        updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters.updateNetworkSwitchRoutingMulticastRendezvousPoint = updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam || '{}'
                        updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters.updateNetworkSwitchRoutingMulticastRendezvousPoint = updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchRoutingMulticastRendezvousPoint_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchRoutingMulticastRendezvousPoint(updateNetworkSwitchRoutingMulticastRendezvousPoint_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchRoutingOspf') {
                var getNetworkSwitchRoutingOspf_parameters = [];
                var getNetworkSwitchRoutingOspf_nodeParam;
                var getNetworkSwitchRoutingOspf_nodeParamType;
                
                
                getNetworkSwitchRoutingOspf_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchRoutingOspf_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchRoutingOspf_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchRoutingOspf_nodeParamType is "str"');
                    getNetworkSwitchRoutingOspf_parameters.networkId = getNetworkSwitchRoutingOspf_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchRoutingOspf_nodeParamType is not "str"')
                    getNetworkSwitchRoutingOspf_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchRoutingOspf(getNetworkSwitchRoutingOspf_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchRoutingOspf') {
                var updateNetworkSwitchRoutingOspf_parameters = [];
                var updateNetworkSwitchRoutingOspf_nodeParam;
                var updateNetworkSwitchRoutingOspf_nodeParamType;
                
                
                updateNetworkSwitchRoutingOspf_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchRoutingOspf_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchRoutingOspf_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchRoutingOspf_nodeParamType is "str"');
                    updateNetworkSwitchRoutingOspf_parameters.networkId = updateNetworkSwitchRoutingOspf_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchRoutingOspf_nodeParamType is not "str"')
                    updateNetworkSwitchRoutingOspf_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchRoutingOspf_nodeParam = storedParamValsMap['updateNetworkSwitchRoutingOspf'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchRoutingOspf");

                updateNetworkSwitchRoutingOspf_nodeParamType = storedParamTypeMap['updateNetworkSwitchRoutingOspf'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchRoutingOspf");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchRoutingOspf_parameters.updateNetworkSwitchRoutingOspf = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchRoutingOspf_nodeParam === 'object'){
                        updateNetworkSwitchRoutingOspf_parameters.updateNetworkSwitchRoutingOspf = updateNetworkSwitchRoutingOspf_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchRoutingOspf_nodeParam || '{}'
                        updateNetworkSwitchRoutingOspf_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchRoutingOspf_parameters.updateNetworkSwitchRoutingOspf = updateNetworkSwitchRoutingOspf_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchRoutingOspf_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchRoutingOspf(updateNetworkSwitchRoutingOspf_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchSettings') {
                var getNetworkSwitchSettings_parameters = [];
                var getNetworkSwitchSettings_nodeParam;
                var getNetworkSwitchSettings_nodeParamType;
                
                
                getNetworkSwitchSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchSettings_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchSettings_nodeParamType is "str"');
                    getNetworkSwitchSettings_parameters.networkId = getNetworkSwitchSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchSettings_nodeParamType is not "str"')
                    getNetworkSwitchSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchSettings(getNetworkSwitchSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchSettings') {
                var updateNetworkSwitchSettings_parameters = [];
                var updateNetworkSwitchSettings_nodeParam;
                var updateNetworkSwitchSettings_nodeParamType;
                
                
                updateNetworkSwitchSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchSettings_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchSettings_nodeParamType is "str"');
                    updateNetworkSwitchSettings_parameters.networkId = updateNetworkSwitchSettings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchSettings_nodeParamType is not "str"')
                    updateNetworkSwitchSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchSettings_nodeParam = storedParamValsMap['updateNetworkSwitchSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchSettings");

                updateNetworkSwitchSettings_nodeParamType = storedParamTypeMap['updateNetworkSwitchSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchSettings_parameters.updateNetworkSwitchSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchSettings_nodeParam === 'object'){
                        updateNetworkSwitchSettings_parameters.updateNetworkSwitchSettings = updateNetworkSwitchSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchSettings_nodeParam || '{}'
                        updateNetworkSwitchSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchSettings_parameters.updateNetworkSwitchSettings = updateNetworkSwitchSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchSettings(updateNetworkSwitchSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStacks') {
                var getNetworkSwitchStacks_parameters = [];
                var getNetworkSwitchStacks_nodeParam;
                var getNetworkSwitchStacks_nodeParamType;
                
                
                getNetworkSwitchStacks_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStacks_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStacks_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStacks_nodeParamType is "str"');
                    getNetworkSwitchStacks_parameters.networkId = getNetworkSwitchStacks_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStacks_nodeParamType is not "str"')
                    getNetworkSwitchStacks_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchStacks(getNetworkSwitchStacks_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSwitchStack') {
                var createNetworkSwitchStack_parameters = [];
                var createNetworkSwitchStack_nodeParam;
                var createNetworkSwitchStack_nodeParamType;
                
                
                createNetworkSwitchStack_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSwitchStack_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchStack_nodeParamType is "str"');
                    createNetworkSwitchStack_parameters.networkId = createNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchStack_nodeParamType is not "str"')
                    createNetworkSwitchStack_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSwitchStack_nodeParam = storedParamValsMap['createNetworkSwitchStack'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchStack");

                createNetworkSwitchStack_nodeParamType = storedParamTypeMap['createNetworkSwitchStack'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchStack");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSwitchStack_parameters.createNetworkSwitchStack = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSwitchStack_nodeParam === 'object'){
                        createNetworkSwitchStack_parameters.createNetworkSwitchStack = createNetworkSwitchStack_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSwitchStack_nodeParam || '{}'
                        createNetworkSwitchStack_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSwitchStack_parameters.createNetworkSwitchStack = createNetworkSwitchStack_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSwitchStack_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSwitchStack(createNetworkSwitchStack_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStack') {
                var getNetworkSwitchStack_parameters = [];
                var getNetworkSwitchStack_nodeParam;
                var getNetworkSwitchStack_nodeParamType;
                
                
                getNetworkSwitchStack_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStack_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStack_nodeParamType is "str"');
                    getNetworkSwitchStack_parameters.networkId = getNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStack_nodeParamType is not "str"')
                    getNetworkSwitchStack_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchStack_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                getNetworkSwitchStack_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStack_nodeParamType is "str"');
                    getNetworkSwitchStack_parameters.switchStackId = getNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStack_nodeParamType is not "str"')
                    getNetworkSwitchStack_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                result = client.getNetworkSwitchStack(getNetworkSwitchStack_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSwitchStack') {
                var deleteNetworkSwitchStack_parameters = [];
                var deleteNetworkSwitchStack_nodeParam;
                var deleteNetworkSwitchStack_nodeParamType;
                
                
                deleteNetworkSwitchStack_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSwitchStack_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchStack_nodeParamType is "str"');
                    deleteNetworkSwitchStack_parameters.networkId = deleteNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchStack_nodeParamType is not "str"')
                    deleteNetworkSwitchStack_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSwitchStack_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                deleteNetworkSwitchStack_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchStack_nodeParamType is "str"');
                    deleteNetworkSwitchStack_parameters.switchStackId = deleteNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchStack_nodeParamType is not "str"')
                    deleteNetworkSwitchStack_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                result = client.deleteNetworkSwitchStack(deleteNetworkSwitchStack_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'addNetworkSwitchStack') {
                var addNetworkSwitchStack_parameters = [];
                var addNetworkSwitchStack_nodeParam;
                var addNetworkSwitchStack_nodeParamType;
                
                
                addNetworkSwitchStack_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                addNetworkSwitchStack_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (addNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('addNetworkSwitchStack_nodeParamType is "str"');
                    addNetworkSwitchStack_parameters.networkId = addNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('addNetworkSwitchStack_nodeParamType is not "str"')
                    addNetworkSwitchStack_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                addNetworkSwitchStack_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                addNetworkSwitchStack_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (addNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('addNetworkSwitchStack_nodeParamType is "str"');
                    addNetworkSwitchStack_parameters.switchStackId = addNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('addNetworkSwitchStack_nodeParamType is not "str"')
                    addNetworkSwitchStack_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                addNetworkSwitchStack_nodeParam = storedParamValsMap['addNetworkSwitchStack'] ||
                    RED.util.getMessageProperty(msg, "addNetworkSwitchStack");

                addNetworkSwitchStack_nodeParamType = storedParamTypeMap['addNetworkSwitchStack'] ||
                    RED.util.getMessageProperty(msg, "addNetworkSwitchStack");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        addNetworkSwitchStack_parameters.addNetworkSwitchStack = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof addNetworkSwitchStack_nodeParam === 'object'){
                        addNetworkSwitchStack_parameters.addNetworkSwitchStack = addNetworkSwitchStack_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = addNetworkSwitchStack_nodeParam || '{}'
                        addNetworkSwitchStack_nodeParam = JSON.parse(nodeParam) ; 
                        addNetworkSwitchStack_parameters.addNetworkSwitchStack = addNetworkSwitchStack_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof addNetworkSwitchStack_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.addNetworkSwitchStack(addNetworkSwitchStack_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'removeNetworkSwitchStack') {
                var removeNetworkSwitchStack_parameters = [];
                var removeNetworkSwitchStack_nodeParam;
                var removeNetworkSwitchStack_nodeParamType;
                
                
                removeNetworkSwitchStack_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                removeNetworkSwitchStack_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (removeNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('removeNetworkSwitchStack_nodeParamType is "str"');
                    removeNetworkSwitchStack_parameters.networkId = removeNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('removeNetworkSwitchStack_nodeParamType is not "str"')
                    removeNetworkSwitchStack_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                removeNetworkSwitchStack_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                removeNetworkSwitchStack_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (removeNetworkSwitchStack_nodeParamType === 'str') {
                    //console.log('removeNetworkSwitchStack_nodeParamType is "str"');
                    removeNetworkSwitchStack_parameters.switchStackId = removeNetworkSwitchStack_nodeParam || undefined;
                } else {
                    //console.log('removeNetworkSwitchStack_nodeParamType is not "str"')
                    removeNetworkSwitchStack_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                removeNetworkSwitchStack_nodeParam = storedParamValsMap['removeNetworkSwitchStack'] ||
                    RED.util.getMessageProperty(msg, "removeNetworkSwitchStack");

                removeNetworkSwitchStack_nodeParamType = storedParamTypeMap['removeNetworkSwitchStack'] ||
                    RED.util.getMessageProperty(msg, "removeNetworkSwitchStack");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        removeNetworkSwitchStack_parameters.removeNetworkSwitchStack = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof removeNetworkSwitchStack_nodeParam === 'object'){
                        removeNetworkSwitchStack_parameters.removeNetworkSwitchStack = removeNetworkSwitchStack_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = removeNetworkSwitchStack_nodeParam || '{}'
                        removeNetworkSwitchStack_nodeParam = JSON.parse(nodeParam) ; 
                        removeNetworkSwitchStack_parameters.removeNetworkSwitchStack = removeNetworkSwitchStack_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof removeNetworkSwitchStack_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.removeNetworkSwitchStack(removeNetworkSwitchStack_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStackRoutingInterfaces') {
                var getNetworkSwitchStackRoutingInterfaces_parameters = [];
                var getNetworkSwitchStackRoutingInterfaces_nodeParam;
                var getNetworkSwitchStackRoutingInterfaces_nodeParamType;
                
                
                getNetworkSwitchStackRoutingInterfaces_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStackRoutingInterfaces_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingInterfaces_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingInterfaces_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingInterfaces_parameters.networkId = getNetworkSwitchStackRoutingInterfaces_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingInterfaces_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingInterfaces_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchStackRoutingInterfaces_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                getNetworkSwitchStackRoutingInterfaces_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingInterfaces_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingInterfaces_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingInterfaces_parameters.switchStackId = getNetworkSwitchStackRoutingInterfaces_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingInterfaces_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingInterfaces_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                result = client.getNetworkSwitchStackRoutingInterfaces(getNetworkSwitchStackRoutingInterfaces_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSwitchStackRoutingInterface') {
                var createNetworkSwitchStackRoutingInterface_parameters = [];
                var createNetworkSwitchStackRoutingInterface_nodeParam;
                var createNetworkSwitchStackRoutingInterface_nodeParamType;
                
                
                createNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    createNetworkSwitchStackRoutingInterface_parameters.networkId = createNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    createNetworkSwitchStackRoutingInterface_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                createNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    createNetworkSwitchStackRoutingInterface_parameters.switchStackId = createNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    createNetworkSwitchStackRoutingInterface_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                createNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['createNetworkSwitchStackRoutingInterface'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchStackRoutingInterface");

                createNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['createNetworkSwitchStackRoutingInterface'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchStackRoutingInterface");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSwitchStackRoutingInterface_parameters.createNetworkSwitchStackRoutingInterface = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSwitchStackRoutingInterface_nodeParam === 'object'){
                        createNetworkSwitchStackRoutingInterface_parameters.createNetworkSwitchStackRoutingInterface = createNetworkSwitchStackRoutingInterface_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSwitchStackRoutingInterface_nodeParam || '{}'
                        createNetworkSwitchStackRoutingInterface_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSwitchStackRoutingInterface_parameters.createNetworkSwitchStackRoutingInterface = createNetworkSwitchStackRoutingInterface_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSwitchStackRoutingInterface_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSwitchStackRoutingInterface(createNetworkSwitchStackRoutingInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStackRoutingInterface') {
                var getNetworkSwitchStackRoutingInterface_parameters = [];
                var getNetworkSwitchStackRoutingInterface_nodeParam;
                var getNetworkSwitchStackRoutingInterface_nodeParamType;
                
                
                getNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingInterface_parameters.networkId = getNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingInterface_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                getNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingInterface_parameters.switchStackId = getNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingInterface_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                getNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                getNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingInterface_parameters.interfaceId = getNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingInterface_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                result = client.getNetworkSwitchStackRoutingInterface(getNetworkSwitchStackRoutingInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchStackRoutingInterface') {
                var updateNetworkSwitchStackRoutingInterface_parameters = [];
                var updateNetworkSwitchStackRoutingInterface_nodeParam;
                var updateNetworkSwitchStackRoutingInterface_nodeParamType;
                
                
                updateNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingInterface_parameters.networkId = updateNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingInterface_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                updateNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingInterface_parameters.switchStackId = updateNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingInterface_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                updateNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                updateNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingInterface_parameters.interfaceId = updateNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingInterface_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                
                updateNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['updateNetworkSwitchStackRoutingInterface'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStackRoutingInterface");

                updateNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['updateNetworkSwitchStackRoutingInterface'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStackRoutingInterface");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchStackRoutingInterface_parameters.updateNetworkSwitchStackRoutingInterface = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchStackRoutingInterface_nodeParam === 'object'){
                        updateNetworkSwitchStackRoutingInterface_parameters.updateNetworkSwitchStackRoutingInterface = updateNetworkSwitchStackRoutingInterface_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchStackRoutingInterface_nodeParam || '{}'
                        updateNetworkSwitchStackRoutingInterface_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchStackRoutingInterface_parameters.updateNetworkSwitchStackRoutingInterface = updateNetworkSwitchStackRoutingInterface_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchStackRoutingInterface_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchStackRoutingInterface(updateNetworkSwitchStackRoutingInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSwitchStackRoutingInterface') {
                var deleteNetworkSwitchStackRoutingInterface_parameters = [];
                var deleteNetworkSwitchStackRoutingInterface_nodeParam;
                var deleteNetworkSwitchStackRoutingInterface_nodeParamType;
                
                
                deleteNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    deleteNetworkSwitchStackRoutingInterface_parameters.networkId = deleteNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    deleteNetworkSwitchStackRoutingInterface_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                deleteNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    deleteNetworkSwitchStackRoutingInterface_parameters.switchStackId = deleteNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    deleteNetworkSwitchStackRoutingInterface_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                deleteNetworkSwitchStackRoutingInterface_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                deleteNetworkSwitchStackRoutingInterface_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchStackRoutingInterface_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchStackRoutingInterface_nodeParamType is "str"');
                    deleteNetworkSwitchStackRoutingInterface_parameters.interfaceId = deleteNetworkSwitchStackRoutingInterface_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchStackRoutingInterface_nodeParamType is not "str"')
                    deleteNetworkSwitchStackRoutingInterface_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                result = client.deleteNetworkSwitchStackRoutingInterface(deleteNetworkSwitchStackRoutingInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStackRoutingInterfaceDhcp') {
                var getNetworkSwitchStackRoutingInterfaceDhcp_parameters = [];
                var getNetworkSwitchStackRoutingInterfaceDhcp_nodeParam;
                var getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType;
                
                
                getNetworkSwitchStackRoutingInterfaceDhcp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingInterfaceDhcp_parameters.networkId = getNetworkSwitchStackRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingInterfaceDhcp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchStackRoutingInterfaceDhcp_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingInterfaceDhcp_parameters.switchStackId = getNetworkSwitchStackRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingInterfaceDhcp_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                getNetworkSwitchStackRoutingInterfaceDhcp_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingInterfaceDhcp_parameters.interfaceId = getNetworkSwitchStackRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingInterfaceDhcp_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                result = client.getNetworkSwitchStackRoutingInterfaceDhcp(getNetworkSwitchStackRoutingInterfaceDhcp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchStackRoutingInterfaceDhcp') {
                var updateNetworkSwitchStackRoutingInterfaceDhcp_parameters = [];
                var updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam;
                var updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType;
                
                
                updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.networkId = updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.switchStackId = updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam = storedParamValsMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['interfaceId'] ||
                    RED.util.getMessageProperty(msg, "interfaceId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.interfaceId = updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.interfaceId = RED.util.getMessageProperty(msg, "interfaceId");
                }
                                
                updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam = storedParamValsMap['updateNetworkSwitchStackRoutingInterfaceDhcp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStackRoutingInterfaceDhcp");

                updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParamType = storedParamTypeMap['updateNetworkSwitchStackRoutingInterfaceDhcp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStackRoutingInterfaceDhcp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.updateNetworkSwitchStackRoutingInterfaceDhcp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam === 'object'){
                        updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.updateNetworkSwitchStackRoutingInterfaceDhcp = updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam || '{}'
                        updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchStackRoutingInterfaceDhcp_parameters.updateNetworkSwitchStackRoutingInterfaceDhcp = updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchStackRoutingInterfaceDhcp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchStackRoutingInterfaceDhcp(updateNetworkSwitchStackRoutingInterfaceDhcp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStackRoutingStaticRoutes') {
                var getNetworkSwitchStackRoutingStaticRoutes_parameters = [];
                var getNetworkSwitchStackRoutingStaticRoutes_nodeParam;
                var getNetworkSwitchStackRoutingStaticRoutes_nodeParamType;
                
                
                getNetworkSwitchStackRoutingStaticRoutes_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStackRoutingStaticRoutes_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingStaticRoutes_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingStaticRoutes_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingStaticRoutes_parameters.networkId = getNetworkSwitchStackRoutingStaticRoutes_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingStaticRoutes_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingStaticRoutes_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchStackRoutingStaticRoutes_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                getNetworkSwitchStackRoutingStaticRoutes_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingStaticRoutes_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingStaticRoutes_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingStaticRoutes_parameters.switchStackId = getNetworkSwitchStackRoutingStaticRoutes_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingStaticRoutes_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingStaticRoutes_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                result = client.getNetworkSwitchStackRoutingStaticRoutes(getNetworkSwitchStackRoutingStaticRoutes_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkSwitchStackRoutingStaticRoute') {
                var createNetworkSwitchStackRoutingStaticRoute_parameters = [];
                var createNetworkSwitchStackRoutingStaticRoute_nodeParam;
                var createNetworkSwitchStackRoutingStaticRoute_nodeParamType;
                
                
                createNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    createNetworkSwitchStackRoutingStaticRoute_parameters.networkId = createNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    createNetworkSwitchStackRoutingStaticRoute_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                createNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('createNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    createNetworkSwitchStackRoutingStaticRoute_parameters.switchStackId = createNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('createNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    createNetworkSwitchStackRoutingStaticRoute_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                createNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['createNetworkSwitchStackRoutingStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchStackRoutingStaticRoute");

                createNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['createNetworkSwitchStackRoutingStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "createNetworkSwitchStackRoutingStaticRoute");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkSwitchStackRoutingStaticRoute_parameters.createNetworkSwitchStackRoutingStaticRoute = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkSwitchStackRoutingStaticRoute_nodeParam === 'object'){
                        createNetworkSwitchStackRoutingStaticRoute_parameters.createNetworkSwitchStackRoutingStaticRoute = createNetworkSwitchStackRoutingStaticRoute_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkSwitchStackRoutingStaticRoute_nodeParam || '{}'
                        createNetworkSwitchStackRoutingStaticRoute_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkSwitchStackRoutingStaticRoute_parameters.createNetworkSwitchStackRoutingStaticRoute = createNetworkSwitchStackRoutingStaticRoute_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkSwitchStackRoutingStaticRoute_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkSwitchStackRoutingStaticRoute(createNetworkSwitchStackRoutingStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStackRoutingStaticRoute') {
                var getNetworkSwitchStackRoutingStaticRoute_parameters = [];
                var getNetworkSwitchStackRoutingStaticRoute_nodeParam;
                var getNetworkSwitchStackRoutingStaticRoute_nodeParamType;
                
                
                getNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingStaticRoute_parameters.networkId = getNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingStaticRoute_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                getNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingStaticRoute_parameters.switchStackId = getNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingStaticRoute_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                getNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                getNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    getNetworkSwitchStackRoutingStaticRoute_parameters.staticRouteId = getNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    getNetworkSwitchStackRoutingStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                result = client.getNetworkSwitchStackRoutingStaticRoute(getNetworkSwitchStackRoutingStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchStackRoutingStaticRoute') {
                var updateNetworkSwitchStackRoutingStaticRoute_parameters = [];
                var updateNetworkSwitchStackRoutingStaticRoute_nodeParam;
                var updateNetworkSwitchStackRoutingStaticRoute_nodeParamType;
                
                
                updateNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingStaticRoute_parameters.networkId = updateNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingStaticRoute_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                updateNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingStaticRoute_parameters.switchStackId = updateNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingStaticRoute_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                updateNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                updateNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    updateNetworkSwitchStackRoutingStaticRoute_parameters.staticRouteId = updateNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    updateNetworkSwitchStackRoutingStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                
                updateNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['updateNetworkSwitchStackRoutingStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStackRoutingStaticRoute");

                updateNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['updateNetworkSwitchStackRoutingStaticRoute'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStackRoutingStaticRoute");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchStackRoutingStaticRoute_parameters.updateNetworkSwitchStackRoutingStaticRoute = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchStackRoutingStaticRoute_nodeParam === 'object'){
                        updateNetworkSwitchStackRoutingStaticRoute_parameters.updateNetworkSwitchStackRoutingStaticRoute = updateNetworkSwitchStackRoutingStaticRoute_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchStackRoutingStaticRoute_nodeParam || '{}'
                        updateNetworkSwitchStackRoutingStaticRoute_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchStackRoutingStaticRoute_parameters.updateNetworkSwitchStackRoutingStaticRoute = updateNetworkSwitchStackRoutingStaticRoute_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchStackRoutingStaticRoute_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchStackRoutingStaticRoute(updateNetworkSwitchStackRoutingStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkSwitchStackRoutingStaticRoute') {
                var deleteNetworkSwitchStackRoutingStaticRoute_parameters = [];
                var deleteNetworkSwitchStackRoutingStaticRoute_nodeParam;
                var deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType;
                
                
                deleteNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    deleteNetworkSwitchStackRoutingStaticRoute_parameters.networkId = deleteNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    deleteNetworkSwitchStackRoutingStaticRoute_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['switchStackId'] ||
                    RED.util.getMessageProperty(msg, "switchStackId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    deleteNetworkSwitchStackRoutingStaticRoute_parameters.switchStackId = deleteNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    deleteNetworkSwitchStackRoutingStaticRoute_parameters.switchStackId = RED.util.getMessageProperty(msg, "switchStackId");
                }
                                
                deleteNetworkSwitchStackRoutingStaticRoute_nodeParam = storedParamValsMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType = storedParamTypeMap['staticRouteId'] ||
                    RED.util.getMessageProperty(msg, "staticRouteId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType === 'str') {
                    //console.log('deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType is "str"');
                    deleteNetworkSwitchStackRoutingStaticRoute_parameters.staticRouteId = deleteNetworkSwitchStackRoutingStaticRoute_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkSwitchStackRoutingStaticRoute_nodeParamType is not "str"')
                    deleteNetworkSwitchStackRoutingStaticRoute_parameters.staticRouteId = RED.util.getMessageProperty(msg, "staticRouteId");
                }
                                result = client.deleteNetworkSwitchStackRoutingStaticRoute(deleteNetworkSwitchStackRoutingStaticRoute_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStormControl') {
                var getNetworkSwitchStormControl_parameters = [];
                var getNetworkSwitchStormControl_nodeParam;
                var getNetworkSwitchStormControl_nodeParamType;
                
                
                getNetworkSwitchStormControl_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStormControl_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStormControl_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStormControl_nodeParamType is "str"');
                    getNetworkSwitchStormControl_parameters.networkId = getNetworkSwitchStormControl_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStormControl_nodeParamType is not "str"')
                    getNetworkSwitchStormControl_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchStormControl(getNetworkSwitchStormControl_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchStormControl') {
                var updateNetworkSwitchStormControl_parameters = [];
                var updateNetworkSwitchStormControl_nodeParam;
                var updateNetworkSwitchStormControl_nodeParamType;
                
                
                updateNetworkSwitchStormControl_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchStormControl_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStormControl_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStormControl_nodeParamType is "str"');
                    updateNetworkSwitchStormControl_parameters.networkId = updateNetworkSwitchStormControl_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStormControl_nodeParamType is not "str"')
                    updateNetworkSwitchStormControl_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchStormControl_nodeParam = storedParamValsMap['updateNetworkSwitchStormControl'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStormControl");

                updateNetworkSwitchStormControl_nodeParamType = storedParamTypeMap['updateNetworkSwitchStormControl'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStormControl");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchStormControl_parameters.updateNetworkSwitchStormControl = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchStormControl_nodeParam === 'object'){
                        updateNetworkSwitchStormControl_parameters.updateNetworkSwitchStormControl = updateNetworkSwitchStormControl_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchStormControl_nodeParam || '{}'
                        updateNetworkSwitchStormControl_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchStormControl_parameters.updateNetworkSwitchStormControl = updateNetworkSwitchStormControl_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchStormControl_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchStormControl(updateNetworkSwitchStormControl_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSwitchStp') {
                var getNetworkSwitchStp_parameters = [];
                var getNetworkSwitchStp_nodeParam;
                var getNetworkSwitchStp_nodeParamType;
                
                
                getNetworkSwitchStp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSwitchStp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSwitchStp_nodeParamType === 'str') {
                    //console.log('getNetworkSwitchStp_nodeParamType is "str"');
                    getNetworkSwitchStp_parameters.networkId = getNetworkSwitchStp_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSwitchStp_nodeParamType is not "str"')
                    getNetworkSwitchStp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSwitchStp(getNetworkSwitchStp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSwitchStp') {
                var updateNetworkSwitchStp_parameters = [];
                var updateNetworkSwitchStp_nodeParam;
                var updateNetworkSwitchStp_nodeParamType;
                
                
                updateNetworkSwitchStp_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSwitchStp_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSwitchStp_nodeParamType === 'str') {
                    //console.log('updateNetworkSwitchStp_nodeParamType is "str"');
                    updateNetworkSwitchStp_parameters.networkId = updateNetworkSwitchStp_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSwitchStp_nodeParamType is not "str"')
                    updateNetworkSwitchStp_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSwitchStp_nodeParam = storedParamValsMap['updateNetworkSwitchStp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStp");

                updateNetworkSwitchStp_nodeParamType = storedParamTypeMap['updateNetworkSwitchStp'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSwitchStp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSwitchStp_parameters.updateNetworkSwitchStp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSwitchStp_nodeParam === 'object'){
                        updateNetworkSwitchStp_parameters.updateNetworkSwitchStp = updateNetworkSwitchStp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSwitchStp_nodeParam || '{}'
                        updateNetworkSwitchStp_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSwitchStp_parameters.updateNetworkSwitchStp = updateNetworkSwitchStp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSwitchStp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSwitchStp(updateNetworkSwitchStp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkSyslogServers') {
                var getNetworkSyslogServers_parameters = [];
                var getNetworkSyslogServers_nodeParam;
                var getNetworkSyslogServers_nodeParamType;
                
                
                getNetworkSyslogServers_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkSyslogServers_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkSyslogServers_nodeParamType === 'str') {
                    //console.log('getNetworkSyslogServers_nodeParamType is "str"');
                    getNetworkSyslogServers_parameters.networkId = getNetworkSyslogServers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkSyslogServers_nodeParamType is not "str"')
                    getNetworkSyslogServers_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkSyslogServers(getNetworkSyslogServers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkSyslogServers') {
                var updateNetworkSyslogServers_parameters = [];
                var updateNetworkSyslogServers_nodeParam;
                var updateNetworkSyslogServers_nodeParamType;
                
                
                updateNetworkSyslogServers_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkSyslogServers_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkSyslogServers_nodeParamType === 'str') {
                    //console.log('updateNetworkSyslogServers_nodeParamType is "str"');
                    updateNetworkSyslogServers_parameters.networkId = updateNetworkSyslogServers_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkSyslogServers_nodeParamType is not "str"')
                    updateNetworkSyslogServers_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkSyslogServers_nodeParam = storedParamValsMap['updateNetworkSyslogServers'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSyslogServers");

                updateNetworkSyslogServers_nodeParamType = storedParamTypeMap['updateNetworkSyslogServers'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkSyslogServers");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkSyslogServers_parameters.updateNetworkSyslogServers = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkSyslogServers_nodeParam === 'object'){
                        updateNetworkSyslogServers_parameters.updateNetworkSyslogServers = updateNetworkSyslogServers_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkSyslogServers_nodeParam || '{}'
                        updateNetworkSyslogServers_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkSyslogServers_parameters.updateNetworkSyslogServers = updateNetworkSyslogServers_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkSyslogServers_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkSyslogServers(updateNetworkSyslogServers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkTraffic') {
                var getNetworkTraffic_parameters = [];
                var getNetworkTraffic_nodeParam;
                var getNetworkTraffic_nodeParamType;
                
                
                getNetworkTraffic_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkTraffic_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkTraffic_nodeParamType === 'str') {
                    //console.log('getNetworkTraffic_nodeParamType is "str"');
                    getNetworkTraffic_parameters.networkId = getNetworkTraffic_nodeParam || undefined;
                } else {
                    //console.log('getNetworkTraffic_nodeParamType is not "str"')
                    getNetworkTraffic_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkTraffic_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkTraffic_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkTraffic_nodeParamType === 'str') {
                    //console.log('getNetworkTraffic_nodeParamType is "str"');
                    getNetworkTraffic_parameters.t0 = getNetworkTraffic_nodeParam || undefined;
                } else {
                    //console.log('getNetworkTraffic_nodeParamType is not "str"')
                    getNetworkTraffic_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkTraffic_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkTraffic_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkTraffic_nodeParamType === 'str') {
                    //console.log('getNetworkTraffic_nodeParamType is "str"');
                    getNetworkTraffic_parameters.timespan = getNetworkTraffic_nodeParam || undefined;
                } else {
                    //console.log('getNetworkTraffic_nodeParamType is not "str"')
                    getNetworkTraffic_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkTraffic_nodeParam = storedParamValsMap['deviceType'] ||
                    RED.util.getMessageProperty(msg, "deviceType");

                getNetworkTraffic_nodeParamType = storedParamTypeMap['deviceType'] ||
                    RED.util.getMessageProperty(msg, "deviceType");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkTraffic_nodeParamType === 'str') {
                    //console.log('getNetworkTraffic_nodeParamType is "str"');
                    getNetworkTraffic_parameters.deviceType = getNetworkTraffic_nodeParam || undefined;
                } else {
                    //console.log('getNetworkTraffic_nodeParamType is not "str"')
                    getNetworkTraffic_parameters.deviceType = RED.util.getMessageProperty(msg, "deviceType");
                }
                                result = client.getNetworkTraffic(getNetworkTraffic_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkTrafficAnalysis') {
                var getNetworkTrafficAnalysis_parameters = [];
                var getNetworkTrafficAnalysis_nodeParam;
                var getNetworkTrafficAnalysis_nodeParamType;
                
                
                getNetworkTrafficAnalysis_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkTrafficAnalysis_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkTrafficAnalysis_nodeParamType === 'str') {
                    //console.log('getNetworkTrafficAnalysis_nodeParamType is "str"');
                    getNetworkTrafficAnalysis_parameters.networkId = getNetworkTrafficAnalysis_nodeParam || undefined;
                } else {
                    //console.log('getNetworkTrafficAnalysis_nodeParamType is not "str"')
                    getNetworkTrafficAnalysis_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkTrafficAnalysis(getNetworkTrafficAnalysis_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkTrafficAnalysis') {
                var updateNetworkTrafficAnalysis_parameters = [];
                var updateNetworkTrafficAnalysis_nodeParam;
                var updateNetworkTrafficAnalysis_nodeParamType;
                
                
                updateNetworkTrafficAnalysis_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkTrafficAnalysis_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkTrafficAnalysis_nodeParamType === 'str') {
                    //console.log('updateNetworkTrafficAnalysis_nodeParamType is "str"');
                    updateNetworkTrafficAnalysis_parameters.networkId = updateNetworkTrafficAnalysis_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkTrafficAnalysis_nodeParamType is not "str"')
                    updateNetworkTrafficAnalysis_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkTrafficAnalysis_nodeParam = storedParamValsMap['updateNetworkTrafficAnalysis'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkTrafficAnalysis");

                updateNetworkTrafficAnalysis_nodeParamType = storedParamTypeMap['updateNetworkTrafficAnalysis'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkTrafficAnalysis");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkTrafficAnalysis_parameters.updateNetworkTrafficAnalysis = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkTrafficAnalysis_nodeParam === 'object'){
                        updateNetworkTrafficAnalysis_parameters.updateNetworkTrafficAnalysis = updateNetworkTrafficAnalysis_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkTrafficAnalysis_nodeParam || '{}'
                        updateNetworkTrafficAnalysis_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkTrafficAnalysis_parameters.updateNetworkTrafficAnalysis = updateNetworkTrafficAnalysis_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkTrafficAnalysis_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkTrafficAnalysis(updateNetworkTrafficAnalysis_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkTrafficShapingApplicationCategories') {
                var getNetworkTrafficShapingApplicationCategories_parameters = [];
                var getNetworkTrafficShapingApplicationCategories_nodeParam;
                var getNetworkTrafficShapingApplicationCategories_nodeParamType;
                
                
                getNetworkTrafficShapingApplicationCategories_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkTrafficShapingApplicationCategories_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkTrafficShapingApplicationCategories_nodeParamType === 'str') {
                    //console.log('getNetworkTrafficShapingApplicationCategories_nodeParamType is "str"');
                    getNetworkTrafficShapingApplicationCategories_parameters.networkId = getNetworkTrafficShapingApplicationCategories_nodeParam || undefined;
                } else {
                    //console.log('getNetworkTrafficShapingApplicationCategories_nodeParamType is not "str"')
                    getNetworkTrafficShapingApplicationCategories_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkTrafficShapingApplicationCategories(getNetworkTrafficShapingApplicationCategories_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkTrafficShapingDscpTaggingOptions') {
                var getNetworkTrafficShapingDscpTaggingOptions_parameters = [];
                var getNetworkTrafficShapingDscpTaggingOptions_nodeParam;
                var getNetworkTrafficShapingDscpTaggingOptions_nodeParamType;
                
                
                getNetworkTrafficShapingDscpTaggingOptions_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkTrafficShapingDscpTaggingOptions_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkTrafficShapingDscpTaggingOptions_nodeParamType === 'str') {
                    //console.log('getNetworkTrafficShapingDscpTaggingOptions_nodeParamType is "str"');
                    getNetworkTrafficShapingDscpTaggingOptions_parameters.networkId = getNetworkTrafficShapingDscpTaggingOptions_nodeParam || undefined;
                } else {
                    //console.log('getNetworkTrafficShapingDscpTaggingOptions_nodeParamType is not "str"')
                    getNetworkTrafficShapingDscpTaggingOptions_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkTrafficShapingDscpTaggingOptions(getNetworkTrafficShapingDscpTaggingOptions_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'unbindNetwork') {
                var unbindNetwork_parameters = [];
                var unbindNetwork_nodeParam;
                var unbindNetwork_nodeParamType;
                
                
                unbindNetwork_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                unbindNetwork_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (unbindNetwork_nodeParamType === 'str') {
                    //console.log('unbindNetwork_nodeParamType is "str"');
                    unbindNetwork_parameters.networkId = unbindNetwork_nodeParam || undefined;
                } else {
                    //console.log('unbindNetwork_nodeParamType is not "str"')
                    unbindNetwork_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.unbindNetwork(unbindNetwork_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWebhooksHttpServers') {
                var getNetworkWebhooksHttpServers_parameters = [];
                var getNetworkWebhooksHttpServers_nodeParam;
                var getNetworkWebhooksHttpServers_nodeParamType;
                
                
                getNetworkWebhooksHttpServers_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWebhooksHttpServers_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWebhooksHttpServers_nodeParamType === 'str') {
                    //console.log('getNetworkWebhooksHttpServers_nodeParamType is "str"');
                    getNetworkWebhooksHttpServers_parameters.networkId = getNetworkWebhooksHttpServers_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWebhooksHttpServers_nodeParamType is not "str"')
                    getNetworkWebhooksHttpServers_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkWebhooksHttpServers(getNetworkWebhooksHttpServers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkWebhooksHttpServer') {
                var createNetworkWebhooksHttpServer_parameters = [];
                var createNetworkWebhooksHttpServer_nodeParam;
                var createNetworkWebhooksHttpServer_nodeParamType;
                
                
                createNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkWebhooksHttpServer_nodeParamType === 'str') {
                    //console.log('createNetworkWebhooksHttpServer_nodeParamType is "str"');
                    createNetworkWebhooksHttpServer_parameters.networkId = createNetworkWebhooksHttpServer_nodeParam || undefined;
                } else {
                    //console.log('createNetworkWebhooksHttpServer_nodeParamType is not "str"')
                    createNetworkWebhooksHttpServer_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['createNetworkWebhooksHttpServer'] ||
                    RED.util.getMessageProperty(msg, "createNetworkWebhooksHttpServer");

                createNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['createNetworkWebhooksHttpServer'] ||
                    RED.util.getMessageProperty(msg, "createNetworkWebhooksHttpServer");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkWebhooksHttpServer_parameters.createNetworkWebhooksHttpServer = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkWebhooksHttpServer_nodeParam === 'object'){
                        createNetworkWebhooksHttpServer_parameters.createNetworkWebhooksHttpServer = createNetworkWebhooksHttpServer_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkWebhooksHttpServer_nodeParam || '{}'
                        createNetworkWebhooksHttpServer_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkWebhooksHttpServer_parameters.createNetworkWebhooksHttpServer = createNetworkWebhooksHttpServer_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkWebhooksHttpServer_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkWebhooksHttpServer(createNetworkWebhooksHttpServer_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWebhooksHttpServer') {
                var getNetworkWebhooksHttpServer_parameters = [];
                var getNetworkWebhooksHttpServer_nodeParam;
                var getNetworkWebhooksHttpServer_nodeParamType;
                
                
                getNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWebhooksHttpServer_nodeParamType === 'str') {
                    //console.log('getNetworkWebhooksHttpServer_nodeParamType is "str"');
                    getNetworkWebhooksHttpServer_parameters.networkId = getNetworkWebhooksHttpServer_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWebhooksHttpServer_nodeParamType is not "str"')
                    getNetworkWebhooksHttpServer_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['httpServerId'] ||
                    RED.util.getMessageProperty(msg, "httpServerId");

                getNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['httpServerId'] ||
                    RED.util.getMessageProperty(msg, "httpServerId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWebhooksHttpServer_nodeParamType === 'str') {
                    //console.log('getNetworkWebhooksHttpServer_nodeParamType is "str"');
                    getNetworkWebhooksHttpServer_parameters.httpServerId = getNetworkWebhooksHttpServer_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWebhooksHttpServer_nodeParamType is not "str"')
                    getNetworkWebhooksHttpServer_parameters.httpServerId = RED.util.getMessageProperty(msg, "httpServerId");
                }
                                result = client.getNetworkWebhooksHttpServer(getNetworkWebhooksHttpServer_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWebhooksHttpServer') {
                var updateNetworkWebhooksHttpServer_parameters = [];
                var updateNetworkWebhooksHttpServer_nodeParam;
                var updateNetworkWebhooksHttpServer_nodeParamType;
                
                
                updateNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWebhooksHttpServer_nodeParamType === 'str') {
                    //console.log('updateNetworkWebhooksHttpServer_nodeParamType is "str"');
                    updateNetworkWebhooksHttpServer_parameters.networkId = updateNetworkWebhooksHttpServer_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWebhooksHttpServer_nodeParamType is not "str"')
                    updateNetworkWebhooksHttpServer_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['httpServerId'] ||
                    RED.util.getMessageProperty(msg, "httpServerId");

                updateNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['httpServerId'] ||
                    RED.util.getMessageProperty(msg, "httpServerId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWebhooksHttpServer_nodeParamType === 'str') {
                    //console.log('updateNetworkWebhooksHttpServer_nodeParamType is "str"');
                    updateNetworkWebhooksHttpServer_parameters.httpServerId = updateNetworkWebhooksHttpServer_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWebhooksHttpServer_nodeParamType is not "str"')
                    updateNetworkWebhooksHttpServer_parameters.httpServerId = RED.util.getMessageProperty(msg, "httpServerId");
                }
                                
                updateNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['updateNetworkWebhooksHttpServer'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWebhooksHttpServer");

                updateNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['updateNetworkWebhooksHttpServer'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWebhooksHttpServer");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWebhooksHttpServer_parameters.updateNetworkWebhooksHttpServer = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWebhooksHttpServer_nodeParam === 'object'){
                        updateNetworkWebhooksHttpServer_parameters.updateNetworkWebhooksHttpServer = updateNetworkWebhooksHttpServer_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWebhooksHttpServer_nodeParam || '{}'
                        updateNetworkWebhooksHttpServer_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWebhooksHttpServer_parameters.updateNetworkWebhooksHttpServer = updateNetworkWebhooksHttpServer_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWebhooksHttpServer_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWebhooksHttpServer(updateNetworkWebhooksHttpServer_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkWebhooksHttpServer') {
                var deleteNetworkWebhooksHttpServer_parameters = [];
                var deleteNetworkWebhooksHttpServer_nodeParam;
                var deleteNetworkWebhooksHttpServer_nodeParamType;
                
                
                deleteNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkWebhooksHttpServer_nodeParamType === 'str') {
                    //console.log('deleteNetworkWebhooksHttpServer_nodeParamType is "str"');
                    deleteNetworkWebhooksHttpServer_parameters.networkId = deleteNetworkWebhooksHttpServer_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkWebhooksHttpServer_nodeParamType is not "str"')
                    deleteNetworkWebhooksHttpServer_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkWebhooksHttpServer_nodeParam = storedParamValsMap['httpServerId'] ||
                    RED.util.getMessageProperty(msg, "httpServerId");

                deleteNetworkWebhooksHttpServer_nodeParamType = storedParamTypeMap['httpServerId'] ||
                    RED.util.getMessageProperty(msg, "httpServerId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkWebhooksHttpServer_nodeParamType === 'str') {
                    //console.log('deleteNetworkWebhooksHttpServer_nodeParamType is "str"');
                    deleteNetworkWebhooksHttpServer_parameters.httpServerId = deleteNetworkWebhooksHttpServer_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkWebhooksHttpServer_nodeParamType is not "str"')
                    deleteNetworkWebhooksHttpServer_parameters.httpServerId = RED.util.getMessageProperty(msg, "httpServerId");
                }
                                result = client.deleteNetworkWebhooksHttpServer(deleteNetworkWebhooksHttpServer_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkWebhooksWebhookTest') {
                var createNetworkWebhooksWebhookTest_parameters = [];
                var createNetworkWebhooksWebhookTest_nodeParam;
                var createNetworkWebhooksWebhookTest_nodeParamType;
                
                
                createNetworkWebhooksWebhookTest_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkWebhooksWebhookTest_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkWebhooksWebhookTest_nodeParamType === 'str') {
                    //console.log('createNetworkWebhooksWebhookTest_nodeParamType is "str"');
                    createNetworkWebhooksWebhookTest_parameters.networkId = createNetworkWebhooksWebhookTest_nodeParam || undefined;
                } else {
                    //console.log('createNetworkWebhooksWebhookTest_nodeParamType is not "str"')
                    createNetworkWebhooksWebhookTest_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkWebhooksWebhookTest_nodeParam = storedParamValsMap['createNetworkWebhooksWebhookTest'] ||
                    RED.util.getMessageProperty(msg, "createNetworkWebhooksWebhookTest");

                createNetworkWebhooksWebhookTest_nodeParamType = storedParamTypeMap['createNetworkWebhooksWebhookTest'] ||
                    RED.util.getMessageProperty(msg, "createNetworkWebhooksWebhookTest");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkWebhooksWebhookTest_parameters.createNetworkWebhooksWebhookTest = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkWebhooksWebhookTest_nodeParam === 'object'){
                        createNetworkWebhooksWebhookTest_parameters.createNetworkWebhooksWebhookTest = createNetworkWebhooksWebhookTest_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkWebhooksWebhookTest_nodeParam || '{}'
                        createNetworkWebhooksWebhookTest_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkWebhooksWebhookTest_parameters.createNetworkWebhooksWebhookTest = createNetworkWebhooksWebhookTest_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkWebhooksWebhookTest_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkWebhooksWebhookTest(createNetworkWebhooksWebhookTest_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWebhooksWebhookTest') {
                var getNetworkWebhooksWebhookTest_parameters = [];
                var getNetworkWebhooksWebhookTest_nodeParam;
                var getNetworkWebhooksWebhookTest_nodeParamType;
                
                
                getNetworkWebhooksWebhookTest_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWebhooksWebhookTest_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWebhooksWebhookTest_nodeParamType === 'str') {
                    //console.log('getNetworkWebhooksWebhookTest_nodeParamType is "str"');
                    getNetworkWebhooksWebhookTest_parameters.networkId = getNetworkWebhooksWebhookTest_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWebhooksWebhookTest_nodeParamType is not "str"')
                    getNetworkWebhooksWebhookTest_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWebhooksWebhookTest_nodeParam = storedParamValsMap['webhookTestId'] ||
                    RED.util.getMessageProperty(msg, "webhookTestId");

                getNetworkWebhooksWebhookTest_nodeParamType = storedParamTypeMap['webhookTestId'] ||
                    RED.util.getMessageProperty(msg, "webhookTestId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWebhooksWebhookTest_nodeParamType === 'str') {
                    //console.log('getNetworkWebhooksWebhookTest_nodeParamType is "str"');
                    getNetworkWebhooksWebhookTest_parameters.webhookTestId = getNetworkWebhooksWebhookTest_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWebhooksWebhookTest_nodeParamType is not "str"')
                    getNetworkWebhooksWebhookTest_parameters.webhookTestId = RED.util.getMessageProperty(msg, "webhookTestId");
                }
                                result = client.getNetworkWebhooksWebhookTest(getNetworkWebhooksWebhookTest_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessAirMarshal') {
                var getNetworkWirelessAirMarshal_parameters = [];
                var getNetworkWirelessAirMarshal_nodeParam;
                var getNetworkWirelessAirMarshal_nodeParamType;
                
                
                getNetworkWirelessAirMarshal_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessAirMarshal_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessAirMarshal_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessAirMarshal_nodeParamType is "str"');
                    getNetworkWirelessAirMarshal_parameters.networkId = getNetworkWirelessAirMarshal_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessAirMarshal_nodeParamType is not "str"')
                    getNetworkWirelessAirMarshal_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessAirMarshal_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessAirMarshal_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessAirMarshal_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessAirMarshal_nodeParamType is "str"');
                    getNetworkWirelessAirMarshal_parameters.t0 = getNetworkWirelessAirMarshal_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessAirMarshal_nodeParamType is not "str"')
                    getNetworkWirelessAirMarshal_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessAirMarshal_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessAirMarshal_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessAirMarshal_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessAirMarshal_nodeParamType is "str"');
                    getNetworkWirelessAirMarshal_parameters.timespan = getNetworkWirelessAirMarshal_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessAirMarshal_nodeParamType is not "str"')
                    getNetworkWirelessAirMarshal_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getNetworkWirelessAirMarshal(getNetworkWirelessAirMarshal_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessAlternateManagementInterface') {
                var getNetworkWirelessAlternateManagementInterface_parameters = [];
                var getNetworkWirelessAlternateManagementInterface_nodeParam;
                var getNetworkWirelessAlternateManagementInterface_nodeParamType;
                
                
                getNetworkWirelessAlternateManagementInterface_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessAlternateManagementInterface_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessAlternateManagementInterface_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessAlternateManagementInterface_nodeParamType is "str"');
                    getNetworkWirelessAlternateManagementInterface_parameters.networkId = getNetworkWirelessAlternateManagementInterface_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessAlternateManagementInterface_nodeParamType is not "str"')
                    getNetworkWirelessAlternateManagementInterface_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkWirelessAlternateManagementInterface(getNetworkWirelessAlternateManagementInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessAlternateManagementInterface') {
                var updateNetworkWirelessAlternateManagementInterface_parameters = [];
                var updateNetworkWirelessAlternateManagementInterface_nodeParam;
                var updateNetworkWirelessAlternateManagementInterface_nodeParamType;
                
                
                updateNetworkWirelessAlternateManagementInterface_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessAlternateManagementInterface_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessAlternateManagementInterface_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessAlternateManagementInterface_nodeParamType is "str"');
                    updateNetworkWirelessAlternateManagementInterface_parameters.networkId = updateNetworkWirelessAlternateManagementInterface_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessAlternateManagementInterface_nodeParamType is not "str"')
                    updateNetworkWirelessAlternateManagementInterface_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessAlternateManagementInterface_nodeParam = storedParamValsMap['updateNetworkWirelessAlternateManagementInterface'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessAlternateManagementInterface");

                updateNetworkWirelessAlternateManagementInterface_nodeParamType = storedParamTypeMap['updateNetworkWirelessAlternateManagementInterface'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessAlternateManagementInterface");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessAlternateManagementInterface_parameters.updateNetworkWirelessAlternateManagementInterface = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessAlternateManagementInterface_nodeParam === 'object'){
                        updateNetworkWirelessAlternateManagementInterface_parameters.updateNetworkWirelessAlternateManagementInterface = updateNetworkWirelessAlternateManagementInterface_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessAlternateManagementInterface_nodeParam || '{}'
                        updateNetworkWirelessAlternateManagementInterface_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessAlternateManagementInterface_parameters.updateNetworkWirelessAlternateManagementInterface = updateNetworkWirelessAlternateManagementInterface_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessAlternateManagementInterface_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessAlternateManagementInterface(updateNetworkWirelessAlternateManagementInterface_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessBilling') {
                var getNetworkWirelessBilling_parameters = [];
                var getNetworkWirelessBilling_nodeParam;
                var getNetworkWirelessBilling_nodeParamType;
                
                
                getNetworkWirelessBilling_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessBilling_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessBilling_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessBilling_nodeParamType is "str"');
                    getNetworkWirelessBilling_parameters.networkId = getNetworkWirelessBilling_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessBilling_nodeParamType is not "str"')
                    getNetworkWirelessBilling_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkWirelessBilling(getNetworkWirelessBilling_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessBilling') {
                var updateNetworkWirelessBilling_parameters = [];
                var updateNetworkWirelessBilling_nodeParam;
                var updateNetworkWirelessBilling_nodeParamType;
                
                
                updateNetworkWirelessBilling_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessBilling_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessBilling_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessBilling_nodeParamType is "str"');
                    updateNetworkWirelessBilling_parameters.networkId = updateNetworkWirelessBilling_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessBilling_nodeParamType is not "str"')
                    updateNetworkWirelessBilling_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessBilling_nodeParam = storedParamValsMap['updateNetworkWirelessBilling'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessBilling");

                updateNetworkWirelessBilling_nodeParamType = storedParamTypeMap['updateNetworkWirelessBilling'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessBilling");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessBilling_parameters.updateNetworkWirelessBilling = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessBilling_nodeParam === 'object'){
                        updateNetworkWirelessBilling_parameters.updateNetworkWirelessBilling = updateNetworkWirelessBilling_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessBilling_nodeParam || '{}'
                        updateNetworkWirelessBilling_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessBilling_parameters.updateNetworkWirelessBilling = updateNetworkWirelessBilling_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessBilling_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessBilling(updateNetworkWirelessBilling_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessBluetoothSettings') {
                var getNetworkWirelessBluetoothSettings_parameters = [];
                var getNetworkWirelessBluetoothSettings_nodeParam;
                var getNetworkWirelessBluetoothSettings_nodeParamType;
                
                
                getNetworkWirelessBluetoothSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessBluetoothSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessBluetoothSettings_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessBluetoothSettings_nodeParamType is "str"');
                    getNetworkWirelessBluetoothSettings_parameters.networkId = getNetworkWirelessBluetoothSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessBluetoothSettings_nodeParamType is not "str"')
                    getNetworkWirelessBluetoothSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkWirelessBluetoothSettings(getNetworkWirelessBluetoothSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessBluetoothSettings') {
                var updateNetworkWirelessBluetoothSettings_parameters = [];
                var updateNetworkWirelessBluetoothSettings_nodeParam;
                var updateNetworkWirelessBluetoothSettings_nodeParamType;
                
                
                updateNetworkWirelessBluetoothSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessBluetoothSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessBluetoothSettings_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessBluetoothSettings_nodeParamType is "str"');
                    updateNetworkWirelessBluetoothSettings_parameters.networkId = updateNetworkWirelessBluetoothSettings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessBluetoothSettings_nodeParamType is not "str"')
                    updateNetworkWirelessBluetoothSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessBluetoothSettings_nodeParam = storedParamValsMap['updateNetworkWirelessBluetoothSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessBluetoothSettings");

                updateNetworkWirelessBluetoothSettings_nodeParamType = storedParamTypeMap['updateNetworkWirelessBluetoothSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessBluetoothSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessBluetoothSettings_parameters.updateNetworkWirelessBluetoothSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessBluetoothSettings_nodeParam === 'object'){
                        updateNetworkWirelessBluetoothSettings_parameters.updateNetworkWirelessBluetoothSettings = updateNetworkWirelessBluetoothSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessBluetoothSettings_nodeParam || '{}'
                        updateNetworkWirelessBluetoothSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessBluetoothSettings_parameters.updateNetworkWirelessBluetoothSettings = updateNetworkWirelessBluetoothSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessBluetoothSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessBluetoothSettings(updateNetworkWirelessBluetoothSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessChannelUtilizationHistory') {
                var getNetworkWirelessChannelUtilizationHistory_parameters = [];
                var getNetworkWirelessChannelUtilizationHistory_nodeParam;
                var getNetworkWirelessChannelUtilizationHistory_nodeParamType;
                
                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.networkId = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.t0 = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.t1 = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.timespan = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.resolution = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.autoResolution = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.autoResolution = RED.util.getMessageProperty(msg, "autoResolution");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.clientId = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.deviceSerial = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.apTag = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessChannelUtilizationHistory_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessChannelUtilizationHistory_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessChannelUtilizationHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is "str"');
                    getNetworkWirelessChannelUtilizationHistory_parameters.band = getNetworkWirelessChannelUtilizationHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessChannelUtilizationHistory_nodeParamType is not "str"')
                    getNetworkWirelessChannelUtilizationHistory_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                result = client.getNetworkWirelessChannelUtilizationHistory(getNetworkWirelessChannelUtilizationHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessClientCountHistory') {
                var getNetworkWirelessClientCountHistory_parameters = [];
                var getNetworkWirelessClientCountHistory_nodeParam;
                var getNetworkWirelessClientCountHistory_nodeParamType;
                
                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.networkId = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.t0 = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.t1 = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.timespan = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.resolution = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.autoResolution = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.autoResolution = RED.util.getMessageProperty(msg, "autoResolution");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.clientId = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.deviceSerial = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.apTag = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.band = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessClientCountHistory_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessClientCountHistory_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientCountHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is "str"');
                    getNetworkWirelessClientCountHistory_parameters.ssid = getNetworkWirelessClientCountHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientCountHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientCountHistory_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                result = client.getNetworkWirelessClientCountHistory(getNetworkWirelessClientCountHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessClientsConnectionStats') {
                var getNetworkWirelessClientsConnectionStats_parameters = [];
                var getNetworkWirelessClientsConnectionStats_nodeParam;
                var getNetworkWirelessClientsConnectionStats_nodeParamType;
                
                
                getNetworkWirelessClientsConnectionStats_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessClientsConnectionStats_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientsConnectionStats_parameters.networkId = getNetworkWirelessClientsConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsConnectionStats_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessClientsConnectionStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessClientsConnectionStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientsConnectionStats_parameters.t0 = getNetworkWirelessClientsConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsConnectionStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessClientsConnectionStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessClientsConnectionStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientsConnectionStats_parameters.t1 = getNetworkWirelessClientsConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsConnectionStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessClientsConnectionStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessClientsConnectionStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientsConnectionStats_parameters.timespan = getNetworkWirelessClientsConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsConnectionStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessClientsConnectionStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessClientsConnectionStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientsConnectionStats_parameters.band = getNetworkWirelessClientsConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsConnectionStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessClientsConnectionStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessClientsConnectionStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientsConnectionStats_parameters.ssid = getNetworkWirelessClientsConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsConnectionStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessClientsConnectionStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessClientsConnectionStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientsConnectionStats_parameters.vlan = getNetworkWirelessClientsConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsConnectionStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessClientsConnectionStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessClientsConnectionStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientsConnectionStats_parameters.apTag = getNetworkWirelessClientsConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsConnectionStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                result = client.getNetworkWirelessClientsConnectionStats(getNetworkWirelessClientsConnectionStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessClientsLatencyStats') {
                var getNetworkWirelessClientsLatencyStats_parameters = [];
                var getNetworkWirelessClientsLatencyStats_nodeParam;
                var getNetworkWirelessClientsLatencyStats_nodeParamType;
                
                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.networkId = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.t0 = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.t1 = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.timespan = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.band = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.ssid = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.vlan = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.apTag = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessClientsLatencyStats_nodeParam = storedParamValsMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                getNetworkWirelessClientsLatencyStats_nodeParamType = storedParamTypeMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientsLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientsLatencyStats_parameters.fields = getNetworkWirelessClientsLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientsLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientsLatencyStats_parameters.fields = RED.util.getMessageProperty(msg, "fields");
                }
                                result = client.getNetworkWirelessClientsLatencyStats(getNetworkWirelessClientsLatencyStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessClientConnectionStats') {
                var getNetworkWirelessClientConnectionStats_parameters = [];
                var getNetworkWirelessClientConnectionStats_nodeParam;
                var getNetworkWirelessClientConnectionStats_nodeParamType;
                
                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.networkId = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.clientId = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.t0 = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.t1 = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.timespan = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.band = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.ssid = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.vlan = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessClientConnectionStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessClientConnectionStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessClientConnectionStats_parameters.apTag = getNetworkWirelessClientConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectionStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                result = client.getNetworkWirelessClientConnectionStats(getNetworkWirelessClientConnectionStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessClientConnectivityEvents') {
                var getNetworkWirelessClientConnectivityEvents_parameters = [];
                var getNetworkWirelessClientConnectivityEvents_nodeParam;
                var getNetworkWirelessClientConnectivityEvents_nodeParamType;
                
                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.networkId = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.clientId = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.perPage = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.startingAfter = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.endingBefore = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.t0 = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.t1 = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.timespan = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['types'] ||
                    RED.util.getMessageProperty(msg, "types");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['types'] ||
                    RED.util.getMessageProperty(msg, "types");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.types = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.types = RED.util.getMessageProperty(msg, "types");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['includedSeverities'] ||
                    RED.util.getMessageProperty(msg, "includedSeverities");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['includedSeverities'] ||
                    RED.util.getMessageProperty(msg, "includedSeverities");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.includedSeverities = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.includedSeverities = RED.util.getMessageProperty(msg, "includedSeverities");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.band = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['ssidNumber'] ||
                    RED.util.getMessageProperty(msg, "ssidNumber");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['ssidNumber'] ||
                    RED.util.getMessageProperty(msg, "ssidNumber");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.ssidNumber = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.ssidNumber = RED.util.getMessageProperty(msg, "ssidNumber");
                }
                                
                getNetworkWirelessClientConnectivityEvents_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getNetworkWirelessClientConnectivityEvents_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientConnectivityEvents_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is "str"');
                    getNetworkWirelessClientConnectivityEvents_parameters.deviceSerial = getNetworkWirelessClientConnectivityEvents_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientConnectivityEvents_nodeParamType is not "str"')
                    getNetworkWirelessClientConnectivityEvents_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                result = client.getNetworkWirelessClientConnectivityEvents(getNetworkWirelessClientConnectivityEvents_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessClientLatencyHistory') {
                var getNetworkWirelessClientLatencyHistory_parameters = [];
                var getNetworkWirelessClientLatencyHistory_nodeParam;
                var getNetworkWirelessClientLatencyHistory_nodeParamType;
                
                
                getNetworkWirelessClientLatencyHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessClientLatencyHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyHistory_parameters.networkId = getNetworkWirelessClientLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessClientLatencyHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessClientLatencyHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyHistory_parameters.clientId = getNetworkWirelessClientLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessClientLatencyHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessClientLatencyHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyHistory_parameters.t0 = getNetworkWirelessClientLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessClientLatencyHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessClientLatencyHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyHistory_parameters.t1 = getNetworkWirelessClientLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessClientLatencyHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessClientLatencyHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyHistory_parameters.timespan = getNetworkWirelessClientLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessClientLatencyHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getNetworkWirelessClientLatencyHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyHistory_parameters.resolution = getNetworkWirelessClientLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                result = client.getNetworkWirelessClientLatencyHistory(getNetworkWirelessClientLatencyHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessClientLatencyStats') {
                var getNetworkWirelessClientLatencyStats_parameters = [];
                var getNetworkWirelessClientLatencyStats_nodeParam;
                var getNetworkWirelessClientLatencyStats_nodeParamType;
                
                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.networkId = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.clientId = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.t0 = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.t1 = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.timespan = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.band = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.ssid = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.vlan = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.apTag = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessClientLatencyStats_nodeParam = storedParamValsMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                getNetworkWirelessClientLatencyStats_nodeParamType = storedParamTypeMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessClientLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessClientLatencyStats_parameters.fields = getNetworkWirelessClientLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessClientLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessClientLatencyStats_parameters.fields = RED.util.getMessageProperty(msg, "fields");
                }
                                result = client.getNetworkWirelessClientLatencyStats(getNetworkWirelessClientLatencyStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessConnectionStats') {
                var getNetworkWirelessConnectionStats_parameters = [];
                var getNetworkWirelessConnectionStats_nodeParam;
                var getNetworkWirelessConnectionStats_nodeParamType;
                
                
                getNetworkWirelessConnectionStats_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessConnectionStats_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessConnectionStats_parameters.networkId = getNetworkWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessConnectionStats_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessConnectionStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessConnectionStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessConnectionStats_parameters.t0 = getNetworkWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessConnectionStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessConnectionStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessConnectionStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessConnectionStats_parameters.t1 = getNetworkWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessConnectionStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessConnectionStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessConnectionStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessConnectionStats_parameters.timespan = getNetworkWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessConnectionStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessConnectionStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessConnectionStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessConnectionStats_parameters.band = getNetworkWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessConnectionStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessConnectionStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessConnectionStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessConnectionStats_parameters.ssid = getNetworkWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessConnectionStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessConnectionStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessConnectionStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessConnectionStats_parameters.vlan = getNetworkWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessConnectionStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessConnectionStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessConnectionStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessConnectionStats_parameters.apTag = getNetworkWirelessConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessConnectionStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                result = client.getNetworkWirelessConnectionStats(getNetworkWirelessConnectionStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessDataRateHistory') {
                var getNetworkWirelessDataRateHistory_parameters = [];
                var getNetworkWirelessDataRateHistory_nodeParam;
                var getNetworkWirelessDataRateHistory_nodeParamType;
                
                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.networkId = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.t0 = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.t1 = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.timespan = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.resolution = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.autoResolution = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.autoResolution = RED.util.getMessageProperty(msg, "autoResolution");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.clientId = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.deviceSerial = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.apTag = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.band = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessDataRateHistory_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessDataRateHistory_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDataRateHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is "str"');
                    getNetworkWirelessDataRateHistory_parameters.ssid = getNetworkWirelessDataRateHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDataRateHistory_nodeParamType is not "str"')
                    getNetworkWirelessDataRateHistory_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                result = client.getNetworkWirelessDataRateHistory(getNetworkWirelessDataRateHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessDevicesConnectionStats') {
                var getNetworkWirelessDevicesConnectionStats_parameters = [];
                var getNetworkWirelessDevicesConnectionStats_nodeParam;
                var getNetworkWirelessDevicesConnectionStats_nodeParamType;
                
                
                getNetworkWirelessDevicesConnectionStats_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessDevicesConnectionStats_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesConnectionStats_parameters.networkId = getNetworkWirelessDevicesConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesConnectionStats_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessDevicesConnectionStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessDevicesConnectionStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesConnectionStats_parameters.t0 = getNetworkWirelessDevicesConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesConnectionStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessDevicesConnectionStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessDevicesConnectionStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesConnectionStats_parameters.t1 = getNetworkWirelessDevicesConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesConnectionStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessDevicesConnectionStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessDevicesConnectionStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesConnectionStats_parameters.timespan = getNetworkWirelessDevicesConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesConnectionStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessDevicesConnectionStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessDevicesConnectionStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesConnectionStats_parameters.band = getNetworkWirelessDevicesConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesConnectionStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessDevicesConnectionStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessDevicesConnectionStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesConnectionStats_parameters.ssid = getNetworkWirelessDevicesConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesConnectionStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessDevicesConnectionStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessDevicesConnectionStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesConnectionStats_parameters.vlan = getNetworkWirelessDevicesConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesConnectionStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessDevicesConnectionStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessDevicesConnectionStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesConnectionStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesConnectionStats_parameters.apTag = getNetworkWirelessDevicesConnectionStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesConnectionStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesConnectionStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                result = client.getNetworkWirelessDevicesConnectionStats(getNetworkWirelessDevicesConnectionStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessDevicesLatencyStats') {
                var getNetworkWirelessDevicesLatencyStats_parameters = [];
                var getNetworkWirelessDevicesLatencyStats_nodeParam;
                var getNetworkWirelessDevicesLatencyStats_nodeParamType;
                
                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.networkId = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.t0 = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.t1 = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.timespan = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.band = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.ssid = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.vlan = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.apTag = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessDevicesLatencyStats_nodeParam = storedParamValsMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                getNetworkWirelessDevicesLatencyStats_nodeParamType = storedParamTypeMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessDevicesLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessDevicesLatencyStats_parameters.fields = getNetworkWirelessDevicesLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessDevicesLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessDevicesLatencyStats_parameters.fields = RED.util.getMessageProperty(msg, "fields");
                }
                                result = client.getNetworkWirelessDevicesLatencyStats(getNetworkWirelessDevicesLatencyStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessFailedConnections') {
                var getNetworkWirelessFailedConnections_parameters = [];
                var getNetworkWirelessFailedConnections_nodeParam;
                var getNetworkWirelessFailedConnections_nodeParamType;
                
                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.networkId = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.t0 = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.t1 = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.timespan = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.band = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.ssid = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.vlan = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.apTag = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.serial = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                
                getNetworkWirelessFailedConnections_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessFailedConnections_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessFailedConnections_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is "str"');
                    getNetworkWirelessFailedConnections_parameters.clientId = getNetworkWirelessFailedConnections_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessFailedConnections_nodeParamType is not "str"')
                    getNetworkWirelessFailedConnections_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                result = client.getNetworkWirelessFailedConnections(getNetworkWirelessFailedConnections_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessLatencyHistory') {
                var getNetworkWirelessLatencyHistory_parameters = [];
                var getNetworkWirelessLatencyHistory_nodeParam;
                var getNetworkWirelessLatencyHistory_nodeParamType;
                
                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.networkId = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.t0 = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.t1 = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.timespan = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.resolution = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.autoResolution = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.autoResolution = RED.util.getMessageProperty(msg, "autoResolution");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.clientId = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.deviceSerial = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.apTag = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.band = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.ssid = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessLatencyHistory_nodeParam = storedParamValsMap['accessCategory'] ||
                    RED.util.getMessageProperty(msg, "accessCategory");

                getNetworkWirelessLatencyHistory_nodeParamType = storedParamTypeMap['accessCategory'] ||
                    RED.util.getMessageProperty(msg, "accessCategory");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is "str"');
                    getNetworkWirelessLatencyHistory_parameters.accessCategory = getNetworkWirelessLatencyHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyHistory_nodeParamType is not "str"')
                    getNetworkWirelessLatencyHistory_parameters.accessCategory = RED.util.getMessageProperty(msg, "accessCategory");
                }
                                result = client.getNetworkWirelessLatencyHistory(getNetworkWirelessLatencyHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessLatencyStats') {
                var getNetworkWirelessLatencyStats_parameters = [];
                var getNetworkWirelessLatencyStats_nodeParam;
                var getNetworkWirelessLatencyStats_nodeParamType;
                
                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.networkId = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.t0 = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.t1 = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.timespan = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.band = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.ssid = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['vlan'] ||
                    RED.util.getMessageProperty(msg, "vlan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.vlan = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.vlan = RED.util.getMessageProperty(msg, "vlan");
                }
                                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.apTag = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessLatencyStats_nodeParam = storedParamValsMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                getNetworkWirelessLatencyStats_nodeParamType = storedParamTypeMap['fields'] ||
                    RED.util.getMessageProperty(msg, "fields");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessLatencyStats_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is "str"');
                    getNetworkWirelessLatencyStats_parameters.fields = getNetworkWirelessLatencyStats_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessLatencyStats_nodeParamType is not "str"')
                    getNetworkWirelessLatencyStats_parameters.fields = RED.util.getMessageProperty(msg, "fields");
                }
                                result = client.getNetworkWirelessLatencyStats(getNetworkWirelessLatencyStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessMeshStatuses') {
                var getNetworkWirelessMeshStatuses_parameters = [];
                var getNetworkWirelessMeshStatuses_nodeParam;
                var getNetworkWirelessMeshStatuses_nodeParamType;
                
                
                getNetworkWirelessMeshStatuses_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessMeshStatuses_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessMeshStatuses_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessMeshStatuses_nodeParamType is "str"');
                    getNetworkWirelessMeshStatuses_parameters.networkId = getNetworkWirelessMeshStatuses_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessMeshStatuses_nodeParamType is not "str"')
                    getNetworkWirelessMeshStatuses_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessMeshStatuses_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getNetworkWirelessMeshStatuses_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessMeshStatuses_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessMeshStatuses_nodeParamType is "str"');
                    getNetworkWirelessMeshStatuses_parameters.perPage = getNetworkWirelessMeshStatuses_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessMeshStatuses_nodeParamType is not "str"')
                    getNetworkWirelessMeshStatuses_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getNetworkWirelessMeshStatuses_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getNetworkWirelessMeshStatuses_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessMeshStatuses_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessMeshStatuses_nodeParamType is "str"');
                    getNetworkWirelessMeshStatuses_parameters.startingAfter = getNetworkWirelessMeshStatuses_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessMeshStatuses_nodeParamType is not "str"')
                    getNetworkWirelessMeshStatuses_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getNetworkWirelessMeshStatuses_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getNetworkWirelessMeshStatuses_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessMeshStatuses_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessMeshStatuses_nodeParamType is "str"');
                    getNetworkWirelessMeshStatuses_parameters.endingBefore = getNetworkWirelessMeshStatuses_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessMeshStatuses_nodeParamType is not "str"')
                    getNetworkWirelessMeshStatuses_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getNetworkWirelessMeshStatuses(getNetworkWirelessMeshStatuses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessRfProfiles') {
                var getNetworkWirelessRfProfiles_parameters = [];
                var getNetworkWirelessRfProfiles_nodeParam;
                var getNetworkWirelessRfProfiles_nodeParamType;
                
                
                getNetworkWirelessRfProfiles_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessRfProfiles_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessRfProfiles_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessRfProfiles_nodeParamType is "str"');
                    getNetworkWirelessRfProfiles_parameters.networkId = getNetworkWirelessRfProfiles_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessRfProfiles_nodeParamType is not "str"')
                    getNetworkWirelessRfProfiles_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessRfProfiles_nodeParam = storedParamValsMap['includeTemplateProfiles'] ||
                    RED.util.getMessageProperty(msg, "includeTemplateProfiles");

                getNetworkWirelessRfProfiles_nodeParamType = storedParamTypeMap['includeTemplateProfiles'] ||
                    RED.util.getMessageProperty(msg, "includeTemplateProfiles");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessRfProfiles_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessRfProfiles_nodeParamType is "str"');
                    getNetworkWirelessRfProfiles_parameters.includeTemplateProfiles = getNetworkWirelessRfProfiles_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessRfProfiles_nodeParamType is not "str"')
                    getNetworkWirelessRfProfiles_parameters.includeTemplateProfiles = RED.util.getMessageProperty(msg, "includeTemplateProfiles");
                }
                                result = client.getNetworkWirelessRfProfiles(getNetworkWirelessRfProfiles_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkWirelessRfProfile') {
                var createNetworkWirelessRfProfile_parameters = [];
                var createNetworkWirelessRfProfile_nodeParam;
                var createNetworkWirelessRfProfile_nodeParamType;
                
                
                createNetworkWirelessRfProfile_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkWirelessRfProfile_nodeParamType === 'str') {
                    //console.log('createNetworkWirelessRfProfile_nodeParamType is "str"');
                    createNetworkWirelessRfProfile_parameters.networkId = createNetworkWirelessRfProfile_nodeParam || undefined;
                } else {
                    //console.log('createNetworkWirelessRfProfile_nodeParamType is not "str"')
                    createNetworkWirelessRfProfile_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkWirelessRfProfile_nodeParam = storedParamValsMap['createNetworkWirelessRfProfile'] ||
                    RED.util.getMessageProperty(msg, "createNetworkWirelessRfProfile");

                createNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['createNetworkWirelessRfProfile'] ||
                    RED.util.getMessageProperty(msg, "createNetworkWirelessRfProfile");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkWirelessRfProfile_parameters.createNetworkWirelessRfProfile = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkWirelessRfProfile_nodeParam === 'object'){
                        createNetworkWirelessRfProfile_parameters.createNetworkWirelessRfProfile = createNetworkWirelessRfProfile_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkWirelessRfProfile_nodeParam || '{}'
                        createNetworkWirelessRfProfile_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkWirelessRfProfile_parameters.createNetworkWirelessRfProfile = createNetworkWirelessRfProfile_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkWirelessRfProfile_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkWirelessRfProfile(createNetworkWirelessRfProfile_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessRfProfile') {
                var updateNetworkWirelessRfProfile_parameters = [];
                var updateNetworkWirelessRfProfile_nodeParam;
                var updateNetworkWirelessRfProfile_nodeParamType;
                
                
                updateNetworkWirelessRfProfile_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessRfProfile_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessRfProfile_nodeParamType is "str"');
                    updateNetworkWirelessRfProfile_parameters.networkId = updateNetworkWirelessRfProfile_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessRfProfile_nodeParamType is not "str"')
                    updateNetworkWirelessRfProfile_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessRfProfile_nodeParam = storedParamValsMap['rfProfileId'] ||
                    RED.util.getMessageProperty(msg, "rfProfileId");

                updateNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['rfProfileId'] ||
                    RED.util.getMessageProperty(msg, "rfProfileId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessRfProfile_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessRfProfile_nodeParamType is "str"');
                    updateNetworkWirelessRfProfile_parameters.rfProfileId = updateNetworkWirelessRfProfile_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessRfProfile_nodeParamType is not "str"')
                    updateNetworkWirelessRfProfile_parameters.rfProfileId = RED.util.getMessageProperty(msg, "rfProfileId");
                }
                                
                updateNetworkWirelessRfProfile_nodeParam = storedParamValsMap['updateNetworkWirelessRfProfile'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessRfProfile");

                updateNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['updateNetworkWirelessRfProfile'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessRfProfile");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessRfProfile_parameters.updateNetworkWirelessRfProfile = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessRfProfile_nodeParam === 'object'){
                        updateNetworkWirelessRfProfile_parameters.updateNetworkWirelessRfProfile = updateNetworkWirelessRfProfile_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessRfProfile_nodeParam || '{}'
                        updateNetworkWirelessRfProfile_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessRfProfile_parameters.updateNetworkWirelessRfProfile = updateNetworkWirelessRfProfile_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessRfProfile_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessRfProfile(updateNetworkWirelessRfProfile_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkWirelessRfProfile') {
                var deleteNetworkWirelessRfProfile_parameters = [];
                var deleteNetworkWirelessRfProfile_nodeParam;
                var deleteNetworkWirelessRfProfile_nodeParamType;
                
                
                deleteNetworkWirelessRfProfile_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkWirelessRfProfile_nodeParamType === 'str') {
                    //console.log('deleteNetworkWirelessRfProfile_nodeParamType is "str"');
                    deleteNetworkWirelessRfProfile_parameters.networkId = deleteNetworkWirelessRfProfile_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkWirelessRfProfile_nodeParamType is not "str"')
                    deleteNetworkWirelessRfProfile_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkWirelessRfProfile_nodeParam = storedParamValsMap['rfProfileId'] ||
                    RED.util.getMessageProperty(msg, "rfProfileId");

                deleteNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['rfProfileId'] ||
                    RED.util.getMessageProperty(msg, "rfProfileId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkWirelessRfProfile_nodeParamType === 'str') {
                    //console.log('deleteNetworkWirelessRfProfile_nodeParamType is "str"');
                    deleteNetworkWirelessRfProfile_parameters.rfProfileId = deleteNetworkWirelessRfProfile_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkWirelessRfProfile_nodeParamType is not "str"')
                    deleteNetworkWirelessRfProfile_parameters.rfProfileId = RED.util.getMessageProperty(msg, "rfProfileId");
                }
                                result = client.deleteNetworkWirelessRfProfile(deleteNetworkWirelessRfProfile_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessRfProfile') {
                var getNetworkWirelessRfProfile_parameters = [];
                var getNetworkWirelessRfProfile_nodeParam;
                var getNetworkWirelessRfProfile_nodeParamType;
                
                
                getNetworkWirelessRfProfile_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessRfProfile_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessRfProfile_nodeParamType is "str"');
                    getNetworkWirelessRfProfile_parameters.networkId = getNetworkWirelessRfProfile_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessRfProfile_nodeParamType is not "str"')
                    getNetworkWirelessRfProfile_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessRfProfile_nodeParam = storedParamValsMap['rfProfileId'] ||
                    RED.util.getMessageProperty(msg, "rfProfileId");

                getNetworkWirelessRfProfile_nodeParamType = storedParamTypeMap['rfProfileId'] ||
                    RED.util.getMessageProperty(msg, "rfProfileId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessRfProfile_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessRfProfile_nodeParamType is "str"');
                    getNetworkWirelessRfProfile_parameters.rfProfileId = getNetworkWirelessRfProfile_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessRfProfile_nodeParamType is not "str"')
                    getNetworkWirelessRfProfile_parameters.rfProfileId = RED.util.getMessageProperty(msg, "rfProfileId");
                }
                                result = client.getNetworkWirelessRfProfile(getNetworkWirelessRfProfile_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSettings') {
                var getNetworkWirelessSettings_parameters = [];
                var getNetworkWirelessSettings_nodeParam;
                var getNetworkWirelessSettings_nodeParamType;
                
                
                getNetworkWirelessSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSettings_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSettings_nodeParamType is "str"');
                    getNetworkWirelessSettings_parameters.networkId = getNetworkWirelessSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSettings_nodeParamType is not "str"')
                    getNetworkWirelessSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkWirelessSettings(getNetworkWirelessSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessSettings') {
                var updateNetworkWirelessSettings_parameters = [];
                var updateNetworkWirelessSettings_nodeParam;
                var updateNetworkWirelessSettings_nodeParamType;
                
                
                updateNetworkWirelessSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSettings_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSettings_nodeParamType is "str"');
                    updateNetworkWirelessSettings_parameters.networkId = updateNetworkWirelessSettings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSettings_nodeParamType is not "str"')
                    updateNetworkWirelessSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessSettings_nodeParam = storedParamValsMap['updateNetworkWirelessSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSettings");

                updateNetworkWirelessSettings_nodeParamType = storedParamTypeMap['updateNetworkWirelessSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessSettings_parameters.updateNetworkWirelessSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessSettings_nodeParam === 'object'){
                        updateNetworkWirelessSettings_parameters.updateNetworkWirelessSettings = updateNetworkWirelessSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessSettings_nodeParam || '{}'
                        updateNetworkWirelessSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessSettings_parameters.updateNetworkWirelessSettings = updateNetworkWirelessSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessSettings(updateNetworkWirelessSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSignalQualityHistory') {
                var getNetworkWirelessSignalQualityHistory_parameters = [];
                var getNetworkWirelessSignalQualityHistory_nodeParam;
                var getNetworkWirelessSignalQualityHistory_nodeParamType;
                
                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.networkId = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.t0 = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.t1 = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.timespan = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.resolution = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.autoResolution = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.autoResolution = RED.util.getMessageProperty(msg, "autoResolution");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.clientId = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.deviceSerial = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.apTag = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.band = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessSignalQualityHistory_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessSignalQualityHistory_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSignalQualityHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is "str"');
                    getNetworkWirelessSignalQualityHistory_parameters.ssid = getNetworkWirelessSignalQualityHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSignalQualityHistory_nodeParamType is not "str"')
                    getNetworkWirelessSignalQualityHistory_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                result = client.getNetworkWirelessSignalQualityHistory(getNetworkWirelessSignalQualityHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsids') {
                var getNetworkWirelessSsids_parameters = [];
                var getNetworkWirelessSsids_nodeParam;
                var getNetworkWirelessSsids_nodeParamType;
                
                
                getNetworkWirelessSsids_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsids_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsids_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsids_nodeParamType is "str"');
                    getNetworkWirelessSsids_parameters.networkId = getNetworkWirelessSsids_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsids_nodeParamType is not "str"')
                    getNetworkWirelessSsids_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                result = client.getNetworkWirelessSsids(getNetworkWirelessSsids_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsid') {
                var getNetworkWirelessSsid_parameters = [];
                var getNetworkWirelessSsid_nodeParam;
                var getNetworkWirelessSsid_nodeParamType;
                
                
                getNetworkWirelessSsid_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsid_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsid_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsid_nodeParamType is "str"');
                    getNetworkWirelessSsid_parameters.networkId = getNetworkWirelessSsid_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsid_nodeParamType is not "str"')
                    getNetworkWirelessSsid_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSsid_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                getNetworkWirelessSsid_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsid_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsid_nodeParamType is "str"');
                    getNetworkWirelessSsid_parameters.number = getNetworkWirelessSsid_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsid_nodeParamType is not "str"')
                    getNetworkWirelessSsid_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                result = client.getNetworkWirelessSsid(getNetworkWirelessSsid_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessSsid') {
                var updateNetworkWirelessSsid_parameters = [];
                var updateNetworkWirelessSsid_nodeParam;
                var updateNetworkWirelessSsid_nodeParamType;
                
                
                updateNetworkWirelessSsid_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessSsid_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsid_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsid_nodeParamType is "str"');
                    updateNetworkWirelessSsid_parameters.networkId = updateNetworkWirelessSsid_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsid_nodeParamType is not "str"')
                    updateNetworkWirelessSsid_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessSsid_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                updateNetworkWirelessSsid_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsid_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsid_nodeParamType is "str"');
                    updateNetworkWirelessSsid_parameters.number = updateNetworkWirelessSsid_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsid_nodeParamType is not "str"')
                    updateNetworkWirelessSsid_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                updateNetworkWirelessSsid_nodeParam = storedParamValsMap['updateNetworkWirelessSsid'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsid");

                updateNetworkWirelessSsid_nodeParamType = storedParamTypeMap['updateNetworkWirelessSsid'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsid");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessSsid_parameters.updateNetworkWirelessSsid = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessSsid_nodeParam === 'object'){
                        updateNetworkWirelessSsid_parameters.updateNetworkWirelessSsid = updateNetworkWirelessSsid_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessSsid_nodeParam || '{}'
                        updateNetworkWirelessSsid_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessSsid_parameters.updateNetworkWirelessSsid = updateNetworkWirelessSsid_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessSsid_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessSsid(updateNetworkWirelessSsid_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsidDeviceTypeGroupPolicies') {
                var getNetworkWirelessSsidDeviceTypeGroupPolicies_parameters = [];
                var getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam;
                var getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType;
                
                
                getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType is "str"');
                    getNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.networkId = getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType is not "str"')
                    getNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType is "str"');
                    getNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.number = getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType is not "str"')
                    getNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                result = client.getNetworkWirelessSsidDeviceTypeGroupPolicies(getNetworkWirelessSsidDeviceTypeGroupPolicies_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessSsidDeviceTypeGroupPolicies') {
                var updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters = [];
                var updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam;
                var updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType;
                
                
                updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType is "str"');
                    updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.networkId = updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType is not "str"')
                    updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType is "str"');
                    updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.number = updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType is not "str"')
                    updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam = storedParamValsMap['updateNetworkWirelessSsidDeviceTypeGroupPolicies'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidDeviceTypeGroupPolicies");

                updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParamType = storedParamTypeMap['updateNetworkWirelessSsidDeviceTypeGroupPolicies'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidDeviceTypeGroupPolicies");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.updateNetworkWirelessSsidDeviceTypeGroupPolicies = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam === 'object'){
                        updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.updateNetworkWirelessSsidDeviceTypeGroupPolicies = updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam || '{}'
                        updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters.updateNetworkWirelessSsidDeviceTypeGroupPolicies = updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessSsidDeviceTypeGroupPolicies_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessSsidDeviceTypeGroupPolicies(updateNetworkWirelessSsidDeviceTypeGroupPolicies_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsidFirewallL3FirewallRules') {
                var getNetworkWirelessSsidFirewallL3FirewallRules_parameters = [];
                var getNetworkWirelessSsidFirewallL3FirewallRules_nodeParam;
                var getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType;
                
                
                getNetworkWirelessSsidFirewallL3FirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType is "str"');
                    getNetworkWirelessSsidFirewallL3FirewallRules_parameters.networkId = getNetworkWirelessSsidFirewallL3FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType is not "str"')
                    getNetworkWirelessSsidFirewallL3FirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSsidFirewallL3FirewallRules_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType is "str"');
                    getNetworkWirelessSsidFirewallL3FirewallRules_parameters.number = getNetworkWirelessSsidFirewallL3FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType is not "str"')
                    getNetworkWirelessSsidFirewallL3FirewallRules_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                result = client.getNetworkWirelessSsidFirewallL3FirewallRules(getNetworkWirelessSsidFirewallL3FirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessSsidFirewallL3FirewallRules') {
                var updateNetworkWirelessSsidFirewallL3FirewallRules_parameters = [];
                var updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam;
                var updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType;
                
                
                updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType is "str"');
                    updateNetworkWirelessSsidFirewallL3FirewallRules_parameters.networkId = updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType is not "str"')
                    updateNetworkWirelessSsidFirewallL3FirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType is "str"');
                    updateNetworkWirelessSsidFirewallL3FirewallRules_parameters.number = updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType is not "str"')
                    updateNetworkWirelessSsidFirewallL3FirewallRules_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam = storedParamValsMap['updateNetworkWirelessSsidFirewallL3FirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidFirewallL3FirewallRules");

                updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParamType = storedParamTypeMap['updateNetworkWirelessSsidFirewallL3FirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidFirewallL3FirewallRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessSsidFirewallL3FirewallRules_parameters.updateNetworkWirelessSsidFirewallL3FirewallRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam === 'object'){
                        updateNetworkWirelessSsidFirewallL3FirewallRules_parameters.updateNetworkWirelessSsidFirewallL3FirewallRules = updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam || '{}'
                        updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessSsidFirewallL3FirewallRules_parameters.updateNetworkWirelessSsidFirewallL3FirewallRules = updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessSsidFirewallL3FirewallRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessSsidFirewallL3FirewallRules(updateNetworkWirelessSsidFirewallL3FirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsidFirewallL7FirewallRules') {
                var getNetworkWirelessSsidFirewallL7FirewallRules_parameters = [];
                var getNetworkWirelessSsidFirewallL7FirewallRules_nodeParam;
                var getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType;
                
                
                getNetworkWirelessSsidFirewallL7FirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType is "str"');
                    getNetworkWirelessSsidFirewallL7FirewallRules_parameters.networkId = getNetworkWirelessSsidFirewallL7FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType is not "str"')
                    getNetworkWirelessSsidFirewallL7FirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSsidFirewallL7FirewallRules_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType is "str"');
                    getNetworkWirelessSsidFirewallL7FirewallRules_parameters.number = getNetworkWirelessSsidFirewallL7FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType is not "str"')
                    getNetworkWirelessSsidFirewallL7FirewallRules_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                result = client.getNetworkWirelessSsidFirewallL7FirewallRules(getNetworkWirelessSsidFirewallL7FirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessSsidFirewallL7FirewallRules') {
                var updateNetworkWirelessSsidFirewallL7FirewallRules_parameters = [];
                var updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam;
                var updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType;
                
                
                updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType is "str"');
                    updateNetworkWirelessSsidFirewallL7FirewallRules_parameters.networkId = updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType is not "str"')
                    updateNetworkWirelessSsidFirewallL7FirewallRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType is "str"');
                    updateNetworkWirelessSsidFirewallL7FirewallRules_parameters.number = updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType is not "str"')
                    updateNetworkWirelessSsidFirewallL7FirewallRules_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam = storedParamValsMap['updateNetworkWirelessSsidFirewallL7FirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidFirewallL7FirewallRules");

                updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParamType = storedParamTypeMap['updateNetworkWirelessSsidFirewallL7FirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidFirewallL7FirewallRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessSsidFirewallL7FirewallRules_parameters.updateNetworkWirelessSsidFirewallL7FirewallRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam === 'object'){
                        updateNetworkWirelessSsidFirewallL7FirewallRules_parameters.updateNetworkWirelessSsidFirewallL7FirewallRules = updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam || '{}'
                        updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessSsidFirewallL7FirewallRules_parameters.updateNetworkWirelessSsidFirewallL7FirewallRules = updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessSsidFirewallL7FirewallRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessSsidFirewallL7FirewallRules(updateNetworkWirelessSsidFirewallL7FirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsidIdentityPsks') {
                var getNetworkWirelessSsidIdentityPsks_parameters = [];
                var getNetworkWirelessSsidIdentityPsks_nodeParam;
                var getNetworkWirelessSsidIdentityPsks_nodeParamType;
                
                
                getNetworkWirelessSsidIdentityPsks_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsidIdentityPsks_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidIdentityPsks_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidIdentityPsks_nodeParamType is "str"');
                    getNetworkWirelessSsidIdentityPsks_parameters.networkId = getNetworkWirelessSsidIdentityPsks_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidIdentityPsks_nodeParamType is not "str"')
                    getNetworkWirelessSsidIdentityPsks_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSsidIdentityPsks_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                getNetworkWirelessSsidIdentityPsks_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidIdentityPsks_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidIdentityPsks_nodeParamType is "str"');
                    getNetworkWirelessSsidIdentityPsks_parameters.number = getNetworkWirelessSsidIdentityPsks_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidIdentityPsks_nodeParamType is not "str"')
                    getNetworkWirelessSsidIdentityPsks_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                result = client.getNetworkWirelessSsidIdentityPsks(getNetworkWirelessSsidIdentityPsks_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createNetworkWirelessSsidIdentityPsk') {
                var createNetworkWirelessSsidIdentityPsk_parameters = [];
                var createNetworkWirelessSsidIdentityPsk_nodeParam;
                var createNetworkWirelessSsidIdentityPsk_nodeParamType;
                
                
                createNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                createNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('createNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    createNetworkWirelessSsidIdentityPsk_parameters.networkId = createNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('createNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    createNetworkWirelessSsidIdentityPsk_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                createNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                createNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (createNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('createNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    createNetworkWirelessSsidIdentityPsk_parameters.number = createNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('createNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    createNetworkWirelessSsidIdentityPsk_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                createNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['createNetworkWirelessSsidIdentityPsk'] ||
                    RED.util.getMessageProperty(msg, "createNetworkWirelessSsidIdentityPsk");

                createNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['createNetworkWirelessSsidIdentityPsk'] ||
                    RED.util.getMessageProperty(msg, "createNetworkWirelessSsidIdentityPsk");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createNetworkWirelessSsidIdentityPsk_parameters.createNetworkWirelessSsidIdentityPsk = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createNetworkWirelessSsidIdentityPsk_nodeParam === 'object'){
                        createNetworkWirelessSsidIdentityPsk_parameters.createNetworkWirelessSsidIdentityPsk = createNetworkWirelessSsidIdentityPsk_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createNetworkWirelessSsidIdentityPsk_nodeParam || '{}'
                        createNetworkWirelessSsidIdentityPsk_nodeParam = JSON.parse(nodeParam) ; 
                        createNetworkWirelessSsidIdentityPsk_parameters.createNetworkWirelessSsidIdentityPsk = createNetworkWirelessSsidIdentityPsk_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createNetworkWirelessSsidIdentityPsk_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createNetworkWirelessSsidIdentityPsk(createNetworkWirelessSsidIdentityPsk_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsidIdentityPsk') {
                var getNetworkWirelessSsidIdentityPsk_parameters = [];
                var getNetworkWirelessSsidIdentityPsk_nodeParam;
                var getNetworkWirelessSsidIdentityPsk_nodeParamType;
                
                
                getNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    getNetworkWirelessSsidIdentityPsk_parameters.networkId = getNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    getNetworkWirelessSsidIdentityPsk_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                getNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    getNetworkWirelessSsidIdentityPsk_parameters.number = getNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    getNetworkWirelessSsidIdentityPsk_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                getNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['identityPskId'] ||
                    RED.util.getMessageProperty(msg, "identityPskId");

                getNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['identityPskId'] ||
                    RED.util.getMessageProperty(msg, "identityPskId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    getNetworkWirelessSsidIdentityPsk_parameters.identityPskId = getNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    getNetworkWirelessSsidIdentityPsk_parameters.identityPskId = RED.util.getMessageProperty(msg, "identityPskId");
                }
                                result = client.getNetworkWirelessSsidIdentityPsk(getNetworkWirelessSsidIdentityPsk_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessSsidIdentityPsk') {
                var updateNetworkWirelessSsidIdentityPsk_parameters = [];
                var updateNetworkWirelessSsidIdentityPsk_nodeParam;
                var updateNetworkWirelessSsidIdentityPsk_nodeParamType;
                
                
                updateNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    updateNetworkWirelessSsidIdentityPsk_parameters.networkId = updateNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    updateNetworkWirelessSsidIdentityPsk_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                updateNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    updateNetworkWirelessSsidIdentityPsk_parameters.number = updateNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    updateNetworkWirelessSsidIdentityPsk_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                updateNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['identityPskId'] ||
                    RED.util.getMessageProperty(msg, "identityPskId");

                updateNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['identityPskId'] ||
                    RED.util.getMessageProperty(msg, "identityPskId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    updateNetworkWirelessSsidIdentityPsk_parameters.identityPskId = updateNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    updateNetworkWirelessSsidIdentityPsk_parameters.identityPskId = RED.util.getMessageProperty(msg, "identityPskId");
                }
                                
                updateNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['updateNetworkWirelessSsidIdentityPsk'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidIdentityPsk");

                updateNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['updateNetworkWirelessSsidIdentityPsk'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidIdentityPsk");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessSsidIdentityPsk_parameters.updateNetworkWirelessSsidIdentityPsk = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessSsidIdentityPsk_nodeParam === 'object'){
                        updateNetworkWirelessSsidIdentityPsk_parameters.updateNetworkWirelessSsidIdentityPsk = updateNetworkWirelessSsidIdentityPsk_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessSsidIdentityPsk_nodeParam || '{}'
                        updateNetworkWirelessSsidIdentityPsk_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessSsidIdentityPsk_parameters.updateNetworkWirelessSsidIdentityPsk = updateNetworkWirelessSsidIdentityPsk_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessSsidIdentityPsk_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessSsidIdentityPsk(updateNetworkWirelessSsidIdentityPsk_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteNetworkWirelessSsidIdentityPsk') {
                var deleteNetworkWirelessSsidIdentityPsk_parameters = [];
                var deleteNetworkWirelessSsidIdentityPsk_nodeParam;
                var deleteNetworkWirelessSsidIdentityPsk_nodeParamType;
                
                
                deleteNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                deleteNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('deleteNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    deleteNetworkWirelessSsidIdentityPsk_parameters.networkId = deleteNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    deleteNetworkWirelessSsidIdentityPsk_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                deleteNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                deleteNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('deleteNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    deleteNetworkWirelessSsidIdentityPsk_parameters.number = deleteNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    deleteNetworkWirelessSsidIdentityPsk_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                deleteNetworkWirelessSsidIdentityPsk_nodeParam = storedParamValsMap['identityPskId'] ||
                    RED.util.getMessageProperty(msg, "identityPskId");

                deleteNetworkWirelessSsidIdentityPsk_nodeParamType = storedParamTypeMap['identityPskId'] ||
                    RED.util.getMessageProperty(msg, "identityPskId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteNetworkWirelessSsidIdentityPsk_nodeParamType === 'str') {
                    //console.log('deleteNetworkWirelessSsidIdentityPsk_nodeParamType is "str"');
                    deleteNetworkWirelessSsidIdentityPsk_parameters.identityPskId = deleteNetworkWirelessSsidIdentityPsk_nodeParam || undefined;
                } else {
                    //console.log('deleteNetworkWirelessSsidIdentityPsk_nodeParamType is not "str"')
                    deleteNetworkWirelessSsidIdentityPsk_parameters.identityPskId = RED.util.getMessageProperty(msg, "identityPskId");
                }
                                result = client.deleteNetworkWirelessSsidIdentityPsk(deleteNetworkWirelessSsidIdentityPsk_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsidSplashSettings') {
                var getNetworkWirelessSsidSplashSettings_parameters = [];
                var getNetworkWirelessSsidSplashSettings_nodeParam;
                var getNetworkWirelessSsidSplashSettings_nodeParamType;
                
                
                getNetworkWirelessSsidSplashSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsidSplashSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidSplashSettings_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidSplashSettings_nodeParamType is "str"');
                    getNetworkWirelessSsidSplashSettings_parameters.networkId = getNetworkWirelessSsidSplashSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidSplashSettings_nodeParamType is not "str"')
                    getNetworkWirelessSsidSplashSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSsidSplashSettings_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                getNetworkWirelessSsidSplashSettings_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidSplashSettings_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidSplashSettings_nodeParamType is "str"');
                    getNetworkWirelessSsidSplashSettings_parameters.number = getNetworkWirelessSsidSplashSettings_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidSplashSettings_nodeParamType is not "str"')
                    getNetworkWirelessSsidSplashSettings_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                result = client.getNetworkWirelessSsidSplashSettings(getNetworkWirelessSsidSplashSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessSsidSplashSettings') {
                var updateNetworkWirelessSsidSplashSettings_parameters = [];
                var updateNetworkWirelessSsidSplashSettings_nodeParam;
                var updateNetworkWirelessSsidSplashSettings_nodeParamType;
                
                
                updateNetworkWirelessSsidSplashSettings_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessSsidSplashSettings_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidSplashSettings_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidSplashSettings_nodeParamType is "str"');
                    updateNetworkWirelessSsidSplashSettings_parameters.networkId = updateNetworkWirelessSsidSplashSettings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidSplashSettings_nodeParamType is not "str"')
                    updateNetworkWirelessSsidSplashSettings_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessSsidSplashSettings_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                updateNetworkWirelessSsidSplashSettings_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidSplashSettings_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidSplashSettings_nodeParamType is "str"');
                    updateNetworkWirelessSsidSplashSettings_parameters.number = updateNetworkWirelessSsidSplashSettings_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidSplashSettings_nodeParamType is not "str"')
                    updateNetworkWirelessSsidSplashSettings_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                updateNetworkWirelessSsidSplashSettings_nodeParam = storedParamValsMap['updateNetworkWirelessSsidSplashSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidSplashSettings");

                updateNetworkWirelessSsidSplashSettings_nodeParamType = storedParamTypeMap['updateNetworkWirelessSsidSplashSettings'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidSplashSettings");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessSsidSplashSettings_parameters.updateNetworkWirelessSsidSplashSettings = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessSsidSplashSettings_nodeParam === 'object'){
                        updateNetworkWirelessSsidSplashSettings_parameters.updateNetworkWirelessSsidSplashSettings = updateNetworkWirelessSsidSplashSettings_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessSsidSplashSettings_nodeParam || '{}'
                        updateNetworkWirelessSsidSplashSettings_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessSsidSplashSettings_parameters.updateNetworkWirelessSsidSplashSettings = updateNetworkWirelessSsidSplashSettings_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessSsidSplashSettings_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessSsidSplashSettings(updateNetworkWirelessSsidSplashSettings_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateNetworkWirelessSsidTrafficShapingRules') {
                var updateNetworkWirelessSsidTrafficShapingRules_parameters = [];
                var updateNetworkWirelessSsidTrafficShapingRules_nodeParam;
                var updateNetworkWirelessSsidTrafficShapingRules_nodeParamType;
                
                
                updateNetworkWirelessSsidTrafficShapingRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                updateNetworkWirelessSsidTrafficShapingRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidTrafficShapingRules_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidTrafficShapingRules_nodeParamType is "str"');
                    updateNetworkWirelessSsidTrafficShapingRules_parameters.networkId = updateNetworkWirelessSsidTrafficShapingRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidTrafficShapingRules_nodeParamType is not "str"')
                    updateNetworkWirelessSsidTrafficShapingRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                updateNetworkWirelessSsidTrafficShapingRules_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                updateNetworkWirelessSsidTrafficShapingRules_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (updateNetworkWirelessSsidTrafficShapingRules_nodeParamType === 'str') {
                    //console.log('updateNetworkWirelessSsidTrafficShapingRules_nodeParamType is "str"');
                    updateNetworkWirelessSsidTrafficShapingRules_parameters.number = updateNetworkWirelessSsidTrafficShapingRules_nodeParam || undefined;
                } else {
                    //console.log('updateNetworkWirelessSsidTrafficShapingRules_nodeParamType is not "str"')
                    updateNetworkWirelessSsidTrafficShapingRules_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                
                updateNetworkWirelessSsidTrafficShapingRules_nodeParam = storedParamValsMap['updateNetworkWirelessSsidTrafficShapingRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidTrafficShapingRules");

                updateNetworkWirelessSsidTrafficShapingRules_nodeParamType = storedParamTypeMap['updateNetworkWirelessSsidTrafficShapingRules'] ||
                    RED.util.getMessageProperty(msg, "updateNetworkWirelessSsidTrafficShapingRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateNetworkWirelessSsidTrafficShapingRules_parameters.updateNetworkWirelessSsidTrafficShapingRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateNetworkWirelessSsidTrafficShapingRules_nodeParam === 'object'){
                        updateNetworkWirelessSsidTrafficShapingRules_parameters.updateNetworkWirelessSsidTrafficShapingRules = updateNetworkWirelessSsidTrafficShapingRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateNetworkWirelessSsidTrafficShapingRules_nodeParam || '{}'
                        updateNetworkWirelessSsidTrafficShapingRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateNetworkWirelessSsidTrafficShapingRules_parameters.updateNetworkWirelessSsidTrafficShapingRules = updateNetworkWirelessSsidTrafficShapingRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateNetworkWirelessSsidTrafficShapingRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateNetworkWirelessSsidTrafficShapingRules(updateNetworkWirelessSsidTrafficShapingRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessSsidTrafficShapingRules') {
                var getNetworkWirelessSsidTrafficShapingRules_parameters = [];
                var getNetworkWirelessSsidTrafficShapingRules_nodeParam;
                var getNetworkWirelessSsidTrafficShapingRules_nodeParamType;
                
                
                getNetworkWirelessSsidTrafficShapingRules_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessSsidTrafficShapingRules_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidTrafficShapingRules_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidTrafficShapingRules_nodeParamType is "str"');
                    getNetworkWirelessSsidTrafficShapingRules_parameters.networkId = getNetworkWirelessSsidTrafficShapingRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidTrafficShapingRules_nodeParamType is not "str"')
                    getNetworkWirelessSsidTrafficShapingRules_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessSsidTrafficShapingRules_nodeParam = storedParamValsMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                getNetworkWirelessSsidTrafficShapingRules_nodeParamType = storedParamTypeMap['number'] ||
                    RED.util.getMessageProperty(msg, "number");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessSsidTrafficShapingRules_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessSsidTrafficShapingRules_nodeParamType is "str"');
                    getNetworkWirelessSsidTrafficShapingRules_parameters.number = getNetworkWirelessSsidTrafficShapingRules_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessSsidTrafficShapingRules_nodeParamType is not "str"')
                    getNetworkWirelessSsidTrafficShapingRules_parameters.number = RED.util.getMessageProperty(msg, "number");
                }
                                result = client.getNetworkWirelessSsidTrafficShapingRules(getNetworkWirelessSsidTrafficShapingRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getNetworkWirelessUsageHistory') {
                var getNetworkWirelessUsageHistory_parameters = [];
                var getNetworkWirelessUsageHistory_nodeParam;
                var getNetworkWirelessUsageHistory_nodeParamType;
                
                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.networkId = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.t0 = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.t1 = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.timespan = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['resolution'] ||
                    RED.util.getMessageProperty(msg, "resolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.resolution = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.resolution = RED.util.getMessageProperty(msg, "resolution");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['autoResolution'] ||
                    RED.util.getMessageProperty(msg, "autoResolution");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.autoResolution = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.autoResolution = RED.util.getMessageProperty(msg, "autoResolution");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['clientId'] ||
                    RED.util.getMessageProperty(msg, "clientId");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.clientId = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.clientId = RED.util.getMessageProperty(msg, "clientId");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.deviceSerial = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['apTag'] ||
                    RED.util.getMessageProperty(msg, "apTag");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.apTag = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.apTag = RED.util.getMessageProperty(msg, "apTag");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['band'] ||
                    RED.util.getMessageProperty(msg, "band");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.band = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.band = RED.util.getMessageProperty(msg, "band");
                }
                                
                getNetworkWirelessUsageHistory_nodeParam = storedParamValsMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                getNetworkWirelessUsageHistory_nodeParamType = storedParamTypeMap['ssid'] ||
                    RED.util.getMessageProperty(msg, "ssid");

                // Check if its the body param

                // notBodyParam                                            
                if (getNetworkWirelessUsageHistory_nodeParamType === 'str') {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is "str"');
                    getNetworkWirelessUsageHistory_parameters.ssid = getNetworkWirelessUsageHistory_nodeParam || undefined;
                } else {
                    //console.log('getNetworkWirelessUsageHistory_nodeParamType is not "str"')
                    getNetworkWirelessUsageHistory_parameters.ssid = RED.util.getMessageProperty(msg, "ssid");
                }
                                result = client.getNetworkWirelessUsageHistory(getNetworkWirelessUsageHistory_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizations') {
                var getOrganizations_parameters = [];
                var getOrganizations_nodeParam;
                var getOrganizations_nodeParamType;
                
                result = client.getOrganizations(getOrganizations_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganization') {
                var createOrganization_parameters = [];
                var createOrganization_nodeParam;
                var createOrganization_nodeParamType;
                
                
                createOrganization_nodeParam = storedParamValsMap['createOrganization'] ||
                    RED.util.getMessageProperty(msg, "createOrganization");

                createOrganization_nodeParamType = storedParamTypeMap['createOrganization'] ||
                    RED.util.getMessageProperty(msg, "createOrganization");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganization_parameters.createOrganization = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganization_nodeParam === 'object'){
                        createOrganization_parameters.createOrganization = createOrganization_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganization_nodeParam || '{}'
                        createOrganization_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganization_parameters.createOrganization = createOrganization_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganization_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganization(createOrganization_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganization') {
                var getOrganization_parameters = [];
                var getOrganization_nodeParam;
                var getOrganization_nodeParamType;
                
                
                getOrganization_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganization_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganization_nodeParamType === 'str') {
                    //console.log('getOrganization_nodeParamType is "str"');
                    getOrganization_parameters.organizationId = getOrganization_nodeParam || undefined;
                } else {
                    //console.log('getOrganization_nodeParamType is not "str"')
                    getOrganization_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganization(getOrganization_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganization') {
                var updateOrganization_parameters = [];
                var updateOrganization_nodeParam;
                var updateOrganization_nodeParamType;
                
                
                updateOrganization_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganization_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganization_nodeParamType === 'str') {
                    //console.log('updateOrganization_nodeParamType is "str"');
                    updateOrganization_parameters.organizationId = updateOrganization_nodeParam || undefined;
                } else {
                    //console.log('updateOrganization_nodeParamType is not "str"')
                    updateOrganization_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganization_nodeParam = storedParamValsMap['updateOrganization'] ||
                    RED.util.getMessageProperty(msg, "updateOrganization");

                updateOrganization_nodeParamType = storedParamTypeMap['updateOrganization'] ||
                    RED.util.getMessageProperty(msg, "updateOrganization");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganization_parameters.updateOrganization = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganization_nodeParam === 'object'){
                        updateOrganization_parameters.updateOrganization = updateOrganization_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganization_nodeParam || '{}'
                        updateOrganization_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganization_parameters.updateOrganization = updateOrganization_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganization_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganization(updateOrganization_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteOrganization') {
                var deleteOrganization_parameters = [];
                var deleteOrganization_nodeParam;
                var deleteOrganization_nodeParamType;
                
                
                deleteOrganization_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                deleteOrganization_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganization_nodeParamType === 'str') {
                    //console.log('deleteOrganization_nodeParamType is "str"');
                    deleteOrganization_parameters.organizationId = deleteOrganization_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganization_nodeParamType is not "str"')
                    deleteOrganization_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.deleteOrganization(deleteOrganization_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganizationActionBatch') {
                var createOrganizationActionBatch_parameters = [];
                var createOrganizationActionBatch_nodeParam;
                var createOrganizationActionBatch_nodeParamType;
                
                
                createOrganizationActionBatch_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                createOrganizationActionBatch_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (createOrganizationActionBatch_nodeParamType === 'str') {
                    //console.log('createOrganizationActionBatch_nodeParamType is "str"');
                    createOrganizationActionBatch_parameters.organizationId = createOrganizationActionBatch_nodeParam || undefined;
                } else {
                    //console.log('createOrganizationActionBatch_nodeParamType is not "str"')
                    createOrganizationActionBatch_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                createOrganizationActionBatch_nodeParam = storedParamValsMap['createOrganizationActionBatch'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationActionBatch");

                createOrganizationActionBatch_nodeParamType = storedParamTypeMap['createOrganizationActionBatch'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationActionBatch");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganizationActionBatch_parameters.createOrganizationActionBatch = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganizationActionBatch_nodeParam === 'object'){
                        createOrganizationActionBatch_parameters.createOrganizationActionBatch = createOrganizationActionBatch_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganizationActionBatch_nodeParam || '{}'
                        createOrganizationActionBatch_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganizationActionBatch_parameters.createOrganizationActionBatch = createOrganizationActionBatch_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganizationActionBatch_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganizationActionBatch(createOrganizationActionBatch_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationActionBatches') {
                var getOrganizationActionBatches_parameters = [];
                var getOrganizationActionBatches_nodeParam;
                var getOrganizationActionBatches_nodeParamType;
                
                
                getOrganizationActionBatches_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationActionBatches_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationActionBatches_nodeParamType === 'str') {
                    //console.log('getOrganizationActionBatches_nodeParamType is "str"');
                    getOrganizationActionBatches_parameters.organizationId = getOrganizationActionBatches_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationActionBatches_nodeParamType is not "str"')
                    getOrganizationActionBatches_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationActionBatches_nodeParam = storedParamValsMap['status'] ||
                    RED.util.getMessageProperty(msg, "status");

                getOrganizationActionBatches_nodeParamType = storedParamTypeMap['status'] ||
                    RED.util.getMessageProperty(msg, "status");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationActionBatches_nodeParamType === 'str') {
                    //console.log('getOrganizationActionBatches_nodeParamType is "str"');
                    getOrganizationActionBatches_parameters.status = getOrganizationActionBatches_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationActionBatches_nodeParamType is not "str"')
                    getOrganizationActionBatches_parameters.status = RED.util.getMessageProperty(msg, "status");
                }
                                result = client.getOrganizationActionBatches(getOrganizationActionBatches_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationActionBatch') {
                var getOrganizationActionBatch_parameters = [];
                var getOrganizationActionBatch_nodeParam;
                var getOrganizationActionBatch_nodeParamType;
                
                
                getOrganizationActionBatch_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationActionBatch_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationActionBatch_nodeParamType === 'str') {
                    //console.log('getOrganizationActionBatch_nodeParamType is "str"');
                    getOrganizationActionBatch_parameters.organizationId = getOrganizationActionBatch_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationActionBatch_nodeParamType is not "str"')
                    getOrganizationActionBatch_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationActionBatch_nodeParam = storedParamValsMap['actionBatchId'] ||
                    RED.util.getMessageProperty(msg, "actionBatchId");

                getOrganizationActionBatch_nodeParamType = storedParamTypeMap['actionBatchId'] ||
                    RED.util.getMessageProperty(msg, "actionBatchId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationActionBatch_nodeParamType === 'str') {
                    //console.log('getOrganizationActionBatch_nodeParamType is "str"');
                    getOrganizationActionBatch_parameters.actionBatchId = getOrganizationActionBatch_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationActionBatch_nodeParamType is not "str"')
                    getOrganizationActionBatch_parameters.actionBatchId = RED.util.getMessageProperty(msg, "actionBatchId");
                }
                                result = client.getOrganizationActionBatch(getOrganizationActionBatch_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteOrganizationActionBatch') {
                var deleteOrganizationActionBatch_parameters = [];
                var deleteOrganizationActionBatch_nodeParam;
                var deleteOrganizationActionBatch_nodeParamType;
                
                
                deleteOrganizationActionBatch_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                deleteOrganizationActionBatch_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationActionBatch_nodeParamType === 'str') {
                    //console.log('deleteOrganizationActionBatch_nodeParamType is "str"');
                    deleteOrganizationActionBatch_parameters.organizationId = deleteOrganizationActionBatch_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationActionBatch_nodeParamType is not "str"')
                    deleteOrganizationActionBatch_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                deleteOrganizationActionBatch_nodeParam = storedParamValsMap['actionBatchId'] ||
                    RED.util.getMessageProperty(msg, "actionBatchId");

                deleteOrganizationActionBatch_nodeParamType = storedParamTypeMap['actionBatchId'] ||
                    RED.util.getMessageProperty(msg, "actionBatchId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationActionBatch_nodeParamType === 'str') {
                    //console.log('deleteOrganizationActionBatch_nodeParamType is "str"');
                    deleteOrganizationActionBatch_parameters.actionBatchId = deleteOrganizationActionBatch_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationActionBatch_nodeParamType is not "str"')
                    deleteOrganizationActionBatch_parameters.actionBatchId = RED.util.getMessageProperty(msg, "actionBatchId");
                }
                                result = client.deleteOrganizationActionBatch(deleteOrganizationActionBatch_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationActionBatch') {
                var updateOrganizationActionBatch_parameters = [];
                var updateOrganizationActionBatch_nodeParam;
                var updateOrganizationActionBatch_nodeParamType;
                
                
                updateOrganizationActionBatch_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationActionBatch_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationActionBatch_nodeParamType === 'str') {
                    //console.log('updateOrganizationActionBatch_nodeParamType is "str"');
                    updateOrganizationActionBatch_parameters.organizationId = updateOrganizationActionBatch_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationActionBatch_nodeParamType is not "str"')
                    updateOrganizationActionBatch_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationActionBatch_nodeParam = storedParamValsMap['actionBatchId'] ||
                    RED.util.getMessageProperty(msg, "actionBatchId");

                updateOrganizationActionBatch_nodeParamType = storedParamTypeMap['actionBatchId'] ||
                    RED.util.getMessageProperty(msg, "actionBatchId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationActionBatch_nodeParamType === 'str') {
                    //console.log('updateOrganizationActionBatch_nodeParamType is "str"');
                    updateOrganizationActionBatch_parameters.actionBatchId = updateOrganizationActionBatch_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationActionBatch_nodeParamType is not "str"')
                    updateOrganizationActionBatch_parameters.actionBatchId = RED.util.getMessageProperty(msg, "actionBatchId");
                }
                                
                updateOrganizationActionBatch_nodeParam = storedParamValsMap['updateOrganizationActionBatch'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationActionBatch");

                updateOrganizationActionBatch_nodeParamType = storedParamTypeMap['updateOrganizationActionBatch'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationActionBatch");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationActionBatch_parameters.updateOrganizationActionBatch = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationActionBatch_nodeParam === 'object'){
                        updateOrganizationActionBatch_parameters.updateOrganizationActionBatch = updateOrganizationActionBatch_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationActionBatch_nodeParam || '{}'
                        updateOrganizationActionBatch_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationActionBatch_parameters.updateOrganizationActionBatch = updateOrganizationActionBatch_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationActionBatch_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationActionBatch(updateOrganizationActionBatch_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationAdmins') {
                var getOrganizationAdmins_parameters = [];
                var getOrganizationAdmins_nodeParam;
                var getOrganizationAdmins_nodeParamType;
                
                
                getOrganizationAdmins_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationAdmins_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationAdmins_nodeParamType === 'str') {
                    //console.log('getOrganizationAdmins_nodeParamType is "str"');
                    getOrganizationAdmins_parameters.organizationId = getOrganizationAdmins_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationAdmins_nodeParamType is not "str"')
                    getOrganizationAdmins_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationAdmins(getOrganizationAdmins_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganizationAdmin') {
                var createOrganizationAdmin_parameters = [];
                var createOrganizationAdmin_nodeParam;
                var createOrganizationAdmin_nodeParamType;
                
                
                createOrganizationAdmin_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                createOrganizationAdmin_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (createOrganizationAdmin_nodeParamType === 'str') {
                    //console.log('createOrganizationAdmin_nodeParamType is "str"');
                    createOrganizationAdmin_parameters.organizationId = createOrganizationAdmin_nodeParam || undefined;
                } else {
                    //console.log('createOrganizationAdmin_nodeParamType is not "str"')
                    createOrganizationAdmin_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                createOrganizationAdmin_nodeParam = storedParamValsMap['createOrganizationAdmin'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationAdmin");

                createOrganizationAdmin_nodeParamType = storedParamTypeMap['createOrganizationAdmin'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationAdmin");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganizationAdmin_parameters.createOrganizationAdmin = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganizationAdmin_nodeParam === 'object'){
                        createOrganizationAdmin_parameters.createOrganizationAdmin = createOrganizationAdmin_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganizationAdmin_nodeParam || '{}'
                        createOrganizationAdmin_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganizationAdmin_parameters.createOrganizationAdmin = createOrganizationAdmin_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganizationAdmin_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganizationAdmin(createOrganizationAdmin_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationAdmin') {
                var updateOrganizationAdmin_parameters = [];
                var updateOrganizationAdmin_nodeParam;
                var updateOrganizationAdmin_nodeParamType;
                
                
                updateOrganizationAdmin_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationAdmin_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationAdmin_nodeParamType === 'str') {
                    //console.log('updateOrganizationAdmin_nodeParamType is "str"');
                    updateOrganizationAdmin_parameters.organizationId = updateOrganizationAdmin_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationAdmin_nodeParamType is not "str"')
                    updateOrganizationAdmin_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationAdmin_nodeParam = storedParamValsMap['adminId'] ||
                    RED.util.getMessageProperty(msg, "adminId");

                updateOrganizationAdmin_nodeParamType = storedParamTypeMap['adminId'] ||
                    RED.util.getMessageProperty(msg, "adminId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationAdmin_nodeParamType === 'str') {
                    //console.log('updateOrganizationAdmin_nodeParamType is "str"');
                    updateOrganizationAdmin_parameters.adminId = updateOrganizationAdmin_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationAdmin_nodeParamType is not "str"')
                    updateOrganizationAdmin_parameters.adminId = RED.util.getMessageProperty(msg, "adminId");
                }
                                
                updateOrganizationAdmin_nodeParam = storedParamValsMap['updateOrganizationAdmin'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationAdmin");

                updateOrganizationAdmin_nodeParamType = storedParamTypeMap['updateOrganizationAdmin'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationAdmin");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationAdmin_parameters.updateOrganizationAdmin = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationAdmin_nodeParam === 'object'){
                        updateOrganizationAdmin_parameters.updateOrganizationAdmin = updateOrganizationAdmin_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationAdmin_nodeParam || '{}'
                        updateOrganizationAdmin_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationAdmin_parameters.updateOrganizationAdmin = updateOrganizationAdmin_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationAdmin_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationAdmin(updateOrganizationAdmin_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteOrganizationAdmin') {
                var deleteOrganizationAdmin_parameters = [];
                var deleteOrganizationAdmin_nodeParam;
                var deleteOrganizationAdmin_nodeParamType;
                
                
                deleteOrganizationAdmin_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                deleteOrganizationAdmin_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationAdmin_nodeParamType === 'str') {
                    //console.log('deleteOrganizationAdmin_nodeParamType is "str"');
                    deleteOrganizationAdmin_parameters.organizationId = deleteOrganizationAdmin_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationAdmin_nodeParamType is not "str"')
                    deleteOrganizationAdmin_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                deleteOrganizationAdmin_nodeParam = storedParamValsMap['adminId'] ||
                    RED.util.getMessageProperty(msg, "adminId");

                deleteOrganizationAdmin_nodeParamType = storedParamTypeMap['adminId'] ||
                    RED.util.getMessageProperty(msg, "adminId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationAdmin_nodeParamType === 'str') {
                    //console.log('deleteOrganizationAdmin_nodeParamType is "str"');
                    deleteOrganizationAdmin_parameters.adminId = deleteOrganizationAdmin_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationAdmin_nodeParamType is not "str"')
                    deleteOrganizationAdmin_parameters.adminId = RED.util.getMessageProperty(msg, "adminId");
                }
                                result = client.deleteOrganizationAdmin(deleteOrganizationAdmin_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApiRequests') {
                var getOrganizationApiRequests_parameters = [];
                var getOrganizationApiRequests_nodeParam;
                var getOrganizationApiRequests_nodeParamType;
                
                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.organizationId = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.t0 = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.t1 = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.timespan = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.perPage = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.startingAfter = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.endingBefore = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['adminId'] ||
                    RED.util.getMessageProperty(msg, "adminId");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['adminId'] ||
                    RED.util.getMessageProperty(msg, "adminId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.adminId = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.adminId = RED.util.getMessageProperty(msg, "adminId");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['path'] ||
                    RED.util.getMessageProperty(msg, "path");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['path'] ||
                    RED.util.getMessageProperty(msg, "path");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.path = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.path = RED.util.getMessageProperty(msg, "path");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['method'] ||
                    RED.util.getMessageProperty(msg, "method");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['method'] ||
                    RED.util.getMessageProperty(msg, "method");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.method = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.method = RED.util.getMessageProperty(msg, "method");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['responseCode'] ||
                    RED.util.getMessageProperty(msg, "responseCode");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['responseCode'] ||
                    RED.util.getMessageProperty(msg, "responseCode");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.responseCode = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.responseCode = RED.util.getMessageProperty(msg, "responseCode");
                }
                                
                getOrganizationApiRequests_nodeParam = storedParamValsMap['sourceIp'] ||
                    RED.util.getMessageProperty(msg, "sourceIp");

                getOrganizationApiRequests_nodeParamType = storedParamTypeMap['sourceIp'] ||
                    RED.util.getMessageProperty(msg, "sourceIp");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequests_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequests_nodeParamType is "str"');
                    getOrganizationApiRequests_parameters.sourceIp = getOrganizationApiRequests_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequests_nodeParamType is not "str"')
                    getOrganizationApiRequests_parameters.sourceIp = RED.util.getMessageProperty(msg, "sourceIp");
                }
                                result = client.getOrganizationApiRequests(getOrganizationApiRequests_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApiRequestsOverview') {
                var getOrganizationApiRequestsOverview_parameters = [];
                var getOrganizationApiRequestsOverview_nodeParam;
                var getOrganizationApiRequestsOverview_nodeParamType;
                
                
                getOrganizationApiRequestsOverview_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApiRequestsOverview_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequestsOverview_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequestsOverview_nodeParamType is "str"');
                    getOrganizationApiRequestsOverview_parameters.organizationId = getOrganizationApiRequestsOverview_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequestsOverview_nodeParamType is not "str"')
                    getOrganizationApiRequestsOverview_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationApiRequestsOverview_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getOrganizationApiRequestsOverview_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequestsOverview_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequestsOverview_nodeParamType is "str"');
                    getOrganizationApiRequestsOverview_parameters.t0 = getOrganizationApiRequestsOverview_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequestsOverview_nodeParamType is not "str"')
                    getOrganizationApiRequestsOverview_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getOrganizationApiRequestsOverview_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getOrganizationApiRequestsOverview_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequestsOverview_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequestsOverview_nodeParamType is "str"');
                    getOrganizationApiRequestsOverview_parameters.t1 = getOrganizationApiRequestsOverview_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequestsOverview_nodeParamType is not "str"')
                    getOrganizationApiRequestsOverview_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getOrganizationApiRequestsOverview_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getOrganizationApiRequestsOverview_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApiRequestsOverview_nodeParamType === 'str') {
                    //console.log('getOrganizationApiRequestsOverview_nodeParamType is "str"');
                    getOrganizationApiRequestsOverview_parameters.timespan = getOrganizationApiRequestsOverview_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApiRequestsOverview_nodeParamType is not "str"')
                    getOrganizationApiRequestsOverview_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getOrganizationApiRequestsOverview(getOrganizationApiRequestsOverview_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApplianceSecurityEvents') {
                var getOrganizationApplianceSecurityEvents_parameters = [];
                var getOrganizationApplianceSecurityEvents_nodeParam;
                var getOrganizationApplianceSecurityEvents_nodeParamType;
                
                
                getOrganizationApplianceSecurityEvents_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApplianceSecurityEvents_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is "str"');
                    getOrganizationApplianceSecurityEvents_parameters.organizationId = getOrganizationApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityEvents_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationApplianceSecurityEvents_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getOrganizationApplianceSecurityEvents_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is "str"');
                    getOrganizationApplianceSecurityEvents_parameters.t0 = getOrganizationApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityEvents_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getOrganizationApplianceSecurityEvents_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getOrganizationApplianceSecurityEvents_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is "str"');
                    getOrganizationApplianceSecurityEvents_parameters.t1 = getOrganizationApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityEvents_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getOrganizationApplianceSecurityEvents_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getOrganizationApplianceSecurityEvents_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is "str"');
                    getOrganizationApplianceSecurityEvents_parameters.timespan = getOrganizationApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityEvents_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getOrganizationApplianceSecurityEvents_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationApplianceSecurityEvents_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is "str"');
                    getOrganizationApplianceSecurityEvents_parameters.perPage = getOrganizationApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityEvents_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationApplianceSecurityEvents_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationApplianceSecurityEvents_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is "str"');
                    getOrganizationApplianceSecurityEvents_parameters.startingAfter = getOrganizationApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityEvents_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationApplianceSecurityEvents_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationApplianceSecurityEvents_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is "str"');
                    getOrganizationApplianceSecurityEvents_parameters.endingBefore = getOrganizationApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityEvents_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationApplianceSecurityEvents_nodeParam = storedParamValsMap['sortOrder'] ||
                    RED.util.getMessageProperty(msg, "sortOrder");

                getOrganizationApplianceSecurityEvents_nodeParamType = storedParamTypeMap['sortOrder'] ||
                    RED.util.getMessageProperty(msg, "sortOrder");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityEvents_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is "str"');
                    getOrganizationApplianceSecurityEvents_parameters.sortOrder = getOrganizationApplianceSecurityEvents_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityEvents_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityEvents_parameters.sortOrder = RED.util.getMessageProperty(msg, "sortOrder");
                }
                                result = client.getOrganizationApplianceSecurityEvents(getOrganizationApplianceSecurityEvents_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApplianceSecurityIntrusion') {
                var getOrganizationApplianceSecurityIntrusion_parameters = [];
                var getOrganizationApplianceSecurityIntrusion_nodeParam;
                var getOrganizationApplianceSecurityIntrusion_nodeParamType;
                
                
                getOrganizationApplianceSecurityIntrusion_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApplianceSecurityIntrusion_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceSecurityIntrusion_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceSecurityIntrusion_nodeParamType is "str"');
                    getOrganizationApplianceSecurityIntrusion_parameters.organizationId = getOrganizationApplianceSecurityIntrusion_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceSecurityIntrusion_nodeParamType is not "str"')
                    getOrganizationApplianceSecurityIntrusion_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationApplianceSecurityIntrusion(getOrganizationApplianceSecurityIntrusion_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationApplianceSecurityIntrusion') {
                var updateOrganizationApplianceSecurityIntrusion_parameters = [];
                var updateOrganizationApplianceSecurityIntrusion_nodeParam;
                var updateOrganizationApplianceSecurityIntrusion_nodeParamType;
                
                
                updateOrganizationApplianceSecurityIntrusion_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationApplianceSecurityIntrusion_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationApplianceSecurityIntrusion_nodeParamType === 'str') {
                    //console.log('updateOrganizationApplianceSecurityIntrusion_nodeParamType is "str"');
                    updateOrganizationApplianceSecurityIntrusion_parameters.organizationId = updateOrganizationApplianceSecurityIntrusion_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationApplianceSecurityIntrusion_nodeParamType is not "str"')
                    updateOrganizationApplianceSecurityIntrusion_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationApplianceSecurityIntrusion_nodeParam = storedParamValsMap['updateOrganizationApplianceSecurityIntrusion'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationApplianceSecurityIntrusion");

                updateOrganizationApplianceSecurityIntrusion_nodeParamType = storedParamTypeMap['updateOrganizationApplianceSecurityIntrusion'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationApplianceSecurityIntrusion");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationApplianceSecurityIntrusion_parameters.updateOrganizationApplianceSecurityIntrusion = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationApplianceSecurityIntrusion_nodeParam === 'object'){
                        updateOrganizationApplianceSecurityIntrusion_parameters.updateOrganizationApplianceSecurityIntrusion = updateOrganizationApplianceSecurityIntrusion_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationApplianceSecurityIntrusion_nodeParam || '{}'
                        updateOrganizationApplianceSecurityIntrusion_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationApplianceSecurityIntrusion_parameters.updateOrganizationApplianceSecurityIntrusion = updateOrganizationApplianceSecurityIntrusion_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationApplianceSecurityIntrusion_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationApplianceSecurityIntrusion(updateOrganizationApplianceSecurityIntrusion_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApplianceUplinkStatuses') {
                var getOrganizationApplianceUplinkStatuses_parameters = [];
                var getOrganizationApplianceUplinkStatuses_nodeParam;
                var getOrganizationApplianceUplinkStatuses_nodeParamType;
                
                
                getOrganizationApplianceUplinkStatuses_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApplianceUplinkStatuses_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is "str"');
                    getOrganizationApplianceUplinkStatuses_parameters.organizationId = getOrganizationApplianceUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceUplinkStatuses_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationApplianceUplinkStatuses_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationApplianceUplinkStatuses_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is "str"');
                    getOrganizationApplianceUplinkStatuses_parameters.perPage = getOrganizationApplianceUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceUplinkStatuses_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationApplianceUplinkStatuses_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationApplianceUplinkStatuses_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is "str"');
                    getOrganizationApplianceUplinkStatuses_parameters.startingAfter = getOrganizationApplianceUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceUplinkStatuses_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationApplianceUplinkStatuses_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationApplianceUplinkStatuses_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is "str"');
                    getOrganizationApplianceUplinkStatuses_parameters.endingBefore = getOrganizationApplianceUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceUplinkStatuses_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationApplianceUplinkStatuses_nodeParam = storedParamValsMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                getOrganizationApplianceUplinkStatuses_nodeParamType = storedParamTypeMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is "str"');
                    getOrganizationApplianceUplinkStatuses_parameters.networkIds = getOrganizationApplianceUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceUplinkStatuses_parameters.networkIds = RED.util.getMessageProperty(msg, "networkIds");
                }
                                
                getOrganizationApplianceUplinkStatuses_nodeParam = storedParamValsMap['serials'] ||
                    RED.util.getMessageProperty(msg, "serials");

                getOrganizationApplianceUplinkStatuses_nodeParamType = storedParamTypeMap['serials'] ||
                    RED.util.getMessageProperty(msg, "serials");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is "str"');
                    getOrganizationApplianceUplinkStatuses_parameters.serials = getOrganizationApplianceUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceUplinkStatuses_parameters.serials = RED.util.getMessageProperty(msg, "serials");
                }
                                
                getOrganizationApplianceUplinkStatuses_nodeParam = storedParamValsMap['iccids'] ||
                    RED.util.getMessageProperty(msg, "iccids");

                getOrganizationApplianceUplinkStatuses_nodeParamType = storedParamTypeMap['iccids'] ||
                    RED.util.getMessageProperty(msg, "iccids");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is "str"');
                    getOrganizationApplianceUplinkStatuses_parameters.iccids = getOrganizationApplianceUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceUplinkStatuses_parameters.iccids = RED.util.getMessageProperty(msg, "iccids");
                }
                                result = client.getOrganizationApplianceUplinkStatuses(getOrganizationApplianceUplinkStatuses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApplianceVpnStats') {
                var getOrganizationApplianceVpnStats_parameters = [];
                var getOrganizationApplianceVpnStats_nodeParam;
                var getOrganizationApplianceVpnStats_nodeParamType;
                
                
                getOrganizationApplianceVpnStats_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApplianceVpnStats_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStats_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is "str"');
                    getOrganizationApplianceVpnStats_parameters.organizationId = getOrganizationApplianceVpnStats_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStats_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationApplianceVpnStats_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationApplianceVpnStats_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStats_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is "str"');
                    getOrganizationApplianceVpnStats_parameters.perPage = getOrganizationApplianceVpnStats_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStats_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationApplianceVpnStats_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationApplianceVpnStats_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStats_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is "str"');
                    getOrganizationApplianceVpnStats_parameters.startingAfter = getOrganizationApplianceVpnStats_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStats_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationApplianceVpnStats_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationApplianceVpnStats_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStats_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is "str"');
                    getOrganizationApplianceVpnStats_parameters.endingBefore = getOrganizationApplianceVpnStats_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStats_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationApplianceVpnStats_nodeParam = storedParamValsMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                getOrganizationApplianceVpnStats_nodeParamType = storedParamTypeMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStats_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is "str"');
                    getOrganizationApplianceVpnStats_parameters.networkIds = getOrganizationApplianceVpnStats_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStats_parameters.networkIds = RED.util.getMessageProperty(msg, "networkIds");
                }
                                
                getOrganizationApplianceVpnStats_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getOrganizationApplianceVpnStats_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStats_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is "str"');
                    getOrganizationApplianceVpnStats_parameters.t0 = getOrganizationApplianceVpnStats_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStats_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getOrganizationApplianceVpnStats_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getOrganizationApplianceVpnStats_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStats_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is "str"');
                    getOrganizationApplianceVpnStats_parameters.t1 = getOrganizationApplianceVpnStats_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStats_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getOrganizationApplianceVpnStats_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getOrganizationApplianceVpnStats_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStats_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is "str"');
                    getOrganizationApplianceVpnStats_parameters.timespan = getOrganizationApplianceVpnStats_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStats_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStats_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                result = client.getOrganizationApplianceVpnStats(getOrganizationApplianceVpnStats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApplianceVpnStatuses') {
                var getOrganizationApplianceVpnStatuses_parameters = [];
                var getOrganizationApplianceVpnStatuses_nodeParam;
                var getOrganizationApplianceVpnStatuses_nodeParamType;
                
                
                getOrganizationApplianceVpnStatuses_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApplianceVpnStatuses_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is "str"');
                    getOrganizationApplianceVpnStatuses_parameters.organizationId = getOrganizationApplianceVpnStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStatuses_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationApplianceVpnStatuses_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationApplianceVpnStatuses_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is "str"');
                    getOrganizationApplianceVpnStatuses_parameters.perPage = getOrganizationApplianceVpnStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStatuses_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationApplianceVpnStatuses_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationApplianceVpnStatuses_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is "str"');
                    getOrganizationApplianceVpnStatuses_parameters.startingAfter = getOrganizationApplianceVpnStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStatuses_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationApplianceVpnStatuses_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationApplianceVpnStatuses_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is "str"');
                    getOrganizationApplianceVpnStatuses_parameters.endingBefore = getOrganizationApplianceVpnStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStatuses_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationApplianceVpnStatuses_nodeParam = storedParamValsMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                getOrganizationApplianceVpnStatuses_nodeParamType = storedParamTypeMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is "str"');
                    getOrganizationApplianceVpnStatuses_parameters.networkIds = getOrganizationApplianceVpnStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnStatuses_nodeParamType is not "str"')
                    getOrganizationApplianceVpnStatuses_parameters.networkIds = RED.util.getMessageProperty(msg, "networkIds");
                }
                                result = client.getOrganizationApplianceVpnStatuses(getOrganizationApplianceVpnStatuses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApplianceVpnThirdPartyVPNPeers') {
                var getOrganizationApplianceVpnThirdPartyVPNPeers_parameters = [];
                var getOrganizationApplianceVpnThirdPartyVPNPeers_nodeParam;
                var getOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType;
                
                
                getOrganizationApplianceVpnThirdPartyVPNPeers_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType is "str"');
                    getOrganizationApplianceVpnThirdPartyVPNPeers_parameters.organizationId = getOrganizationApplianceVpnThirdPartyVPNPeers_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType is not "str"')
                    getOrganizationApplianceVpnThirdPartyVPNPeers_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationApplianceVpnThirdPartyVPNPeers(getOrganizationApplianceVpnThirdPartyVPNPeers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationApplianceVpnThirdPartyVPNPeers') {
                var updateOrganizationApplianceVpnThirdPartyVPNPeers_parameters = [];
                var updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParam;
                var updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType;
                
                
                updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType === 'str') {
                    //console.log('updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType is "str"');
                    updateOrganizationApplianceVpnThirdPartyVPNPeers_parameters.organizationId = updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType is not "str"')
                    updateOrganizationApplianceVpnThirdPartyVPNPeers_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParam = storedParamValsMap['updateOrganizationApplianceVpnThirdPartyVpnPeers'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationApplianceVpnThirdPartyVpnPeers");

                updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType = storedParamTypeMap['updateOrganizationApplianceVpnThirdPartyVpnPeers'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationApplianceVpnThirdPartyVpnPeers");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType === 'str') {
                    //console.log('updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType is "str"');
                    updateOrganizationApplianceVpnThirdPartyVPNPeers_parameters.updateOrganizationApplianceVpnThirdPartyVpnPeers = updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationApplianceVpnThirdPartyVPNPeers_nodeParamType is not "str"')
                    updateOrganizationApplianceVpnThirdPartyVPNPeers_parameters.updateOrganizationApplianceVpnThirdPartyVpnPeers = RED.util.getMessageProperty(msg, "updateOrganizationApplianceVpnThirdPartyVpnPeers");
                }
                                result = client.updateOrganizationApplianceVpnThirdPartyVPNPeers(updateOrganizationApplianceVpnThirdPartyVPNPeers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationApplianceVpnVpnFirewallRules') {
                var getOrganizationApplianceVpnVpnFirewallRules_parameters = [];
                var getOrganizationApplianceVpnVpnFirewallRules_nodeParam;
                var getOrganizationApplianceVpnVpnFirewallRules_nodeParamType;
                
                
                getOrganizationApplianceVpnVpnFirewallRules_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationApplianceVpnVpnFirewallRules_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationApplianceVpnVpnFirewallRules_nodeParamType === 'str') {
                    //console.log('getOrganizationApplianceVpnVpnFirewallRules_nodeParamType is "str"');
                    getOrganizationApplianceVpnVpnFirewallRules_parameters.organizationId = getOrganizationApplianceVpnVpnFirewallRules_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationApplianceVpnVpnFirewallRules_nodeParamType is not "str"')
                    getOrganizationApplianceVpnVpnFirewallRules_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationApplianceVpnVpnFirewallRules(getOrganizationApplianceVpnVpnFirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationApplianceVpnVpnFirewallRules') {
                var updateOrganizationApplianceVpnVpnFirewallRules_parameters = [];
                var updateOrganizationApplianceVpnVpnFirewallRules_nodeParam;
                var updateOrganizationApplianceVpnVpnFirewallRules_nodeParamType;
                
                
                updateOrganizationApplianceVpnVpnFirewallRules_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationApplianceVpnVpnFirewallRules_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationApplianceVpnVpnFirewallRules_nodeParamType === 'str') {
                    //console.log('updateOrganizationApplianceVpnVpnFirewallRules_nodeParamType is "str"');
                    updateOrganizationApplianceVpnVpnFirewallRules_parameters.organizationId = updateOrganizationApplianceVpnVpnFirewallRules_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationApplianceVpnVpnFirewallRules_nodeParamType is not "str"')
                    updateOrganizationApplianceVpnVpnFirewallRules_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationApplianceVpnVpnFirewallRules_nodeParam = storedParamValsMap['updateOrganizationApplianceVpnVpnFirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationApplianceVpnVpnFirewallRules");

                updateOrganizationApplianceVpnVpnFirewallRules_nodeParamType = storedParamTypeMap['updateOrganizationApplianceVpnVpnFirewallRules'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationApplianceVpnVpnFirewallRules");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationApplianceVpnVpnFirewallRules_parameters.updateOrganizationApplianceVpnVpnFirewallRules = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationApplianceVpnVpnFirewallRules_nodeParam === 'object'){
                        updateOrganizationApplianceVpnVpnFirewallRules_parameters.updateOrganizationApplianceVpnVpnFirewallRules = updateOrganizationApplianceVpnVpnFirewallRules_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationApplianceVpnVpnFirewallRules_nodeParam || '{}'
                        updateOrganizationApplianceVpnVpnFirewallRules_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationApplianceVpnVpnFirewallRules_parameters.updateOrganizationApplianceVpnVpnFirewallRules = updateOrganizationApplianceVpnVpnFirewallRules_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationApplianceVpnVpnFirewallRules_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationApplianceVpnVpnFirewallRules(updateOrganizationApplianceVpnVpnFirewallRules_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationBrandingPolicies') {
                var getOrganizationBrandingPolicies_parameters = [];
                var getOrganizationBrandingPolicies_nodeParam;
                var getOrganizationBrandingPolicies_nodeParamType;
                
                
                getOrganizationBrandingPolicies_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationBrandingPolicies_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationBrandingPolicies_nodeParamType === 'str') {
                    //console.log('getOrganizationBrandingPolicies_nodeParamType is "str"');
                    getOrganizationBrandingPolicies_parameters.organizationId = getOrganizationBrandingPolicies_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationBrandingPolicies_nodeParamType is not "str"')
                    getOrganizationBrandingPolicies_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationBrandingPolicies(getOrganizationBrandingPolicies_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganizationBrandingPolicy') {
                var createOrganizationBrandingPolicy_parameters = [];
                var createOrganizationBrandingPolicy_nodeParam;
                var createOrganizationBrandingPolicy_nodeParamType;
                
                
                createOrganizationBrandingPolicy_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                createOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (createOrganizationBrandingPolicy_nodeParamType === 'str') {
                    //console.log('createOrganizationBrandingPolicy_nodeParamType is "str"');
                    createOrganizationBrandingPolicy_parameters.organizationId = createOrganizationBrandingPolicy_nodeParam || undefined;
                } else {
                    //console.log('createOrganizationBrandingPolicy_nodeParamType is not "str"')
                    createOrganizationBrandingPolicy_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                createOrganizationBrandingPolicy_nodeParam = storedParamValsMap['createOrganizationBrandingPolicy'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationBrandingPolicy");

                createOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['createOrganizationBrandingPolicy'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationBrandingPolicy");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganizationBrandingPolicy_parameters.createOrganizationBrandingPolicy = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganizationBrandingPolicy_nodeParam === 'object'){
                        createOrganizationBrandingPolicy_parameters.createOrganizationBrandingPolicy = createOrganizationBrandingPolicy_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganizationBrandingPolicy_nodeParam || '{}'
                        createOrganizationBrandingPolicy_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganizationBrandingPolicy_parameters.createOrganizationBrandingPolicy = createOrganizationBrandingPolicy_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganizationBrandingPolicy_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganizationBrandingPolicy(createOrganizationBrandingPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationBrandingPoliciesPriorities') {
                var getOrganizationBrandingPoliciesPriorities_parameters = [];
                var getOrganizationBrandingPoliciesPriorities_nodeParam;
                var getOrganizationBrandingPoliciesPriorities_nodeParamType;
                
                
                getOrganizationBrandingPoliciesPriorities_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationBrandingPoliciesPriorities_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationBrandingPoliciesPriorities_nodeParamType === 'str') {
                    //console.log('getOrganizationBrandingPoliciesPriorities_nodeParamType is "str"');
                    getOrganizationBrandingPoliciesPriorities_parameters.organizationId = getOrganizationBrandingPoliciesPriorities_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationBrandingPoliciesPriorities_nodeParamType is not "str"')
                    getOrganizationBrandingPoliciesPriorities_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationBrandingPoliciesPriorities(getOrganizationBrandingPoliciesPriorities_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationBrandingPoliciesPriorities') {
                var updateOrganizationBrandingPoliciesPriorities_parameters = [];
                var updateOrganizationBrandingPoliciesPriorities_nodeParam;
                var updateOrganizationBrandingPoliciesPriorities_nodeParamType;
                
                
                updateOrganizationBrandingPoliciesPriorities_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationBrandingPoliciesPriorities_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationBrandingPoliciesPriorities_nodeParamType === 'str') {
                    //console.log('updateOrganizationBrandingPoliciesPriorities_nodeParamType is "str"');
                    updateOrganizationBrandingPoliciesPriorities_parameters.organizationId = updateOrganizationBrandingPoliciesPriorities_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationBrandingPoliciesPriorities_nodeParamType is not "str"')
                    updateOrganizationBrandingPoliciesPriorities_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationBrandingPoliciesPriorities_nodeParam = storedParamValsMap['updateOrganizationBrandingPoliciesPriorities'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationBrandingPoliciesPriorities");

                updateOrganizationBrandingPoliciesPriorities_nodeParamType = storedParamTypeMap['updateOrganizationBrandingPoliciesPriorities'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationBrandingPoliciesPriorities");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationBrandingPoliciesPriorities_parameters.updateOrganizationBrandingPoliciesPriorities = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationBrandingPoliciesPriorities_nodeParam === 'object'){
                        updateOrganizationBrandingPoliciesPriorities_parameters.updateOrganizationBrandingPoliciesPriorities = updateOrganizationBrandingPoliciesPriorities_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationBrandingPoliciesPriorities_nodeParam || '{}'
                        updateOrganizationBrandingPoliciesPriorities_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationBrandingPoliciesPriorities_parameters.updateOrganizationBrandingPoliciesPriorities = updateOrganizationBrandingPoliciesPriorities_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationBrandingPoliciesPriorities_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationBrandingPoliciesPriorities(updateOrganizationBrandingPoliciesPriorities_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationBrandingPolicy') {
                var getOrganizationBrandingPolicy_parameters = [];
                var getOrganizationBrandingPolicy_nodeParam;
                var getOrganizationBrandingPolicy_nodeParamType;
                
                
                getOrganizationBrandingPolicy_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationBrandingPolicy_nodeParamType === 'str') {
                    //console.log('getOrganizationBrandingPolicy_nodeParamType is "str"');
                    getOrganizationBrandingPolicy_parameters.organizationId = getOrganizationBrandingPolicy_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationBrandingPolicy_nodeParamType is not "str"')
                    getOrganizationBrandingPolicy_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationBrandingPolicy_nodeParam = storedParamValsMap['brandingPolicyId'] ||
                    RED.util.getMessageProperty(msg, "brandingPolicyId");

                getOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['brandingPolicyId'] ||
                    RED.util.getMessageProperty(msg, "brandingPolicyId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationBrandingPolicy_nodeParamType === 'str') {
                    //console.log('getOrganizationBrandingPolicy_nodeParamType is "str"');
                    getOrganizationBrandingPolicy_parameters.brandingPolicyId = getOrganizationBrandingPolicy_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationBrandingPolicy_nodeParamType is not "str"')
                    getOrganizationBrandingPolicy_parameters.brandingPolicyId = RED.util.getMessageProperty(msg, "brandingPolicyId");
                }
                                result = client.getOrganizationBrandingPolicy(getOrganizationBrandingPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationBrandingPolicy') {
                var updateOrganizationBrandingPolicy_parameters = [];
                var updateOrganizationBrandingPolicy_nodeParam;
                var updateOrganizationBrandingPolicy_nodeParamType;
                
                
                updateOrganizationBrandingPolicy_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationBrandingPolicy_nodeParamType === 'str') {
                    //console.log('updateOrganizationBrandingPolicy_nodeParamType is "str"');
                    updateOrganizationBrandingPolicy_parameters.organizationId = updateOrganizationBrandingPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationBrandingPolicy_nodeParamType is not "str"')
                    updateOrganizationBrandingPolicy_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationBrandingPolicy_nodeParam = storedParamValsMap['brandingPolicyId'] ||
                    RED.util.getMessageProperty(msg, "brandingPolicyId");

                updateOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['brandingPolicyId'] ||
                    RED.util.getMessageProperty(msg, "brandingPolicyId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationBrandingPolicy_nodeParamType === 'str') {
                    //console.log('updateOrganizationBrandingPolicy_nodeParamType is "str"');
                    updateOrganizationBrandingPolicy_parameters.brandingPolicyId = updateOrganizationBrandingPolicy_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationBrandingPolicy_nodeParamType is not "str"')
                    updateOrganizationBrandingPolicy_parameters.brandingPolicyId = RED.util.getMessageProperty(msg, "brandingPolicyId");
                }
                                
                updateOrganizationBrandingPolicy_nodeParam = storedParamValsMap['updateOrganizationBrandingPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationBrandingPolicy");

                updateOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['updateOrganizationBrandingPolicy'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationBrandingPolicy");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationBrandingPolicy_parameters.updateOrganizationBrandingPolicy = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationBrandingPolicy_nodeParam === 'object'){
                        updateOrganizationBrandingPolicy_parameters.updateOrganizationBrandingPolicy = updateOrganizationBrandingPolicy_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationBrandingPolicy_nodeParam || '{}'
                        updateOrganizationBrandingPolicy_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationBrandingPolicy_parameters.updateOrganizationBrandingPolicy = updateOrganizationBrandingPolicy_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationBrandingPolicy_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationBrandingPolicy(updateOrganizationBrandingPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteOrganizationBrandingPolicy') {
                var deleteOrganizationBrandingPolicy_parameters = [];
                var deleteOrganizationBrandingPolicy_nodeParam;
                var deleteOrganizationBrandingPolicy_nodeParamType;
                
                
                deleteOrganizationBrandingPolicy_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                deleteOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationBrandingPolicy_nodeParamType === 'str') {
                    //console.log('deleteOrganizationBrandingPolicy_nodeParamType is "str"');
                    deleteOrganizationBrandingPolicy_parameters.organizationId = deleteOrganizationBrandingPolicy_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationBrandingPolicy_nodeParamType is not "str"')
                    deleteOrganizationBrandingPolicy_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                deleteOrganizationBrandingPolicy_nodeParam = storedParamValsMap['brandingPolicyId'] ||
                    RED.util.getMessageProperty(msg, "brandingPolicyId");

                deleteOrganizationBrandingPolicy_nodeParamType = storedParamTypeMap['brandingPolicyId'] ||
                    RED.util.getMessageProperty(msg, "brandingPolicyId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationBrandingPolicy_nodeParamType === 'str') {
                    //console.log('deleteOrganizationBrandingPolicy_nodeParamType is "str"');
                    deleteOrganizationBrandingPolicy_parameters.brandingPolicyId = deleteOrganizationBrandingPolicy_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationBrandingPolicy_nodeParamType is not "str"')
                    deleteOrganizationBrandingPolicy_parameters.brandingPolicyId = RED.util.getMessageProperty(msg, "brandingPolicyId");
                }
                                result = client.deleteOrganizationBrandingPolicy(deleteOrganizationBrandingPolicy_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationCellularGatewayUplinkStatuses') {
                var getOrganizationCellularGatewayUplinkStatuses_parameters = [];
                var getOrganizationCellularGatewayUplinkStatuses_nodeParam;
                var getOrganizationCellularGatewayUplinkStatuses_nodeParamType;
                
                
                getOrganizationCellularGatewayUplinkStatuses_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationCellularGatewayUplinkStatuses_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationCellularGatewayUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is "str"');
                    getOrganizationCellularGatewayUplinkStatuses_parameters.organizationId = getOrganizationCellularGatewayUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationCellularGatewayUplinkStatuses_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationCellularGatewayUplinkStatuses_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationCellularGatewayUplinkStatuses_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationCellularGatewayUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is "str"');
                    getOrganizationCellularGatewayUplinkStatuses_parameters.perPage = getOrganizationCellularGatewayUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationCellularGatewayUplinkStatuses_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationCellularGatewayUplinkStatuses_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationCellularGatewayUplinkStatuses_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationCellularGatewayUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is "str"');
                    getOrganizationCellularGatewayUplinkStatuses_parameters.startingAfter = getOrganizationCellularGatewayUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationCellularGatewayUplinkStatuses_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationCellularGatewayUplinkStatuses_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationCellularGatewayUplinkStatuses_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationCellularGatewayUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is "str"');
                    getOrganizationCellularGatewayUplinkStatuses_parameters.endingBefore = getOrganizationCellularGatewayUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationCellularGatewayUplinkStatuses_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationCellularGatewayUplinkStatuses_nodeParam = storedParamValsMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                getOrganizationCellularGatewayUplinkStatuses_nodeParamType = storedParamTypeMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationCellularGatewayUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is "str"');
                    getOrganizationCellularGatewayUplinkStatuses_parameters.networkIds = getOrganizationCellularGatewayUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationCellularGatewayUplinkStatuses_parameters.networkIds = RED.util.getMessageProperty(msg, "networkIds");
                }
                                
                getOrganizationCellularGatewayUplinkStatuses_nodeParam = storedParamValsMap['serials'] ||
                    RED.util.getMessageProperty(msg, "serials");

                getOrganizationCellularGatewayUplinkStatuses_nodeParamType = storedParamTypeMap['serials'] ||
                    RED.util.getMessageProperty(msg, "serials");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationCellularGatewayUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is "str"');
                    getOrganizationCellularGatewayUplinkStatuses_parameters.serials = getOrganizationCellularGatewayUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationCellularGatewayUplinkStatuses_parameters.serials = RED.util.getMessageProperty(msg, "serials");
                }
                                
                getOrganizationCellularGatewayUplinkStatuses_nodeParam = storedParamValsMap['iccids'] ||
                    RED.util.getMessageProperty(msg, "iccids");

                getOrganizationCellularGatewayUplinkStatuses_nodeParamType = storedParamTypeMap['iccids'] ||
                    RED.util.getMessageProperty(msg, "iccids");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationCellularGatewayUplinkStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is "str"');
                    getOrganizationCellularGatewayUplinkStatuses_parameters.iccids = getOrganizationCellularGatewayUplinkStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationCellularGatewayUplinkStatuses_nodeParamType is not "str"')
                    getOrganizationCellularGatewayUplinkStatuses_parameters.iccids = RED.util.getMessageProperty(msg, "iccids");
                }
                                result = client.getOrganizationCellularGatewayUplinkStatuses(getOrganizationCellularGatewayUplinkStatuses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'claimIntoOrganization') {
                var claimIntoOrganization_parameters = [];
                var claimIntoOrganization_nodeParam;
                var claimIntoOrganization_nodeParamType;
                
                
                claimIntoOrganization_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                claimIntoOrganization_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (claimIntoOrganization_nodeParamType === 'str') {
                    //console.log('claimIntoOrganization_nodeParamType is "str"');
                    claimIntoOrganization_parameters.organizationId = claimIntoOrganization_nodeParam || undefined;
                } else {
                    //console.log('claimIntoOrganization_nodeParamType is not "str"')
                    claimIntoOrganization_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                claimIntoOrganization_nodeParam = storedParamValsMap['claimIntoOrganization'] ||
                    RED.util.getMessageProperty(msg, "claimIntoOrganization");

                claimIntoOrganization_nodeParamType = storedParamTypeMap['claimIntoOrganization'] ||
                    RED.util.getMessageProperty(msg, "claimIntoOrganization");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        claimIntoOrganization_parameters.claimIntoOrganization = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof claimIntoOrganization_nodeParam === 'object'){
                        claimIntoOrganization_parameters.claimIntoOrganization = claimIntoOrganization_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = claimIntoOrganization_nodeParam || '{}'
                        claimIntoOrganization_nodeParam = JSON.parse(nodeParam) ; 
                        claimIntoOrganization_parameters.claimIntoOrganization = claimIntoOrganization_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof claimIntoOrganization_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.claimIntoOrganization(claimIntoOrganization_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'cloneOrganization') {
                var cloneOrganization_parameters = [];
                var cloneOrganization_nodeParam;
                var cloneOrganization_nodeParamType;
                
                
                cloneOrganization_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                cloneOrganization_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (cloneOrganization_nodeParamType === 'str') {
                    //console.log('cloneOrganization_nodeParamType is "str"');
                    cloneOrganization_parameters.organizationId = cloneOrganization_nodeParam || undefined;
                } else {
                    //console.log('cloneOrganization_nodeParamType is not "str"')
                    cloneOrganization_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                cloneOrganization_nodeParam = storedParamValsMap['cloneOrganization'] ||
                    RED.util.getMessageProperty(msg, "cloneOrganization");

                cloneOrganization_nodeParamType = storedParamTypeMap['cloneOrganization'] ||
                    RED.util.getMessageProperty(msg, "cloneOrganization");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        cloneOrganization_parameters.cloneOrganization = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof cloneOrganization_nodeParam === 'object'){
                        cloneOrganization_parameters.cloneOrganization = cloneOrganization_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = cloneOrganization_nodeParam || '{}'
                        cloneOrganization_nodeParam = JSON.parse(nodeParam) ; 
                        cloneOrganization_parameters.cloneOrganization = cloneOrganization_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof cloneOrganization_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.cloneOrganization(cloneOrganization_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationConfigTemplates') {
                var getOrganizationConfigTemplates_parameters = [];
                var getOrganizationConfigTemplates_nodeParam;
                var getOrganizationConfigTemplates_nodeParamType;
                
                
                getOrganizationConfigTemplates_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationConfigTemplates_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplates_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplates_nodeParamType is "str"');
                    getOrganizationConfigTemplates_parameters.organizationId = getOrganizationConfigTemplates_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplates_nodeParamType is not "str"')
                    getOrganizationConfigTemplates_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationConfigTemplates(getOrganizationConfigTemplates_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganizationConfigTemplate') {
                var createOrganizationConfigTemplate_parameters = [];
                var createOrganizationConfigTemplate_nodeParam;
                var createOrganizationConfigTemplate_nodeParamType;
                
                
                createOrganizationConfigTemplate_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                createOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (createOrganizationConfigTemplate_nodeParamType === 'str') {
                    //console.log('createOrganizationConfigTemplate_nodeParamType is "str"');
                    createOrganizationConfigTemplate_parameters.organizationId = createOrganizationConfigTemplate_nodeParam || undefined;
                } else {
                    //console.log('createOrganizationConfigTemplate_nodeParamType is not "str"')
                    createOrganizationConfigTemplate_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                createOrganizationConfigTemplate_nodeParam = storedParamValsMap['createOrganizationConfigTemplate'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationConfigTemplate");

                createOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['createOrganizationConfigTemplate'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationConfigTemplate");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganizationConfigTemplate_parameters.createOrganizationConfigTemplate = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganizationConfigTemplate_nodeParam === 'object'){
                        createOrganizationConfigTemplate_parameters.createOrganizationConfigTemplate = createOrganizationConfigTemplate_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganizationConfigTemplate_nodeParam || '{}'
                        createOrganizationConfigTemplate_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganizationConfigTemplate_parameters.createOrganizationConfigTemplate = createOrganizationConfigTemplate_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganizationConfigTemplate_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganizationConfigTemplate(createOrganizationConfigTemplate_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationConfigTemplate') {
                var updateOrganizationConfigTemplate_parameters = [];
                var updateOrganizationConfigTemplate_nodeParam;
                var updateOrganizationConfigTemplate_nodeParamType;
                
                
                updateOrganizationConfigTemplate_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationConfigTemplate_nodeParamType === 'str') {
                    //console.log('updateOrganizationConfigTemplate_nodeParamType is "str"');
                    updateOrganizationConfigTemplate_parameters.organizationId = updateOrganizationConfigTemplate_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationConfigTemplate_nodeParamType is not "str"')
                    updateOrganizationConfigTemplate_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationConfigTemplate_nodeParam = storedParamValsMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                updateOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationConfigTemplate_nodeParamType === 'str') {
                    //console.log('updateOrganizationConfigTemplate_nodeParamType is "str"');
                    updateOrganizationConfigTemplate_parameters.configTemplateId = updateOrganizationConfigTemplate_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationConfigTemplate_nodeParamType is not "str"')
                    updateOrganizationConfigTemplate_parameters.configTemplateId = RED.util.getMessageProperty(msg, "configTemplateId");
                }
                                
                updateOrganizationConfigTemplate_nodeParam = storedParamValsMap['updateOrganizationConfigTemplate'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationConfigTemplate");

                updateOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['updateOrganizationConfigTemplate'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationConfigTemplate");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationConfigTemplate_parameters.updateOrganizationConfigTemplate = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationConfigTemplate_nodeParam === 'object'){
                        updateOrganizationConfigTemplate_parameters.updateOrganizationConfigTemplate = updateOrganizationConfigTemplate_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationConfigTemplate_nodeParam || '{}'
                        updateOrganizationConfigTemplate_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationConfigTemplate_parameters.updateOrganizationConfigTemplate = updateOrganizationConfigTemplate_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationConfigTemplate_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationConfigTemplate(updateOrganizationConfigTemplate_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteOrganizationConfigTemplate') {
                var deleteOrganizationConfigTemplate_parameters = [];
                var deleteOrganizationConfigTemplate_nodeParam;
                var deleteOrganizationConfigTemplate_nodeParamType;
                
                
                deleteOrganizationConfigTemplate_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                deleteOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationConfigTemplate_nodeParamType === 'str') {
                    //console.log('deleteOrganizationConfigTemplate_nodeParamType is "str"');
                    deleteOrganizationConfigTemplate_parameters.organizationId = deleteOrganizationConfigTemplate_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationConfigTemplate_nodeParamType is not "str"')
                    deleteOrganizationConfigTemplate_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                deleteOrganizationConfigTemplate_nodeParam = storedParamValsMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                deleteOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationConfigTemplate_nodeParamType === 'str') {
                    //console.log('deleteOrganizationConfigTemplate_nodeParamType is "str"');
                    deleteOrganizationConfigTemplate_parameters.configTemplateId = deleteOrganizationConfigTemplate_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationConfigTemplate_nodeParamType is not "str"')
                    deleteOrganizationConfigTemplate_parameters.configTemplateId = RED.util.getMessageProperty(msg, "configTemplateId");
                }
                                result = client.deleteOrganizationConfigTemplate(deleteOrganizationConfigTemplate_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationConfigTemplate') {
                var getOrganizationConfigTemplate_parameters = [];
                var getOrganizationConfigTemplate_nodeParam;
                var getOrganizationConfigTemplate_nodeParamType;
                
                
                getOrganizationConfigTemplate_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplate_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplate_nodeParamType is "str"');
                    getOrganizationConfigTemplate_parameters.organizationId = getOrganizationConfigTemplate_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplate_nodeParamType is not "str"')
                    getOrganizationConfigTemplate_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationConfigTemplate_nodeParam = storedParamValsMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                getOrganizationConfigTemplate_nodeParamType = storedParamTypeMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplate_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplate_nodeParamType is "str"');
                    getOrganizationConfigTemplate_parameters.configTemplateId = getOrganizationConfigTemplate_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplate_nodeParamType is not "str"')
                    getOrganizationConfigTemplate_parameters.configTemplateId = RED.util.getMessageProperty(msg, "configTemplateId");
                }
                                result = client.getOrganizationConfigTemplate(getOrganizationConfigTemplate_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationConfigTemplateSwitchProfiles') {
                var getOrganizationConfigTemplateSwitchProfiles_parameters = [];
                var getOrganizationConfigTemplateSwitchProfiles_nodeParam;
                var getOrganizationConfigTemplateSwitchProfiles_nodeParamType;
                
                
                getOrganizationConfigTemplateSwitchProfiles_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationConfigTemplateSwitchProfiles_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfiles_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfiles_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfiles_parameters.organizationId = getOrganizationConfigTemplateSwitchProfiles_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfiles_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfiles_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationConfigTemplateSwitchProfiles_nodeParam = storedParamValsMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                getOrganizationConfigTemplateSwitchProfiles_nodeParamType = storedParamTypeMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfiles_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfiles_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfiles_parameters.configTemplateId = getOrganizationConfigTemplateSwitchProfiles_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfiles_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfiles_parameters.configTemplateId = RED.util.getMessageProperty(msg, "configTemplateId");
                }
                                result = client.getOrganizationConfigTemplateSwitchProfiles(getOrganizationConfigTemplateSwitchProfiles_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationConfigTemplateSwitchProfilePorts') {
                var getOrganizationConfigTemplateSwitchProfilePorts_parameters = [];
                var getOrganizationConfigTemplateSwitchProfilePorts_nodeParam;
                var getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType;
                
                
                getOrganizationConfigTemplateSwitchProfilePorts_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfilePorts_parameters.organizationId = getOrganizationConfigTemplateSwitchProfilePorts_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfilePorts_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationConfigTemplateSwitchProfilePorts_nodeParam = storedParamValsMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType = storedParamTypeMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfilePorts_parameters.configTemplateId = getOrganizationConfigTemplateSwitchProfilePorts_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfilePorts_parameters.configTemplateId = RED.util.getMessageProperty(msg, "configTemplateId");
                }
                                
                getOrganizationConfigTemplateSwitchProfilePorts_nodeParam = storedParamValsMap['profileId'] ||
                    RED.util.getMessageProperty(msg, "profileId");

                getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType = storedParamTypeMap['profileId'] ||
                    RED.util.getMessageProperty(msg, "profileId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfilePorts_parameters.profileId = getOrganizationConfigTemplateSwitchProfilePorts_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePorts_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfilePorts_parameters.profileId = RED.util.getMessageProperty(msg, "profileId");
                }
                                result = client.getOrganizationConfigTemplateSwitchProfilePorts(getOrganizationConfigTemplateSwitchProfilePorts_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationConfigTemplateSwitchProfilePort') {
                var getOrganizationConfigTemplateSwitchProfilePort_parameters = [];
                var getOrganizationConfigTemplateSwitchProfilePort_nodeParam;
                var getOrganizationConfigTemplateSwitchProfilePort_nodeParamType;
                
                
                getOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfilePort_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePort_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfilePort_parameters.organizationId = getOrganizationConfigTemplateSwitchProfilePort_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePort_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfilePort_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                getOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfilePort_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePort_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfilePort_parameters.configTemplateId = getOrganizationConfigTemplateSwitchProfilePort_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePort_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfilePort_parameters.configTemplateId = RED.util.getMessageProperty(msg, "configTemplateId");
                }
                                
                getOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['profileId'] ||
                    RED.util.getMessageProperty(msg, "profileId");

                getOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['profileId'] ||
                    RED.util.getMessageProperty(msg, "profileId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfilePort_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePort_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfilePort_parameters.profileId = getOrganizationConfigTemplateSwitchProfilePort_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePort_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfilePort_parameters.profileId = RED.util.getMessageProperty(msg, "profileId");
                }
                                
                getOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                getOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigTemplateSwitchProfilePort_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePort_nodeParamType is "str"');
                    getOrganizationConfigTemplateSwitchProfilePort_parameters.portId = getOrganizationConfigTemplateSwitchProfilePort_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigTemplateSwitchProfilePort_nodeParamType is not "str"')
                    getOrganizationConfigTemplateSwitchProfilePort_parameters.portId = RED.util.getMessageProperty(msg, "portId");
                }
                                result = client.getOrganizationConfigTemplateSwitchProfilePort(getOrganizationConfigTemplateSwitchProfilePort_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationConfigTemplateSwitchProfilePort') {
                var updateOrganizationConfigTemplateSwitchProfilePort_parameters = [];
                var updateOrganizationConfigTemplateSwitchProfilePort_nodeParam;
                var updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType;
                
                
                updateOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType === 'str') {
                    //console.log('updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType is "str"');
                    updateOrganizationConfigTemplateSwitchProfilePort_parameters.organizationId = updateOrganizationConfigTemplateSwitchProfilePort_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType is not "str"')
                    updateOrganizationConfigTemplateSwitchProfilePort_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType === 'str') {
                    //console.log('updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType is "str"');
                    updateOrganizationConfigTemplateSwitchProfilePort_parameters.configTemplateId = updateOrganizationConfigTemplateSwitchProfilePort_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType is not "str"')
                    updateOrganizationConfigTemplateSwitchProfilePort_parameters.configTemplateId = RED.util.getMessageProperty(msg, "configTemplateId");
                }
                                
                updateOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['profileId'] ||
                    RED.util.getMessageProperty(msg, "profileId");

                updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['profileId'] ||
                    RED.util.getMessageProperty(msg, "profileId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType === 'str') {
                    //console.log('updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType is "str"');
                    updateOrganizationConfigTemplateSwitchProfilePort_parameters.profileId = updateOrganizationConfigTemplateSwitchProfilePort_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType is not "str"')
                    updateOrganizationConfigTemplateSwitchProfilePort_parameters.profileId = RED.util.getMessageProperty(msg, "profileId");
                }
                                
                updateOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['portId'] ||
                    RED.util.getMessageProperty(msg, "portId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType === 'str') {
                    //console.log('updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType is "str"');
                    updateOrganizationConfigTemplateSwitchProfilePort_parameters.portId = updateOrganizationConfigTemplateSwitchProfilePort_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType is not "str"')
                    updateOrganizationConfigTemplateSwitchProfilePort_parameters.portId = RED.util.getMessageProperty(msg, "portId");
                }
                                
                updateOrganizationConfigTemplateSwitchProfilePort_nodeParam = storedParamValsMap['updateOrganizationConfigTemplateSwitchProfilePort'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationConfigTemplateSwitchProfilePort");

                updateOrganizationConfigTemplateSwitchProfilePort_nodeParamType = storedParamTypeMap['updateOrganizationConfigTemplateSwitchProfilePort'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationConfigTemplateSwitchProfilePort");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationConfigTemplateSwitchProfilePort_parameters.updateOrganizationConfigTemplateSwitchProfilePort = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationConfigTemplateSwitchProfilePort_nodeParam === 'object'){
                        updateOrganizationConfigTemplateSwitchProfilePort_parameters.updateOrganizationConfigTemplateSwitchProfilePort = updateOrganizationConfigTemplateSwitchProfilePort_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationConfigTemplateSwitchProfilePort_nodeParam || '{}'
                        updateOrganizationConfigTemplateSwitchProfilePort_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationConfigTemplateSwitchProfilePort_parameters.updateOrganizationConfigTemplateSwitchProfilePort = updateOrganizationConfigTemplateSwitchProfilePort_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationConfigTemplateSwitchProfilePort_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationConfigTemplateSwitchProfilePort(updateOrganizationConfigTemplateSwitchProfilePort_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationConfigurationChanges') {
                var getOrganizationConfigurationChanges_parameters = [];
                var getOrganizationConfigurationChanges_nodeParam;
                var getOrganizationConfigurationChanges_nodeParamType;
                
                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.organizationId = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.t0 = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.t1 = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.timespan = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.perPage = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.startingAfter = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.endingBefore = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.networkId = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getOrganizationConfigurationChanges_nodeParam = storedParamValsMap['adminId'] ||
                    RED.util.getMessageProperty(msg, "adminId");

                getOrganizationConfigurationChanges_nodeParamType = storedParamTypeMap['adminId'] ||
                    RED.util.getMessageProperty(msg, "adminId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationConfigurationChanges_nodeParamType === 'str') {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is "str"');
                    getOrganizationConfigurationChanges_parameters.adminId = getOrganizationConfigurationChanges_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationConfigurationChanges_nodeParamType is not "str"')
                    getOrganizationConfigurationChanges_parameters.adminId = RED.util.getMessageProperty(msg, "adminId");
                }
                                result = client.getOrganizationConfigurationChanges(getOrganizationConfigurationChanges_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationDevices') {
                var getOrganizationDevices_parameters = [];
                var getOrganizationDevices_nodeParam;
                var getOrganizationDevices_nodeParamType;
                
                
                getOrganizationDevices_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationDevices_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationDevices_nodeParamType is "str"');
                    getOrganizationDevices_parameters.organizationId = getOrganizationDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevices_nodeParamType is not "str"')
                    getOrganizationDevices_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationDevices_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationDevices_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationDevices_nodeParamType is "str"');
                    getOrganizationDevices_parameters.perPage = getOrganizationDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevices_nodeParamType is not "str"')
                    getOrganizationDevices_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationDevices_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationDevices_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationDevices_nodeParamType is "str"');
                    getOrganizationDevices_parameters.startingAfter = getOrganizationDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevices_nodeParamType is not "str"')
                    getOrganizationDevices_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationDevices_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationDevices_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationDevices_nodeParamType is "str"');
                    getOrganizationDevices_parameters.endingBefore = getOrganizationDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevices_nodeParamType is not "str"')
                    getOrganizationDevices_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationDevices_nodeParam = storedParamValsMap['configurationUpdatedAfter'] ||
                    RED.util.getMessageProperty(msg, "configurationUpdatedAfter");

                getOrganizationDevices_nodeParamType = storedParamTypeMap['configurationUpdatedAfter'] ||
                    RED.util.getMessageProperty(msg, "configurationUpdatedAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationDevices_nodeParamType is "str"');
                    getOrganizationDevices_parameters.configurationUpdatedAfter = getOrganizationDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevices_nodeParamType is not "str"')
                    getOrganizationDevices_parameters.configurationUpdatedAfter = RED.util.getMessageProperty(msg, "configurationUpdatedAfter");
                }
                                result = client.getOrganizationDevices(getOrganizationDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationDevicesStatuses') {
                var getOrganizationDevicesStatuses_parameters = [];
                var getOrganizationDevicesStatuses_nodeParam;
                var getOrganizationDevicesStatuses_nodeParamType;
                
                
                getOrganizationDevicesStatuses_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationDevicesStatuses_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesStatuses_nodeParamType is "str"');
                    getOrganizationDevicesStatuses_parameters.organizationId = getOrganizationDevicesStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesStatuses_nodeParamType is not "str"')
                    getOrganizationDevicesStatuses_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationDevicesStatuses_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationDevicesStatuses_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesStatuses_nodeParamType is "str"');
                    getOrganizationDevicesStatuses_parameters.perPage = getOrganizationDevicesStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesStatuses_nodeParamType is not "str"')
                    getOrganizationDevicesStatuses_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationDevicesStatuses_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationDevicesStatuses_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesStatuses_nodeParamType is "str"');
                    getOrganizationDevicesStatuses_parameters.startingAfter = getOrganizationDevicesStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesStatuses_nodeParamType is not "str"')
                    getOrganizationDevicesStatuses_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationDevicesStatuses_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationDevicesStatuses_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesStatuses_nodeParamType is "str"');
                    getOrganizationDevicesStatuses_parameters.endingBefore = getOrganizationDevicesStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesStatuses_nodeParamType is not "str"')
                    getOrganizationDevicesStatuses_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getOrganizationDevicesStatuses(getOrganizationDevicesStatuses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationDevicesUplinksLossAndLatency') {
                var getOrganizationDevicesUplinksLossAndLatency_parameters = [];
                var getOrganizationDevicesUplinksLossAndLatency_nodeParam;
                var getOrganizationDevicesUplinksLossAndLatency_nodeParamType;
                
                
                getOrganizationDevicesUplinksLossAndLatency_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationDevicesUplinksLossAndLatency_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesUplinksLossAndLatency_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is "str"');
                    getOrganizationDevicesUplinksLossAndLatency_parameters.organizationId = getOrganizationDevicesUplinksLossAndLatency_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is not "str"')
                    getOrganizationDevicesUplinksLossAndLatency_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationDevicesUplinksLossAndLatency_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getOrganizationDevicesUplinksLossAndLatency_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesUplinksLossAndLatency_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is "str"');
                    getOrganizationDevicesUplinksLossAndLatency_parameters.t0 = getOrganizationDevicesUplinksLossAndLatency_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is not "str"')
                    getOrganizationDevicesUplinksLossAndLatency_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getOrganizationDevicesUplinksLossAndLatency_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getOrganizationDevicesUplinksLossAndLatency_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesUplinksLossAndLatency_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is "str"');
                    getOrganizationDevicesUplinksLossAndLatency_parameters.t1 = getOrganizationDevicesUplinksLossAndLatency_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is not "str"')
                    getOrganizationDevicesUplinksLossAndLatency_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getOrganizationDevicesUplinksLossAndLatency_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getOrganizationDevicesUplinksLossAndLatency_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesUplinksLossAndLatency_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is "str"');
                    getOrganizationDevicesUplinksLossAndLatency_parameters.timespan = getOrganizationDevicesUplinksLossAndLatency_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is not "str"')
                    getOrganizationDevicesUplinksLossAndLatency_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getOrganizationDevicesUplinksLossAndLatency_nodeParam = storedParamValsMap['uplink'] ||
                    RED.util.getMessageProperty(msg, "uplink");

                getOrganizationDevicesUplinksLossAndLatency_nodeParamType = storedParamTypeMap['uplink'] ||
                    RED.util.getMessageProperty(msg, "uplink");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesUplinksLossAndLatency_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is "str"');
                    getOrganizationDevicesUplinksLossAndLatency_parameters.uplink = getOrganizationDevicesUplinksLossAndLatency_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is not "str"')
                    getOrganizationDevicesUplinksLossAndLatency_parameters.uplink = RED.util.getMessageProperty(msg, "uplink");
                }
                                
                getOrganizationDevicesUplinksLossAndLatency_nodeParam = storedParamValsMap['ip'] ||
                    RED.util.getMessageProperty(msg, "ip");

                getOrganizationDevicesUplinksLossAndLatency_nodeParamType = storedParamTypeMap['ip'] ||
                    RED.util.getMessageProperty(msg, "ip");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationDevicesUplinksLossAndLatency_nodeParamType === 'str') {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is "str"');
                    getOrganizationDevicesUplinksLossAndLatency_parameters.ip = getOrganizationDevicesUplinksLossAndLatency_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationDevicesUplinksLossAndLatency_nodeParamType is not "str"')
                    getOrganizationDevicesUplinksLossAndLatency_parameters.ip = RED.util.getMessageProperty(msg, "ip");
                }
                                result = client.getOrganizationDevicesUplinksLossAndLatency(getOrganizationDevicesUplinksLossAndLatency_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationInsightMonitoredMediaServers') {
                var getOrganizationInsightMonitoredMediaServers_parameters = [];
                var getOrganizationInsightMonitoredMediaServers_nodeParam;
                var getOrganizationInsightMonitoredMediaServers_nodeParamType;
                
                
                getOrganizationInsightMonitoredMediaServers_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationInsightMonitoredMediaServers_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInsightMonitoredMediaServers_nodeParamType === 'str') {
                    //console.log('getOrganizationInsightMonitoredMediaServers_nodeParamType is "str"');
                    getOrganizationInsightMonitoredMediaServers_parameters.organizationId = getOrganizationInsightMonitoredMediaServers_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInsightMonitoredMediaServers_nodeParamType is not "str"')
                    getOrganizationInsightMonitoredMediaServers_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationInsightMonitoredMediaServers(getOrganizationInsightMonitoredMediaServers_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganizationInsightMonitoredMediaServer') {
                var createOrganizationInsightMonitoredMediaServer_parameters = [];
                var createOrganizationInsightMonitoredMediaServer_nodeParam;
                var createOrganizationInsightMonitoredMediaServer_nodeParamType;
                
                
                createOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                createOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (createOrganizationInsightMonitoredMediaServer_nodeParamType === 'str') {
                    //console.log('createOrganizationInsightMonitoredMediaServer_nodeParamType is "str"');
                    createOrganizationInsightMonitoredMediaServer_parameters.organizationId = createOrganizationInsightMonitoredMediaServer_nodeParam || undefined;
                } else {
                    //console.log('createOrganizationInsightMonitoredMediaServer_nodeParamType is not "str"')
                    createOrganizationInsightMonitoredMediaServer_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                createOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['createOrganizationInsightMonitoredMediaServer'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationInsightMonitoredMediaServer");

                createOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['createOrganizationInsightMonitoredMediaServer'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationInsightMonitoredMediaServer");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganizationInsightMonitoredMediaServer_parameters.createOrganizationInsightMonitoredMediaServer = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganizationInsightMonitoredMediaServer_nodeParam === 'object'){
                        createOrganizationInsightMonitoredMediaServer_parameters.createOrganizationInsightMonitoredMediaServer = createOrganizationInsightMonitoredMediaServer_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganizationInsightMonitoredMediaServer_nodeParam || '{}'
                        createOrganizationInsightMonitoredMediaServer_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganizationInsightMonitoredMediaServer_parameters.createOrganizationInsightMonitoredMediaServer = createOrganizationInsightMonitoredMediaServer_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganizationInsightMonitoredMediaServer_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganizationInsightMonitoredMediaServer(createOrganizationInsightMonitoredMediaServer_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationInsightMonitoredMediaServer') {
                var getOrganizationInsightMonitoredMediaServer_parameters = [];
                var getOrganizationInsightMonitoredMediaServer_nodeParam;
                var getOrganizationInsightMonitoredMediaServer_nodeParamType;
                
                
                getOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInsightMonitoredMediaServer_nodeParamType === 'str') {
                    //console.log('getOrganizationInsightMonitoredMediaServer_nodeParamType is "str"');
                    getOrganizationInsightMonitoredMediaServer_parameters.organizationId = getOrganizationInsightMonitoredMediaServer_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInsightMonitoredMediaServer_nodeParamType is not "str"')
                    getOrganizationInsightMonitoredMediaServer_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['monitoredMediaServerId'] ||
                    RED.util.getMessageProperty(msg, "monitoredMediaServerId");

                getOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['monitoredMediaServerId'] ||
                    RED.util.getMessageProperty(msg, "monitoredMediaServerId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInsightMonitoredMediaServer_nodeParamType === 'str') {
                    //console.log('getOrganizationInsightMonitoredMediaServer_nodeParamType is "str"');
                    getOrganizationInsightMonitoredMediaServer_parameters.monitoredMediaServerId = getOrganizationInsightMonitoredMediaServer_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInsightMonitoredMediaServer_nodeParamType is not "str"')
                    getOrganizationInsightMonitoredMediaServer_parameters.monitoredMediaServerId = RED.util.getMessageProperty(msg, "monitoredMediaServerId");
                }
                                result = client.getOrganizationInsightMonitoredMediaServer(getOrganizationInsightMonitoredMediaServer_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationInsightMonitoredMediaServer') {
                var updateOrganizationInsightMonitoredMediaServer_parameters = [];
                var updateOrganizationInsightMonitoredMediaServer_nodeParam;
                var updateOrganizationInsightMonitoredMediaServer_nodeParamType;
                
                
                updateOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationInsightMonitoredMediaServer_nodeParamType === 'str') {
                    //console.log('updateOrganizationInsightMonitoredMediaServer_nodeParamType is "str"');
                    updateOrganizationInsightMonitoredMediaServer_parameters.organizationId = updateOrganizationInsightMonitoredMediaServer_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationInsightMonitoredMediaServer_nodeParamType is not "str"')
                    updateOrganizationInsightMonitoredMediaServer_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['monitoredMediaServerId'] ||
                    RED.util.getMessageProperty(msg, "monitoredMediaServerId");

                updateOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['monitoredMediaServerId'] ||
                    RED.util.getMessageProperty(msg, "monitoredMediaServerId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationInsightMonitoredMediaServer_nodeParamType === 'str') {
                    //console.log('updateOrganizationInsightMonitoredMediaServer_nodeParamType is "str"');
                    updateOrganizationInsightMonitoredMediaServer_parameters.monitoredMediaServerId = updateOrganizationInsightMonitoredMediaServer_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationInsightMonitoredMediaServer_nodeParamType is not "str"')
                    updateOrganizationInsightMonitoredMediaServer_parameters.monitoredMediaServerId = RED.util.getMessageProperty(msg, "monitoredMediaServerId");
                }
                                
                updateOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['updateOrganizationInsightMonitoredMediaServer'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationInsightMonitoredMediaServer");

                updateOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['updateOrganizationInsightMonitoredMediaServer'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationInsightMonitoredMediaServer");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationInsightMonitoredMediaServer_parameters.updateOrganizationInsightMonitoredMediaServer = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationInsightMonitoredMediaServer_nodeParam === 'object'){
                        updateOrganizationInsightMonitoredMediaServer_parameters.updateOrganizationInsightMonitoredMediaServer = updateOrganizationInsightMonitoredMediaServer_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationInsightMonitoredMediaServer_nodeParam || '{}'
                        updateOrganizationInsightMonitoredMediaServer_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationInsightMonitoredMediaServer_parameters.updateOrganizationInsightMonitoredMediaServer = updateOrganizationInsightMonitoredMediaServer_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationInsightMonitoredMediaServer_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationInsightMonitoredMediaServer(updateOrganizationInsightMonitoredMediaServer_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteOrganizationInsightMonitoredMediaServer') {
                var deleteOrganizationInsightMonitoredMediaServer_parameters = [];
                var deleteOrganizationInsightMonitoredMediaServer_nodeParam;
                var deleteOrganizationInsightMonitoredMediaServer_nodeParamType;
                
                
                deleteOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                deleteOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationInsightMonitoredMediaServer_nodeParamType === 'str') {
                    //console.log('deleteOrganizationInsightMonitoredMediaServer_nodeParamType is "str"');
                    deleteOrganizationInsightMonitoredMediaServer_parameters.organizationId = deleteOrganizationInsightMonitoredMediaServer_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationInsightMonitoredMediaServer_nodeParamType is not "str"')
                    deleteOrganizationInsightMonitoredMediaServer_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                deleteOrganizationInsightMonitoredMediaServer_nodeParam = storedParamValsMap['monitoredMediaServerId'] ||
                    RED.util.getMessageProperty(msg, "monitoredMediaServerId");

                deleteOrganizationInsightMonitoredMediaServer_nodeParamType = storedParamTypeMap['monitoredMediaServerId'] ||
                    RED.util.getMessageProperty(msg, "monitoredMediaServerId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationInsightMonitoredMediaServer_nodeParamType === 'str') {
                    //console.log('deleteOrganizationInsightMonitoredMediaServer_nodeParamType is "str"');
                    deleteOrganizationInsightMonitoredMediaServer_parameters.monitoredMediaServerId = deleteOrganizationInsightMonitoredMediaServer_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationInsightMonitoredMediaServer_nodeParamType is not "str"')
                    deleteOrganizationInsightMonitoredMediaServer_parameters.monitoredMediaServerId = RED.util.getMessageProperty(msg, "monitoredMediaServerId");
                }
                                result = client.deleteOrganizationInsightMonitoredMediaServer(deleteOrganizationInsightMonitoredMediaServer_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationInventoryDevices') {
                var getOrganizationInventoryDevices_parameters = [];
                var getOrganizationInventoryDevices_nodeParam;
                var getOrganizationInventoryDevices_nodeParamType;
                
                
                getOrganizationInventoryDevices_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationInventoryDevices_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInventoryDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is "str"');
                    getOrganizationInventoryDevices_parameters.organizationId = getOrganizationInventoryDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is not "str"')
                    getOrganizationInventoryDevices_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationInventoryDevices_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationInventoryDevices_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInventoryDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is "str"');
                    getOrganizationInventoryDevices_parameters.perPage = getOrganizationInventoryDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is not "str"')
                    getOrganizationInventoryDevices_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationInventoryDevices_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationInventoryDevices_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInventoryDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is "str"');
                    getOrganizationInventoryDevices_parameters.startingAfter = getOrganizationInventoryDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is not "str"')
                    getOrganizationInventoryDevices_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationInventoryDevices_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationInventoryDevices_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInventoryDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is "str"');
                    getOrganizationInventoryDevices_parameters.endingBefore = getOrganizationInventoryDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is not "str"')
                    getOrganizationInventoryDevices_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationInventoryDevices_nodeParam = storedParamValsMap['usedState'] ||
                    RED.util.getMessageProperty(msg, "usedState");

                getOrganizationInventoryDevices_nodeParamType = storedParamTypeMap['usedState'] ||
                    RED.util.getMessageProperty(msg, "usedState");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInventoryDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is "str"');
                    getOrganizationInventoryDevices_parameters.usedState = getOrganizationInventoryDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is not "str"')
                    getOrganizationInventoryDevices_parameters.usedState = RED.util.getMessageProperty(msg, "usedState");
                }
                                
                getOrganizationInventoryDevices_nodeParam = storedParamValsMap['search'] ||
                    RED.util.getMessageProperty(msg, "search");

                getOrganizationInventoryDevices_nodeParamType = storedParamTypeMap['search'] ||
                    RED.util.getMessageProperty(msg, "search");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInventoryDevices_nodeParamType === 'str') {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is "str"');
                    getOrganizationInventoryDevices_parameters.search = getOrganizationInventoryDevices_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInventoryDevices_nodeParamType is not "str"')
                    getOrganizationInventoryDevices_parameters.search = RED.util.getMessageProperty(msg, "search");
                }
                                result = client.getOrganizationInventoryDevices(getOrganizationInventoryDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationInventoryDevice') {
                var getOrganizationInventoryDevice_parameters = [];
                var getOrganizationInventoryDevice_nodeParam;
                var getOrganizationInventoryDevice_nodeParamType;
                
                
                getOrganizationInventoryDevice_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationInventoryDevice_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInventoryDevice_nodeParamType === 'str') {
                    //console.log('getOrganizationInventoryDevice_nodeParamType is "str"');
                    getOrganizationInventoryDevice_parameters.organizationId = getOrganizationInventoryDevice_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInventoryDevice_nodeParamType is not "str"')
                    getOrganizationInventoryDevice_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationInventoryDevice_nodeParam = storedParamValsMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                getOrganizationInventoryDevice_nodeParamType = storedParamTypeMap['serial'] ||
                    RED.util.getMessageProperty(msg, "serial");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationInventoryDevice_nodeParamType === 'str') {
                    //console.log('getOrganizationInventoryDevice_nodeParamType is "str"');
                    getOrganizationInventoryDevice_parameters.serial = getOrganizationInventoryDevice_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationInventoryDevice_nodeParamType is not "str"')
                    getOrganizationInventoryDevice_parameters.serial = RED.util.getMessageProperty(msg, "serial");
                }
                                result = client.getOrganizationInventoryDevice(getOrganizationInventoryDevice_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationLicenses') {
                var getOrganizationLicenses_parameters = [];
                var getOrganizationLicenses_nodeParam;
                var getOrganizationLicenses_nodeParamType;
                
                
                getOrganizationLicenses_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationLicenses_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicenses_nodeParamType === 'str') {
                    //console.log('getOrganizationLicenses_nodeParamType is "str"');
                    getOrganizationLicenses_parameters.organizationId = getOrganizationLicenses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicenses_nodeParamType is not "str"')
                    getOrganizationLicenses_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationLicenses_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationLicenses_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicenses_nodeParamType === 'str') {
                    //console.log('getOrganizationLicenses_nodeParamType is "str"');
                    getOrganizationLicenses_parameters.perPage = getOrganizationLicenses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicenses_nodeParamType is not "str"')
                    getOrganizationLicenses_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationLicenses_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationLicenses_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicenses_nodeParamType === 'str') {
                    //console.log('getOrganizationLicenses_nodeParamType is "str"');
                    getOrganizationLicenses_parameters.startingAfter = getOrganizationLicenses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicenses_nodeParamType is not "str"')
                    getOrganizationLicenses_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationLicenses_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationLicenses_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicenses_nodeParamType === 'str') {
                    //console.log('getOrganizationLicenses_nodeParamType is "str"');
                    getOrganizationLicenses_parameters.endingBefore = getOrganizationLicenses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicenses_nodeParamType is not "str"')
                    getOrganizationLicenses_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationLicenses_nodeParam = storedParamValsMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                getOrganizationLicenses_nodeParamType = storedParamTypeMap['deviceSerial'] ||
                    RED.util.getMessageProperty(msg, "deviceSerial");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicenses_nodeParamType === 'str') {
                    //console.log('getOrganizationLicenses_nodeParamType is "str"');
                    getOrganizationLicenses_parameters.deviceSerial = getOrganizationLicenses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicenses_nodeParamType is not "str"')
                    getOrganizationLicenses_parameters.deviceSerial = RED.util.getMessageProperty(msg, "deviceSerial");
                }
                                
                getOrganizationLicenses_nodeParam = storedParamValsMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                getOrganizationLicenses_nodeParamType = storedParamTypeMap['networkId'] ||
                    RED.util.getMessageProperty(msg, "networkId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicenses_nodeParamType === 'str') {
                    //console.log('getOrganizationLicenses_nodeParamType is "str"');
                    getOrganizationLicenses_parameters.networkId = getOrganizationLicenses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicenses_nodeParamType is not "str"')
                    getOrganizationLicenses_parameters.networkId = RED.util.getMessageProperty(msg, "networkId");
                }
                                
                getOrganizationLicenses_nodeParam = storedParamValsMap['state'] ||
                    RED.util.getMessageProperty(msg, "state");

                getOrganizationLicenses_nodeParamType = storedParamTypeMap['state'] ||
                    RED.util.getMessageProperty(msg, "state");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicenses_nodeParamType === 'str') {
                    //console.log('getOrganizationLicenses_nodeParamType is "str"');
                    getOrganizationLicenses_parameters.state = getOrganizationLicenses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicenses_nodeParamType is not "str"')
                    getOrganizationLicenses_parameters.state = RED.util.getMessageProperty(msg, "state");
                }
                                result = client.getOrganizationLicenses(getOrganizationLicenses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'assignOrganizationLicensesSeats') {
                var assignOrganizationLicensesSeats_parameters = [];
                var assignOrganizationLicensesSeats_nodeParam;
                var assignOrganizationLicensesSeats_nodeParamType;
                
                
                assignOrganizationLicensesSeats_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                assignOrganizationLicensesSeats_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (assignOrganizationLicensesSeats_nodeParamType === 'str') {
                    //console.log('assignOrganizationLicensesSeats_nodeParamType is "str"');
                    assignOrganizationLicensesSeats_parameters.organizationId = assignOrganizationLicensesSeats_nodeParam || undefined;
                } else {
                    //console.log('assignOrganizationLicensesSeats_nodeParamType is not "str"')
                    assignOrganizationLicensesSeats_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                assignOrganizationLicensesSeats_nodeParam = storedParamValsMap['assignOrganizationLicensesSeats'] ||
                    RED.util.getMessageProperty(msg, "assignOrganizationLicensesSeats");

                assignOrganizationLicensesSeats_nodeParamType = storedParamTypeMap['assignOrganizationLicensesSeats'] ||
                    RED.util.getMessageProperty(msg, "assignOrganizationLicensesSeats");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        assignOrganizationLicensesSeats_parameters.assignOrganizationLicensesSeats = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof assignOrganizationLicensesSeats_nodeParam === 'object'){
                        assignOrganizationLicensesSeats_parameters.assignOrganizationLicensesSeats = assignOrganizationLicensesSeats_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = assignOrganizationLicensesSeats_nodeParam || '{}'
                        assignOrganizationLicensesSeats_nodeParam = JSON.parse(nodeParam) ; 
                        assignOrganizationLicensesSeats_parameters.assignOrganizationLicensesSeats = assignOrganizationLicensesSeats_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof assignOrganizationLicensesSeats_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.assignOrganizationLicensesSeats(assignOrganizationLicensesSeats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'moveOrganizationLicenses') {
                var moveOrganizationLicenses_parameters = [];
                var moveOrganizationLicenses_nodeParam;
                var moveOrganizationLicenses_nodeParamType;
                
                
                moveOrganizationLicenses_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                moveOrganizationLicenses_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (moveOrganizationLicenses_nodeParamType === 'str') {
                    //console.log('moveOrganizationLicenses_nodeParamType is "str"');
                    moveOrganizationLicenses_parameters.organizationId = moveOrganizationLicenses_nodeParam || undefined;
                } else {
                    //console.log('moveOrganizationLicenses_nodeParamType is not "str"')
                    moveOrganizationLicenses_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                moveOrganizationLicenses_nodeParam = storedParamValsMap['moveOrganizationLicenses'] ||
                    RED.util.getMessageProperty(msg, "moveOrganizationLicenses");

                moveOrganizationLicenses_nodeParamType = storedParamTypeMap['moveOrganizationLicenses'] ||
                    RED.util.getMessageProperty(msg, "moveOrganizationLicenses");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        moveOrganizationLicenses_parameters.moveOrganizationLicenses = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof moveOrganizationLicenses_nodeParam === 'object'){
                        moveOrganizationLicenses_parameters.moveOrganizationLicenses = moveOrganizationLicenses_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = moveOrganizationLicenses_nodeParam || '{}'
                        moveOrganizationLicenses_nodeParam = JSON.parse(nodeParam) ; 
                        moveOrganizationLicenses_parameters.moveOrganizationLicenses = moveOrganizationLicenses_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof moveOrganizationLicenses_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.moveOrganizationLicenses(moveOrganizationLicenses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'moveOrganizationLicensesSeats') {
                var moveOrganizationLicensesSeats_parameters = [];
                var moveOrganizationLicensesSeats_nodeParam;
                var moveOrganizationLicensesSeats_nodeParamType;
                
                
                moveOrganizationLicensesSeats_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                moveOrganizationLicensesSeats_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (moveOrganizationLicensesSeats_nodeParamType === 'str') {
                    //console.log('moveOrganizationLicensesSeats_nodeParamType is "str"');
                    moveOrganizationLicensesSeats_parameters.organizationId = moveOrganizationLicensesSeats_nodeParam || undefined;
                } else {
                    //console.log('moveOrganizationLicensesSeats_nodeParamType is not "str"')
                    moveOrganizationLicensesSeats_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                moveOrganizationLicensesSeats_nodeParam = storedParamValsMap['moveOrganizationLicensesSeats'] ||
                    RED.util.getMessageProperty(msg, "moveOrganizationLicensesSeats");

                moveOrganizationLicensesSeats_nodeParamType = storedParamTypeMap['moveOrganizationLicensesSeats'] ||
                    RED.util.getMessageProperty(msg, "moveOrganizationLicensesSeats");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        moveOrganizationLicensesSeats_parameters.moveOrganizationLicensesSeats = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof moveOrganizationLicensesSeats_nodeParam === 'object'){
                        moveOrganizationLicensesSeats_parameters.moveOrganizationLicensesSeats = moveOrganizationLicensesSeats_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = moveOrganizationLicensesSeats_nodeParam || '{}'
                        moveOrganizationLicensesSeats_nodeParam = JSON.parse(nodeParam) ; 
                        moveOrganizationLicensesSeats_parameters.moveOrganizationLicensesSeats = moveOrganizationLicensesSeats_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof moveOrganizationLicensesSeats_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.moveOrganizationLicensesSeats(moveOrganizationLicensesSeats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationLicensesOverview') {
                var getOrganizationLicensesOverview_parameters = [];
                var getOrganizationLicensesOverview_nodeParam;
                var getOrganizationLicensesOverview_nodeParamType;
                
                
                getOrganizationLicensesOverview_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationLicensesOverview_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicensesOverview_nodeParamType === 'str') {
                    //console.log('getOrganizationLicensesOverview_nodeParamType is "str"');
                    getOrganizationLicensesOverview_parameters.organizationId = getOrganizationLicensesOverview_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicensesOverview_nodeParamType is not "str"')
                    getOrganizationLicensesOverview_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationLicensesOverview(getOrganizationLicensesOverview_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'renewOrganizationLicensesSeats') {
                var renewOrganizationLicensesSeats_parameters = [];
                var renewOrganizationLicensesSeats_nodeParam;
                var renewOrganizationLicensesSeats_nodeParamType;
                
                
                renewOrganizationLicensesSeats_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                renewOrganizationLicensesSeats_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (renewOrganizationLicensesSeats_nodeParamType === 'str') {
                    //console.log('renewOrganizationLicensesSeats_nodeParamType is "str"');
                    renewOrganizationLicensesSeats_parameters.organizationId = renewOrganizationLicensesSeats_nodeParam || undefined;
                } else {
                    //console.log('renewOrganizationLicensesSeats_nodeParamType is not "str"')
                    renewOrganizationLicensesSeats_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                renewOrganizationLicensesSeats_nodeParam = storedParamValsMap['renewOrganizationLicensesSeats'] ||
                    RED.util.getMessageProperty(msg, "renewOrganizationLicensesSeats");

                renewOrganizationLicensesSeats_nodeParamType = storedParamTypeMap['renewOrganizationLicensesSeats'] ||
                    RED.util.getMessageProperty(msg, "renewOrganizationLicensesSeats");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        renewOrganizationLicensesSeats_parameters.renewOrganizationLicensesSeats = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof renewOrganizationLicensesSeats_nodeParam === 'object'){
                        renewOrganizationLicensesSeats_parameters.renewOrganizationLicensesSeats = renewOrganizationLicensesSeats_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = renewOrganizationLicensesSeats_nodeParam || '{}'
                        renewOrganizationLicensesSeats_nodeParam = JSON.parse(nodeParam) ; 
                        renewOrganizationLicensesSeats_parameters.renewOrganizationLicensesSeats = renewOrganizationLicensesSeats_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof renewOrganizationLicensesSeats_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.renewOrganizationLicensesSeats(renewOrganizationLicensesSeats_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationLicense') {
                var getOrganizationLicense_parameters = [];
                var getOrganizationLicense_nodeParam;
                var getOrganizationLicense_nodeParamType;
                
                
                getOrganizationLicense_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationLicense_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicense_nodeParamType === 'str') {
                    //console.log('getOrganizationLicense_nodeParamType is "str"');
                    getOrganizationLicense_parameters.organizationId = getOrganizationLicense_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicense_nodeParamType is not "str"')
                    getOrganizationLicense_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationLicense_nodeParam = storedParamValsMap['licenseId'] ||
                    RED.util.getMessageProperty(msg, "licenseId");

                getOrganizationLicense_nodeParamType = storedParamTypeMap['licenseId'] ||
                    RED.util.getMessageProperty(msg, "licenseId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLicense_nodeParamType === 'str') {
                    //console.log('getOrganizationLicense_nodeParamType is "str"');
                    getOrganizationLicense_parameters.licenseId = getOrganizationLicense_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLicense_nodeParamType is not "str"')
                    getOrganizationLicense_parameters.licenseId = RED.util.getMessageProperty(msg, "licenseId");
                }
                                result = client.getOrganizationLicense(getOrganizationLicense_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationLicense') {
                var updateOrganizationLicense_parameters = [];
                var updateOrganizationLicense_nodeParam;
                var updateOrganizationLicense_nodeParamType;
                
                
                updateOrganizationLicense_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationLicense_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationLicense_nodeParamType === 'str') {
                    //console.log('updateOrganizationLicense_nodeParamType is "str"');
                    updateOrganizationLicense_parameters.organizationId = updateOrganizationLicense_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationLicense_nodeParamType is not "str"')
                    updateOrganizationLicense_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationLicense_nodeParam = storedParamValsMap['licenseId'] ||
                    RED.util.getMessageProperty(msg, "licenseId");

                updateOrganizationLicense_nodeParamType = storedParamTypeMap['licenseId'] ||
                    RED.util.getMessageProperty(msg, "licenseId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationLicense_nodeParamType === 'str') {
                    //console.log('updateOrganizationLicense_nodeParamType is "str"');
                    updateOrganizationLicense_parameters.licenseId = updateOrganizationLicense_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationLicense_nodeParamType is not "str"')
                    updateOrganizationLicense_parameters.licenseId = RED.util.getMessageProperty(msg, "licenseId");
                }
                                
                updateOrganizationLicense_nodeParam = storedParamValsMap['updateOrganizationLicense'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationLicense");

                updateOrganizationLicense_nodeParamType = storedParamTypeMap['updateOrganizationLicense'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationLicense");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationLicense_parameters.updateOrganizationLicense = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationLicense_nodeParam === 'object'){
                        updateOrganizationLicense_parameters.updateOrganizationLicense = updateOrganizationLicense_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationLicense_nodeParam || '{}'
                        updateOrganizationLicense_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationLicense_parameters.updateOrganizationLicense = updateOrganizationLicense_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationLicense_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationLicense(updateOrganizationLicense_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationLoginSecurity') {
                var getOrganizationLoginSecurity_parameters = [];
                var getOrganizationLoginSecurity_nodeParam;
                var getOrganizationLoginSecurity_nodeParamType;
                
                
                getOrganizationLoginSecurity_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationLoginSecurity_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationLoginSecurity_nodeParamType === 'str') {
                    //console.log('getOrganizationLoginSecurity_nodeParamType is "str"');
                    getOrganizationLoginSecurity_parameters.organizationId = getOrganizationLoginSecurity_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationLoginSecurity_nodeParamType is not "str"')
                    getOrganizationLoginSecurity_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationLoginSecurity(getOrganizationLoginSecurity_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationLoginSecurity') {
                var updateOrganizationLoginSecurity_parameters = [];
                var updateOrganizationLoginSecurity_nodeParam;
                var updateOrganizationLoginSecurity_nodeParamType;
                
                
                updateOrganizationLoginSecurity_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationLoginSecurity_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationLoginSecurity_nodeParamType === 'str') {
                    //console.log('updateOrganizationLoginSecurity_nodeParamType is "str"');
                    updateOrganizationLoginSecurity_parameters.organizationId = updateOrganizationLoginSecurity_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationLoginSecurity_nodeParamType is not "str"')
                    updateOrganizationLoginSecurity_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationLoginSecurity_nodeParam = storedParamValsMap['updateOrganizationLoginSecurity'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationLoginSecurity");

                updateOrganizationLoginSecurity_nodeParamType = storedParamTypeMap['updateOrganizationLoginSecurity'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationLoginSecurity");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationLoginSecurity_parameters.updateOrganizationLoginSecurity = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationLoginSecurity_nodeParam === 'object'){
                        updateOrganizationLoginSecurity_parameters.updateOrganizationLoginSecurity = updateOrganizationLoginSecurity_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationLoginSecurity_nodeParam || '{}'
                        updateOrganizationLoginSecurity_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationLoginSecurity_parameters.updateOrganizationLoginSecurity = updateOrganizationLoginSecurity_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationLoginSecurity_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationLoginSecurity(updateOrganizationLoginSecurity_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationNetworks') {
                var getOrganizationNetworks_parameters = [];
                var getOrganizationNetworks_nodeParam;
                var getOrganizationNetworks_nodeParamType;
                
                
                getOrganizationNetworks_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationNetworks_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationNetworks_nodeParamType === 'str') {
                    //console.log('getOrganizationNetworks_nodeParamType is "str"');
                    getOrganizationNetworks_parameters.organizationId = getOrganizationNetworks_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationNetworks_nodeParamType is not "str"')
                    getOrganizationNetworks_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationNetworks_nodeParam = storedParamValsMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                getOrganizationNetworks_nodeParamType = storedParamTypeMap['configTemplateId'] ||
                    RED.util.getMessageProperty(msg, "configTemplateId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationNetworks_nodeParamType === 'str') {
                    //console.log('getOrganizationNetworks_nodeParamType is "str"');
                    getOrganizationNetworks_parameters.configTemplateId = getOrganizationNetworks_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationNetworks_nodeParamType is not "str"')
                    getOrganizationNetworks_parameters.configTemplateId = RED.util.getMessageProperty(msg, "configTemplateId");
                }
                                
                getOrganizationNetworks_nodeParam = storedParamValsMap['tags'] ||
                    RED.util.getMessageProperty(msg, "tags");

                getOrganizationNetworks_nodeParamType = storedParamTypeMap['tags'] ||
                    RED.util.getMessageProperty(msg, "tags");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationNetworks_nodeParamType === 'str') {
                    //console.log('getOrganizationNetworks_nodeParamType is "str"');
                    getOrganizationNetworks_parameters.tags = getOrganizationNetworks_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationNetworks_nodeParamType is not "str"')
                    getOrganizationNetworks_parameters.tags = RED.util.getMessageProperty(msg, "tags");
                }
                                
                getOrganizationNetworks_nodeParam = storedParamValsMap['tagsFilterType'] ||
                    RED.util.getMessageProperty(msg, "tagsFilterType");

                getOrganizationNetworks_nodeParamType = storedParamTypeMap['tagsFilterType'] ||
                    RED.util.getMessageProperty(msg, "tagsFilterType");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationNetworks_nodeParamType === 'str') {
                    //console.log('getOrganizationNetworks_nodeParamType is "str"');
                    getOrganizationNetworks_parameters.tagsFilterType = getOrganizationNetworks_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationNetworks_nodeParamType is not "str"')
                    getOrganizationNetworks_parameters.tagsFilterType = RED.util.getMessageProperty(msg, "tagsFilterType");
                }
                                
                getOrganizationNetworks_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationNetworks_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationNetworks_nodeParamType === 'str') {
                    //console.log('getOrganizationNetworks_nodeParamType is "str"');
                    getOrganizationNetworks_parameters.perPage = getOrganizationNetworks_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationNetworks_nodeParamType is not "str"')
                    getOrganizationNetworks_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationNetworks_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationNetworks_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationNetworks_nodeParamType === 'str') {
                    //console.log('getOrganizationNetworks_nodeParamType is "str"');
                    getOrganizationNetworks_parameters.startingAfter = getOrganizationNetworks_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationNetworks_nodeParamType is not "str"')
                    getOrganizationNetworks_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationNetworks_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationNetworks_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationNetworks_nodeParamType === 'str') {
                    //console.log('getOrganizationNetworks_nodeParamType is "str"');
                    getOrganizationNetworks_parameters.endingBefore = getOrganizationNetworks_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationNetworks_nodeParamType is not "str"')
                    getOrganizationNetworks_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                result = client.getOrganizationNetworks(getOrganizationNetworks_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganizationNetwork') {
                var createOrganizationNetwork_parameters = [];
                var createOrganizationNetwork_nodeParam;
                var createOrganizationNetwork_nodeParamType;
                
                
                createOrganizationNetwork_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                createOrganizationNetwork_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (createOrganizationNetwork_nodeParamType === 'str') {
                    //console.log('createOrganizationNetwork_nodeParamType is "str"');
                    createOrganizationNetwork_parameters.organizationId = createOrganizationNetwork_nodeParam || undefined;
                } else {
                    //console.log('createOrganizationNetwork_nodeParamType is not "str"')
                    createOrganizationNetwork_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                createOrganizationNetwork_nodeParam = storedParamValsMap['createOrganizationNetwork'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationNetwork");

                createOrganizationNetwork_nodeParamType = storedParamTypeMap['createOrganizationNetwork'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationNetwork");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganizationNetwork_parameters.createOrganizationNetwork = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganizationNetwork_nodeParam === 'object'){
                        createOrganizationNetwork_parameters.createOrganizationNetwork = createOrganizationNetwork_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganizationNetwork_nodeParam || '{}'
                        createOrganizationNetwork_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganizationNetwork_parameters.createOrganizationNetwork = createOrganizationNetwork_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganizationNetwork_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganizationNetwork(createOrganizationNetwork_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'combineOrganizationNetworks') {
                var combineOrganizationNetworks_parameters = [];
                var combineOrganizationNetworks_nodeParam;
                var combineOrganizationNetworks_nodeParamType;
                
                
                combineOrganizationNetworks_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                combineOrganizationNetworks_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (combineOrganizationNetworks_nodeParamType === 'str') {
                    //console.log('combineOrganizationNetworks_nodeParamType is "str"');
                    combineOrganizationNetworks_parameters.organizationId = combineOrganizationNetworks_nodeParam || undefined;
                } else {
                    //console.log('combineOrganizationNetworks_nodeParamType is not "str"')
                    combineOrganizationNetworks_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                combineOrganizationNetworks_nodeParam = storedParamValsMap['combineOrganizationNetworks'] ||
                    RED.util.getMessageProperty(msg, "combineOrganizationNetworks");

                combineOrganizationNetworks_nodeParamType = storedParamTypeMap['combineOrganizationNetworks'] ||
                    RED.util.getMessageProperty(msg, "combineOrganizationNetworks");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        combineOrganizationNetworks_parameters.combineOrganizationNetworks = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof combineOrganizationNetworks_nodeParam === 'object'){
                        combineOrganizationNetworks_parameters.combineOrganizationNetworks = combineOrganizationNetworks_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = combineOrganizationNetworks_nodeParam || '{}'
                        combineOrganizationNetworks_nodeParam = JSON.parse(nodeParam) ; 
                        combineOrganizationNetworks_parameters.combineOrganizationNetworks = combineOrganizationNetworks_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof combineOrganizationNetworks_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.combineOrganizationNetworks(combineOrganizationNetworks_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationOpenapiSpec') {
                var getOrganizationOpenapiSpec_parameters = [];
                var getOrganizationOpenapiSpec_nodeParam;
                var getOrganizationOpenapiSpec_nodeParamType;
                
                
                getOrganizationOpenapiSpec_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationOpenapiSpec_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationOpenapiSpec_nodeParamType === 'str') {
                    //console.log('getOrganizationOpenapiSpec_nodeParamType is "str"');
                    getOrganizationOpenapiSpec_parameters.organizationId = getOrganizationOpenapiSpec_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationOpenapiSpec_nodeParamType is not "str"')
                    getOrganizationOpenapiSpec_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationOpenapiSpec(getOrganizationOpenapiSpec_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSaml') {
                var getOrganizationSaml_parameters = [];
                var getOrganizationSaml_nodeParam;
                var getOrganizationSaml_nodeParamType;
                
                
                getOrganizationSaml_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSaml_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSaml_nodeParamType === 'str') {
                    //console.log('getOrganizationSaml_nodeParamType is "str"');
                    getOrganizationSaml_parameters.organizationId = getOrganizationSaml_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSaml_nodeParamType is not "str"')
                    getOrganizationSaml_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationSaml(getOrganizationSaml_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationSaml') {
                var updateOrganizationSaml_parameters = [];
                var updateOrganizationSaml_nodeParam;
                var updateOrganizationSaml_nodeParamType;
                
                
                updateOrganizationSaml_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationSaml_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationSaml_nodeParamType === 'str') {
                    //console.log('updateOrganizationSaml_nodeParamType is "str"');
                    updateOrganizationSaml_parameters.organizationId = updateOrganizationSaml_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationSaml_nodeParamType is not "str"')
                    updateOrganizationSaml_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationSaml_nodeParam = storedParamValsMap['updateOrganizationSaml'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationSaml");

                updateOrganizationSaml_nodeParamType = storedParamTypeMap['updateOrganizationSaml'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationSaml");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationSaml_parameters.updateOrganizationSaml = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationSaml_nodeParam === 'object'){
                        updateOrganizationSaml_parameters.updateOrganizationSaml = updateOrganizationSaml_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationSaml_nodeParam || '{}'
                        updateOrganizationSaml_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationSaml_parameters.updateOrganizationSaml = updateOrganizationSaml_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationSaml_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationSaml(updateOrganizationSaml_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSamlIdps') {
                var getOrganizationSamlIdps_parameters = [];
                var getOrganizationSamlIdps_nodeParam;
                var getOrganizationSamlIdps_nodeParamType;
                
                
                getOrganizationSamlIdps_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSamlIdps_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSamlIdps_nodeParamType === 'str') {
                    //console.log('getOrganizationSamlIdps_nodeParamType is "str"');
                    getOrganizationSamlIdps_parameters.organizationId = getOrganizationSamlIdps_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSamlIdps_nodeParamType is not "str"')
                    getOrganizationSamlIdps_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationSamlIdps(getOrganizationSamlIdps_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganizationSamlIdp') {
                var createOrganizationSamlIdp_parameters = [];
                var createOrganizationSamlIdp_nodeParam;
                var createOrganizationSamlIdp_nodeParamType;
                
                
                createOrganizationSamlIdp_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                createOrganizationSamlIdp_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (createOrganizationSamlIdp_nodeParamType === 'str') {
                    //console.log('createOrganizationSamlIdp_nodeParamType is "str"');
                    createOrganizationSamlIdp_parameters.organizationId = createOrganizationSamlIdp_nodeParam || undefined;
                } else {
                    //console.log('createOrganizationSamlIdp_nodeParamType is not "str"')
                    createOrganizationSamlIdp_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                createOrganizationSamlIdp_nodeParam = storedParamValsMap['createOrganizationSamlIdp'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationSamlIdp");

                createOrganizationSamlIdp_nodeParamType = storedParamTypeMap['createOrganizationSamlIdp'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationSamlIdp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganizationSamlIdp_parameters.createOrganizationSamlIdp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganizationSamlIdp_nodeParam === 'object'){
                        createOrganizationSamlIdp_parameters.createOrganizationSamlIdp = createOrganizationSamlIdp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganizationSamlIdp_nodeParam || '{}'
                        createOrganizationSamlIdp_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganizationSamlIdp_parameters.createOrganizationSamlIdp = createOrganizationSamlIdp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganizationSamlIdp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganizationSamlIdp(createOrganizationSamlIdp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationSamlIdp') {
                var updateOrganizationSamlIdp_parameters = [];
                var updateOrganizationSamlIdp_nodeParam;
                var updateOrganizationSamlIdp_nodeParamType;
                
                
                updateOrganizationSamlIdp_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationSamlIdp_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationSamlIdp_nodeParamType === 'str') {
                    //console.log('updateOrganizationSamlIdp_nodeParamType is "str"');
                    updateOrganizationSamlIdp_parameters.organizationId = updateOrganizationSamlIdp_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationSamlIdp_nodeParamType is not "str"')
                    updateOrganizationSamlIdp_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationSamlIdp_nodeParam = storedParamValsMap['idpId'] ||
                    RED.util.getMessageProperty(msg, "idpId");

                updateOrganizationSamlIdp_nodeParamType = storedParamTypeMap['idpId'] ||
                    RED.util.getMessageProperty(msg, "idpId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationSamlIdp_nodeParamType === 'str') {
                    //console.log('updateOrganizationSamlIdp_nodeParamType is "str"');
                    updateOrganizationSamlIdp_parameters.idpId = updateOrganizationSamlIdp_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationSamlIdp_nodeParamType is not "str"')
                    updateOrganizationSamlIdp_parameters.idpId = RED.util.getMessageProperty(msg, "idpId");
                }
                                
                updateOrganizationSamlIdp_nodeParam = storedParamValsMap['updateOrganizationSamlIdp'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationSamlIdp");

                updateOrganizationSamlIdp_nodeParamType = storedParamTypeMap['updateOrganizationSamlIdp'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationSamlIdp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationSamlIdp_parameters.updateOrganizationSamlIdp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationSamlIdp_nodeParam === 'object'){
                        updateOrganizationSamlIdp_parameters.updateOrganizationSamlIdp = updateOrganizationSamlIdp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationSamlIdp_nodeParam || '{}'
                        updateOrganizationSamlIdp_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationSamlIdp_parameters.updateOrganizationSamlIdp = updateOrganizationSamlIdp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationSamlIdp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationSamlIdp(updateOrganizationSamlIdp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSamlIdp') {
                var getOrganizationSamlIdp_parameters = [];
                var getOrganizationSamlIdp_nodeParam;
                var getOrganizationSamlIdp_nodeParamType;
                
                
                getOrganizationSamlIdp_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSamlIdp_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSamlIdp_nodeParamType === 'str') {
                    //console.log('getOrganizationSamlIdp_nodeParamType is "str"');
                    getOrganizationSamlIdp_parameters.organizationId = getOrganizationSamlIdp_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSamlIdp_nodeParamType is not "str"')
                    getOrganizationSamlIdp_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationSamlIdp_nodeParam = storedParamValsMap['idpId'] ||
                    RED.util.getMessageProperty(msg, "idpId");

                getOrganizationSamlIdp_nodeParamType = storedParamTypeMap['idpId'] ||
                    RED.util.getMessageProperty(msg, "idpId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSamlIdp_nodeParamType === 'str') {
                    //console.log('getOrganizationSamlIdp_nodeParamType is "str"');
                    getOrganizationSamlIdp_parameters.idpId = getOrganizationSamlIdp_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSamlIdp_nodeParamType is not "str"')
                    getOrganizationSamlIdp_parameters.idpId = RED.util.getMessageProperty(msg, "idpId");
                }
                                result = client.getOrganizationSamlIdp(getOrganizationSamlIdp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteOrganizationSamlIdp') {
                var deleteOrganizationSamlIdp_parameters = [];
                var deleteOrganizationSamlIdp_nodeParam;
                var deleteOrganizationSamlIdp_nodeParamType;
                
                
                deleteOrganizationSamlIdp_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                deleteOrganizationSamlIdp_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationSamlIdp_nodeParamType === 'str') {
                    //console.log('deleteOrganizationSamlIdp_nodeParamType is "str"');
                    deleteOrganizationSamlIdp_parameters.organizationId = deleteOrganizationSamlIdp_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationSamlIdp_nodeParamType is not "str"')
                    deleteOrganizationSamlIdp_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                deleteOrganizationSamlIdp_nodeParam = storedParamValsMap['idpId'] ||
                    RED.util.getMessageProperty(msg, "idpId");

                deleteOrganizationSamlIdp_nodeParamType = storedParamTypeMap['idpId'] ||
                    RED.util.getMessageProperty(msg, "idpId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationSamlIdp_nodeParamType === 'str') {
                    //console.log('deleteOrganizationSamlIdp_nodeParamType is "str"');
                    deleteOrganizationSamlIdp_parameters.idpId = deleteOrganizationSamlIdp_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationSamlIdp_nodeParamType is not "str"')
                    deleteOrganizationSamlIdp_parameters.idpId = RED.util.getMessageProperty(msg, "idpId");
                }
                                result = client.deleteOrganizationSamlIdp(deleteOrganizationSamlIdp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSamlRoles') {
                var getOrganizationSamlRoles_parameters = [];
                var getOrganizationSamlRoles_nodeParam;
                var getOrganizationSamlRoles_nodeParamType;
                
                
                getOrganizationSamlRoles_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSamlRoles_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSamlRoles_nodeParamType === 'str') {
                    //console.log('getOrganizationSamlRoles_nodeParamType is "str"');
                    getOrganizationSamlRoles_parameters.organizationId = getOrganizationSamlRoles_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSamlRoles_nodeParamType is not "str"')
                    getOrganizationSamlRoles_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationSamlRoles(getOrganizationSamlRoles_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'createOrganizationSamlRole') {
                var createOrganizationSamlRole_parameters = [];
                var createOrganizationSamlRole_nodeParam;
                var createOrganizationSamlRole_nodeParamType;
                
                
                createOrganizationSamlRole_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                createOrganizationSamlRole_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (createOrganizationSamlRole_nodeParamType === 'str') {
                    //console.log('createOrganizationSamlRole_nodeParamType is "str"');
                    createOrganizationSamlRole_parameters.organizationId = createOrganizationSamlRole_nodeParam || undefined;
                } else {
                    //console.log('createOrganizationSamlRole_nodeParamType is not "str"')
                    createOrganizationSamlRole_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                createOrganizationSamlRole_nodeParam = storedParamValsMap['createOrganizationSamlRole'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationSamlRole");

                createOrganizationSamlRole_nodeParamType = storedParamTypeMap['createOrganizationSamlRole'] ||
                    RED.util.getMessageProperty(msg, "createOrganizationSamlRole");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        createOrganizationSamlRole_parameters.createOrganizationSamlRole = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof createOrganizationSamlRole_nodeParam === 'object'){
                        createOrganizationSamlRole_parameters.createOrganizationSamlRole = createOrganizationSamlRole_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = createOrganizationSamlRole_nodeParam || '{}'
                        createOrganizationSamlRole_nodeParam = JSON.parse(nodeParam) ; 
                        createOrganizationSamlRole_parameters.createOrganizationSamlRole = createOrganizationSamlRole_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof createOrganizationSamlRole_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.createOrganizationSamlRole(createOrganizationSamlRole_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSamlRole') {
                var getOrganizationSamlRole_parameters = [];
                var getOrganizationSamlRole_nodeParam;
                var getOrganizationSamlRole_nodeParamType;
                
                
                getOrganizationSamlRole_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSamlRole_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSamlRole_nodeParamType === 'str') {
                    //console.log('getOrganizationSamlRole_nodeParamType is "str"');
                    getOrganizationSamlRole_parameters.organizationId = getOrganizationSamlRole_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSamlRole_nodeParamType is not "str"')
                    getOrganizationSamlRole_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationSamlRole_nodeParam = storedParamValsMap['samlRoleId'] ||
                    RED.util.getMessageProperty(msg, "samlRoleId");

                getOrganizationSamlRole_nodeParamType = storedParamTypeMap['samlRoleId'] ||
                    RED.util.getMessageProperty(msg, "samlRoleId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSamlRole_nodeParamType === 'str') {
                    //console.log('getOrganizationSamlRole_nodeParamType is "str"');
                    getOrganizationSamlRole_parameters.samlRoleId = getOrganizationSamlRole_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSamlRole_nodeParamType is not "str"')
                    getOrganizationSamlRole_parameters.samlRoleId = RED.util.getMessageProperty(msg, "samlRoleId");
                }
                                result = client.getOrganizationSamlRole(getOrganizationSamlRole_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationSamlRole') {
                var updateOrganizationSamlRole_parameters = [];
                var updateOrganizationSamlRole_nodeParam;
                var updateOrganizationSamlRole_nodeParamType;
                
                
                updateOrganizationSamlRole_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationSamlRole_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationSamlRole_nodeParamType === 'str') {
                    //console.log('updateOrganizationSamlRole_nodeParamType is "str"');
                    updateOrganizationSamlRole_parameters.organizationId = updateOrganizationSamlRole_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationSamlRole_nodeParamType is not "str"')
                    updateOrganizationSamlRole_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationSamlRole_nodeParam = storedParamValsMap['samlRoleId'] ||
                    RED.util.getMessageProperty(msg, "samlRoleId");

                updateOrganizationSamlRole_nodeParamType = storedParamTypeMap['samlRoleId'] ||
                    RED.util.getMessageProperty(msg, "samlRoleId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationSamlRole_nodeParamType === 'str') {
                    //console.log('updateOrganizationSamlRole_nodeParamType is "str"');
                    updateOrganizationSamlRole_parameters.samlRoleId = updateOrganizationSamlRole_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationSamlRole_nodeParamType is not "str"')
                    updateOrganizationSamlRole_parameters.samlRoleId = RED.util.getMessageProperty(msg, "samlRoleId");
                }
                                
                updateOrganizationSamlRole_nodeParam = storedParamValsMap['updateOrganizationSamlRole'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationSamlRole");

                updateOrganizationSamlRole_nodeParamType = storedParamTypeMap['updateOrganizationSamlRole'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationSamlRole");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationSamlRole_parameters.updateOrganizationSamlRole = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationSamlRole_nodeParam === 'object'){
                        updateOrganizationSamlRole_parameters.updateOrganizationSamlRole = updateOrganizationSamlRole_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationSamlRole_nodeParam || '{}'
                        updateOrganizationSamlRole_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationSamlRole_parameters.updateOrganizationSamlRole = updateOrganizationSamlRole_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationSamlRole_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationSamlRole(updateOrganizationSamlRole_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'deleteOrganizationSamlRole') {
                var deleteOrganizationSamlRole_parameters = [];
                var deleteOrganizationSamlRole_nodeParam;
                var deleteOrganizationSamlRole_nodeParamType;
                
                
                deleteOrganizationSamlRole_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                deleteOrganizationSamlRole_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationSamlRole_nodeParamType === 'str') {
                    //console.log('deleteOrganizationSamlRole_nodeParamType is "str"');
                    deleteOrganizationSamlRole_parameters.organizationId = deleteOrganizationSamlRole_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationSamlRole_nodeParamType is not "str"')
                    deleteOrganizationSamlRole_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                deleteOrganizationSamlRole_nodeParam = storedParamValsMap['samlRoleId'] ||
                    RED.util.getMessageProperty(msg, "samlRoleId");

                deleteOrganizationSamlRole_nodeParamType = storedParamTypeMap['samlRoleId'] ||
                    RED.util.getMessageProperty(msg, "samlRoleId");

                // Check if its the body param

                // notBodyParam                                            
                if (deleteOrganizationSamlRole_nodeParamType === 'str') {
                    //console.log('deleteOrganizationSamlRole_nodeParamType is "str"');
                    deleteOrganizationSamlRole_parameters.samlRoleId = deleteOrganizationSamlRole_nodeParam || undefined;
                } else {
                    //console.log('deleteOrganizationSamlRole_nodeParamType is not "str"')
                    deleteOrganizationSamlRole_parameters.samlRoleId = RED.util.getMessageProperty(msg, "samlRoleId");
                }
                                result = client.deleteOrganizationSamlRole(deleteOrganizationSamlRole_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSmApnsCert') {
                var getOrganizationSmApnsCert_parameters = [];
                var getOrganizationSmApnsCert_nodeParam;
                var getOrganizationSmApnsCert_nodeParamType;
                
                
                getOrganizationSmApnsCert_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSmApnsCert_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSmApnsCert_nodeParamType === 'str') {
                    //console.log('getOrganizationSmApnsCert_nodeParamType is "str"');
                    getOrganizationSmApnsCert_parameters.organizationId = getOrganizationSmApnsCert_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSmApnsCert_nodeParamType is not "str"')
                    getOrganizationSmApnsCert_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationSmApnsCert(getOrganizationSmApnsCert_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSmVppAccounts') {
                var getOrganizationSmVppAccounts_parameters = [];
                var getOrganizationSmVppAccounts_nodeParam;
                var getOrganizationSmVppAccounts_nodeParamType;
                
                
                getOrganizationSmVppAccounts_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSmVppAccounts_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSmVppAccounts_nodeParamType === 'str') {
                    //console.log('getOrganizationSmVppAccounts_nodeParamType is "str"');
                    getOrganizationSmVppAccounts_parameters.organizationId = getOrganizationSmVppAccounts_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSmVppAccounts_nodeParamType is not "str"')
                    getOrganizationSmVppAccounts_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationSmVppAccounts(getOrganizationSmVppAccounts_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSmVppAccount') {
                var getOrganizationSmVppAccount_parameters = [];
                var getOrganizationSmVppAccount_nodeParam;
                var getOrganizationSmVppAccount_nodeParamType;
                
                
                getOrganizationSmVppAccount_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSmVppAccount_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSmVppAccount_nodeParamType === 'str') {
                    //console.log('getOrganizationSmVppAccount_nodeParamType is "str"');
                    getOrganizationSmVppAccount_parameters.organizationId = getOrganizationSmVppAccount_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSmVppAccount_nodeParamType is not "str"')
                    getOrganizationSmVppAccount_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationSmVppAccount_nodeParam = storedParamValsMap['vppAccountId'] ||
                    RED.util.getMessageProperty(msg, "vppAccountId");

                getOrganizationSmVppAccount_nodeParamType = storedParamTypeMap['vppAccountId'] ||
                    RED.util.getMessageProperty(msg, "vppAccountId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSmVppAccount_nodeParamType === 'str') {
                    //console.log('getOrganizationSmVppAccount_nodeParamType is "str"');
                    getOrganizationSmVppAccount_parameters.vppAccountId = getOrganizationSmVppAccount_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSmVppAccount_nodeParamType is not "str"')
                    getOrganizationSmVppAccount_parameters.vppAccountId = RED.util.getMessageProperty(msg, "vppAccountId");
                }
                                result = client.getOrganizationSmVppAccount(getOrganizationSmVppAccount_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationSnmp') {
                var getOrganizationSnmp_parameters = [];
                var getOrganizationSnmp_nodeParam;
                var getOrganizationSnmp_nodeParamType;
                
                
                getOrganizationSnmp_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationSnmp_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationSnmp_nodeParamType === 'str') {
                    //console.log('getOrganizationSnmp_nodeParamType is "str"');
                    getOrganizationSnmp_parameters.organizationId = getOrganizationSnmp_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationSnmp_nodeParamType is not "str"')
                    getOrganizationSnmp_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationSnmp(getOrganizationSnmp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'updateOrganizationSnmp') {
                var updateOrganizationSnmp_parameters = [];
                var updateOrganizationSnmp_nodeParam;
                var updateOrganizationSnmp_nodeParamType;
                
                
                updateOrganizationSnmp_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                updateOrganizationSnmp_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (updateOrganizationSnmp_nodeParamType === 'str') {
                    //console.log('updateOrganizationSnmp_nodeParamType is "str"');
                    updateOrganizationSnmp_parameters.organizationId = updateOrganizationSnmp_nodeParam || undefined;
                } else {
                    //console.log('updateOrganizationSnmp_nodeParamType is not "str"')
                    updateOrganizationSnmp_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                updateOrganizationSnmp_nodeParam = storedParamValsMap['updateOrganizationSnmp'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationSnmp");

                updateOrganizationSnmp_nodeParamType = storedParamTypeMap['updateOrganizationSnmp'] ||
                    RED.util.getMessageProperty(msg, "updateOrganizationSnmp");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        updateOrganizationSnmp_parameters.updateOrganizationSnmp = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof updateOrganizationSnmp_nodeParam === 'object'){
                        updateOrganizationSnmp_parameters.updateOrganizationSnmp = updateOrganizationSnmp_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = updateOrganizationSnmp_nodeParam || '{}'
                        updateOrganizationSnmp_nodeParam = JSON.parse(nodeParam) ; 
                        updateOrganizationSnmp_parameters.updateOrganizationSnmp = updateOrganizationSnmp_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof updateOrganizationSnmp_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.updateOrganizationSnmp(updateOrganizationSnmp_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'cloneOrganizationSwitchDevices') {
                var cloneOrganizationSwitchDevices_parameters = [];
                var cloneOrganizationSwitchDevices_nodeParam;
                var cloneOrganizationSwitchDevices_nodeParamType;
                
                
                cloneOrganizationSwitchDevices_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                cloneOrganizationSwitchDevices_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (cloneOrganizationSwitchDevices_nodeParamType === 'str') {
                    //console.log('cloneOrganizationSwitchDevices_nodeParamType is "str"');
                    cloneOrganizationSwitchDevices_parameters.organizationId = cloneOrganizationSwitchDevices_nodeParam || undefined;
                } else {
                    //console.log('cloneOrganizationSwitchDevices_nodeParamType is not "str"')
                    cloneOrganizationSwitchDevices_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                cloneOrganizationSwitchDevices_nodeParam = storedParamValsMap['cloneOrganizationSwitchDevices'] ||
                    RED.util.getMessageProperty(msg, "cloneOrganizationSwitchDevices");

                cloneOrganizationSwitchDevices_nodeParamType = storedParamTypeMap['cloneOrganizationSwitchDevices'] ||
                    RED.util.getMessageProperty(msg, "cloneOrganizationSwitchDevices");

                // Check if its the body param

                // isBodyParam
                
                if(msg.payload){   
                    if(typeof msg.payload === 'object'){
                        cloneOrganizationSwitchDevices_parameters.cloneOrganizationSwitchDevices = msg.payload;
                    }else{
                        node.error('Unsupported type: \'' + (typeof msg.payload) + '\', ' + 'msg.payload must be a JSON object or a JSON formatted string.', msg);
                        errorFlag = true;
                    }                           
                }else{            
                    if(typeof cloneOrganizationSwitchDevices_nodeParam === 'object'){
                        cloneOrganizationSwitchDevices_parameters.cloneOrganizationSwitchDevices = cloneOrganizationSwitchDevices_nodeParam
                    }else{
                        try{
                        // attempt to convert form value to JSON, default to empty object
                        let nodeParam = cloneOrganizationSwitchDevices_nodeParam || '{}'
                        cloneOrganizationSwitchDevices_nodeParam = JSON.parse(nodeParam) ; 
                        cloneOrganizationSwitchDevices_parameters.cloneOrganizationSwitchDevices = cloneOrganizationSwitchDevices_nodeParam
                            }catch(e){
                                node.error('Unsupported type: \'' + (typeof cloneOrganizationSwitchDevices_nodeParam) + '\', ' + 'form submitted msg.payload must be a JSON string .', msg);
                                errorFlag = true;
                        }
                    }
                }
              
                                result = client.cloneOrganizationSwitchDevices(cloneOrganizationSwitchDevices_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationUplinksStatuses') {
                var getOrganizationUplinksStatuses_parameters = [];
                var getOrganizationUplinksStatuses_nodeParam;
                var getOrganizationUplinksStatuses_nodeParamType;
                
                
                getOrganizationUplinksStatuses_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationUplinksStatuses_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationUplinksStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is "str"');
                    getOrganizationUplinksStatuses_parameters.organizationId = getOrganizationUplinksStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is not "str"')
                    getOrganizationUplinksStatuses_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationUplinksStatuses_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationUplinksStatuses_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationUplinksStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is "str"');
                    getOrganizationUplinksStatuses_parameters.perPage = getOrganizationUplinksStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is not "str"')
                    getOrganizationUplinksStatuses_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationUplinksStatuses_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationUplinksStatuses_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationUplinksStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is "str"');
                    getOrganizationUplinksStatuses_parameters.startingAfter = getOrganizationUplinksStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is not "str"')
                    getOrganizationUplinksStatuses_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationUplinksStatuses_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationUplinksStatuses_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationUplinksStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is "str"');
                    getOrganizationUplinksStatuses_parameters.endingBefore = getOrganizationUplinksStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is not "str"')
                    getOrganizationUplinksStatuses_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationUplinksStatuses_nodeParam = storedParamValsMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                getOrganizationUplinksStatuses_nodeParamType = storedParamTypeMap['networkIds'] ||
                    RED.util.getMessageProperty(msg, "networkIds");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationUplinksStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is "str"');
                    getOrganizationUplinksStatuses_parameters.networkIds = getOrganizationUplinksStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is not "str"')
                    getOrganizationUplinksStatuses_parameters.networkIds = RED.util.getMessageProperty(msg, "networkIds");
                }
                                
                getOrganizationUplinksStatuses_nodeParam = storedParamValsMap['serials'] ||
                    RED.util.getMessageProperty(msg, "serials");

                getOrganizationUplinksStatuses_nodeParamType = storedParamTypeMap['serials'] ||
                    RED.util.getMessageProperty(msg, "serials");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationUplinksStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is "str"');
                    getOrganizationUplinksStatuses_parameters.serials = getOrganizationUplinksStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is not "str"')
                    getOrganizationUplinksStatuses_parameters.serials = RED.util.getMessageProperty(msg, "serials");
                }
                                
                getOrganizationUplinksStatuses_nodeParam = storedParamValsMap['iccids'] ||
                    RED.util.getMessageProperty(msg, "iccids");

                getOrganizationUplinksStatuses_nodeParamType = storedParamTypeMap['iccids'] ||
                    RED.util.getMessageProperty(msg, "iccids");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationUplinksStatuses_nodeParamType === 'str') {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is "str"');
                    getOrganizationUplinksStatuses_parameters.iccids = getOrganizationUplinksStatuses_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationUplinksStatuses_nodeParamType is not "str"')
                    getOrganizationUplinksStatuses_parameters.iccids = RED.util.getMessageProperty(msg, "iccids");
                }
                                result = client.getOrganizationUplinksStatuses(getOrganizationUplinksStatuses_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationWebhooksAlertTypes') {
                var getOrganizationWebhooksAlertTypes_parameters = [];
                var getOrganizationWebhooksAlertTypes_nodeParam;
                var getOrganizationWebhooksAlertTypes_nodeParamType;
                
                
                getOrganizationWebhooksAlertTypes_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationWebhooksAlertTypes_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksAlertTypes_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksAlertTypes_nodeParamType is "str"');
                    getOrganizationWebhooksAlertTypes_parameters.organizationId = getOrganizationWebhooksAlertTypes_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksAlertTypes_nodeParamType is not "str"')
                    getOrganizationWebhooksAlertTypes_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                result = client.getOrganizationWebhooksAlertTypes(getOrganizationWebhooksAlertTypes_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && node.method === 'getOrganizationWebhooksLogs') {
                var getOrganizationWebhooksLogs_parameters = [];
                var getOrganizationWebhooksLogs_nodeParam;
                var getOrganizationWebhooksLogs_nodeParamType;
                
                
                getOrganizationWebhooksLogs_nodeParam = storedParamValsMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                getOrganizationWebhooksLogs_nodeParamType = storedParamTypeMap['organizationId'] ||
                    RED.util.getMessageProperty(msg, "organizationId");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksLogs_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is "str"');
                    getOrganizationWebhooksLogs_parameters.organizationId = getOrganizationWebhooksLogs_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is not "str"')
                    getOrganizationWebhooksLogs_parameters.organizationId = RED.util.getMessageProperty(msg, "organizationId");
                }
                                
                getOrganizationWebhooksLogs_nodeParam = storedParamValsMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                getOrganizationWebhooksLogs_nodeParamType = storedParamTypeMap['t0'] ||
                    RED.util.getMessageProperty(msg, "t0");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksLogs_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is "str"');
                    getOrganizationWebhooksLogs_parameters.t0 = getOrganizationWebhooksLogs_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is not "str"')
                    getOrganizationWebhooksLogs_parameters.t0 = RED.util.getMessageProperty(msg, "t0");
                }
                                
                getOrganizationWebhooksLogs_nodeParam = storedParamValsMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                getOrganizationWebhooksLogs_nodeParamType = storedParamTypeMap['t1'] ||
                    RED.util.getMessageProperty(msg, "t1");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksLogs_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is "str"');
                    getOrganizationWebhooksLogs_parameters.t1 = getOrganizationWebhooksLogs_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is not "str"')
                    getOrganizationWebhooksLogs_parameters.t1 = RED.util.getMessageProperty(msg, "t1");
                }
                                
                getOrganizationWebhooksLogs_nodeParam = storedParamValsMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                getOrganizationWebhooksLogs_nodeParamType = storedParamTypeMap['timespan'] ||
                    RED.util.getMessageProperty(msg, "timespan");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksLogs_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is "str"');
                    getOrganizationWebhooksLogs_parameters.timespan = getOrganizationWebhooksLogs_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is not "str"')
                    getOrganizationWebhooksLogs_parameters.timespan = RED.util.getMessageProperty(msg, "timespan");
                }
                                
                getOrganizationWebhooksLogs_nodeParam = storedParamValsMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                getOrganizationWebhooksLogs_nodeParamType = storedParamTypeMap['perPage'] ||
                    RED.util.getMessageProperty(msg, "perPage");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksLogs_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is "str"');
                    getOrganizationWebhooksLogs_parameters.perPage = getOrganizationWebhooksLogs_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is not "str"')
                    getOrganizationWebhooksLogs_parameters.perPage = RED.util.getMessageProperty(msg, "perPage");
                }
                                
                getOrganizationWebhooksLogs_nodeParam = storedParamValsMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                getOrganizationWebhooksLogs_nodeParamType = storedParamTypeMap['startingAfter'] ||
                    RED.util.getMessageProperty(msg, "startingAfter");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksLogs_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is "str"');
                    getOrganizationWebhooksLogs_parameters.startingAfter = getOrganizationWebhooksLogs_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is not "str"')
                    getOrganizationWebhooksLogs_parameters.startingAfter = RED.util.getMessageProperty(msg, "startingAfter");
                }
                                
                getOrganizationWebhooksLogs_nodeParam = storedParamValsMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                getOrganizationWebhooksLogs_nodeParamType = storedParamTypeMap['endingBefore'] ||
                    RED.util.getMessageProperty(msg, "endingBefore");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksLogs_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is "str"');
                    getOrganizationWebhooksLogs_parameters.endingBefore = getOrganizationWebhooksLogs_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is not "str"')
                    getOrganizationWebhooksLogs_parameters.endingBefore = RED.util.getMessageProperty(msg, "endingBefore");
                }
                                
                getOrganizationWebhooksLogs_nodeParam = storedParamValsMap['url'] ||
                    RED.util.getMessageProperty(msg, "url");

                getOrganizationWebhooksLogs_nodeParamType = storedParamTypeMap['url'] ||
                    RED.util.getMessageProperty(msg, "url");

                // Check if its the body param

                // notBodyParam                                            
                if (getOrganizationWebhooksLogs_nodeParamType === 'str') {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is "str"');
                    getOrganizationWebhooksLogs_parameters.url = getOrganizationWebhooksLogs_nodeParam || undefined;
                } else {
                    //console.log('getOrganizationWebhooksLogs_nodeParamType is not "str"')
                    getOrganizationWebhooksLogs_parameters.url = RED.util.getMessageProperty(msg, "url");
                }
                                result = client.getOrganizationWebhooksLogs(getOrganizationWebhooksLogs_parameters);
                //console.log('result', result);
            }
            if (!errorFlag && result === undefined) {
                node.error('Method is not specified.', msg);
                errorFlag = true;
            }
            var setData = function (msg, data) {
                console.log('setData msg', msg)                  
                if (data) {
                    if (data.response) {
                        if (data.response.statusCode) {
                            msg.statusCode = data.response.statusCode;
                        }
                        if (data.response.headers) {
                            msg.headers = data.response.headers;
                        }
                        if (data.response.request && data.response.request.uri && data.response.request.uri.href) {
                            msg.responseUrl = data.response.request.uri.href;
                        }
                    }
                    if (data.body) {
                        msg.payload = data.body || {};
                        console.log('setData data.body', data.body)  
                    }
                }
                return msg;
            };
            if (!errorFlag) {
                node.status({ fill: 'blue', shape: 'dot', text: 'MerakiDashboardApi.status.requesting' });
                result.then(function (data) {
                    node.send(setData(msg, data));
                    node.status({});
                }).catch(function (error) {
                    var message = null;
                    if (error && error.body && error.body.message) {
                        message = error.body.message;
                    }else{
                        message = error;
                    }
                    //console.log('setData msg', msg);
                    node.error(message, setData(msg, error));
                    node.status({ fill: 'red', shape: 'ring', text: 'node-red:common.status.error' });
                });
            }
        });
        console.log('node end',node)
    }

    RED.nodes.registerType('meraki-dashboard-api-v1', MerakiDashboardApiNode);
    function MerakiDashboardApiServiceNode(n) {
        RED.nodes.createNode(this, n);
        
        this.host = n.host;
       

        this.secureApiKeyValue = n.secureApiKeyValue;
        this.secureApiKeyHeaderOrQueryName = n.secureApiKeyHeaderOrQueryName;
        this.secureApiKeyIsQuery = n.secureApiKeyIsQuery;
    }

    RED.nodes.registerType('meraki-dashboard-api-v1-service', MerakiDashboardApiServiceNode, {
        host: { type: 'text' },
        credentials: {
            secureApiKeyValue: { type: 'password' },
            temp: { type: 'text' }
        }
    });
};
